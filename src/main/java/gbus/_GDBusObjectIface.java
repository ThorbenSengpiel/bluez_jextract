// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GDBusObjectIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_object_path"),
        Constants$root.C_POINTER$LAYOUT.withName("get_interfaces"),
        Constants$root.C_POINTER$LAYOUT.withName("get_interface"),
        Constants$root.C_POINTER$LAYOUT.withName("interface_added"),
        Constants$root.C_POINTER$LAYOUT.withName("interface_removed")
    ).withName("_GDBusObjectIface");
    public static MemoryLayout $LAYOUT() {
        return _GDBusObjectIface.$struct$LAYOUT;
    }
    public static MemorySegment parent_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_object_path$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_object_path$MH = RuntimeHelper.downcallHandle(
        _GDBusObjectIface.get_object_path$FUNC, false
    );
    public interface get_object_path {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_object_path fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_object_path.class, fi, _GDBusObjectIface.get_object_path$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_object_path ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_object_path::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_object_path$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_object_path$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_object_path"));
    public static VarHandle get_object_path$VH() {
        return _GDBusObjectIface.get_object_path$VH;
    }
    public static MemoryAddress get_object_path$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_object_path$VH.get(seg);
    }
    public static void get_object_path$set( MemorySegment seg, MemoryAddress x) {
        _GDBusObjectIface.get_object_path$VH.set(seg, x);
    }
    public static MemoryAddress get_object_path$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_object_path$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object_path$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusObjectIface.get_object_path$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object_path get_object_path (MemorySegment segment, ResourceScope scope) {
        return get_object_path.ofAddress(get_object_path$get(segment), scope);
    }
    static final FunctionDescriptor get_interfaces$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_interfaces$MH = RuntimeHelper.downcallHandle(
        _GDBusObjectIface.get_interfaces$FUNC, false
    );
    public interface get_interfaces {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_interfaces fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_interfaces.class, fi, _GDBusObjectIface.get_interfaces$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_interfaces ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_interfaces::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_interfaces$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_interfaces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_interfaces"));
    public static VarHandle get_interfaces$VH() {
        return _GDBusObjectIface.get_interfaces$VH;
    }
    public static MemoryAddress get_interfaces$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_interfaces$VH.get(seg);
    }
    public static void get_interfaces$set( MemorySegment seg, MemoryAddress x) {
        _GDBusObjectIface.get_interfaces$VH.set(seg, x);
    }
    public static MemoryAddress get_interfaces$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_interfaces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_interfaces$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusObjectIface.get_interfaces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_interfaces get_interfaces (MemorySegment segment, ResourceScope scope) {
        return get_interfaces.ofAddress(get_interfaces$get(segment), scope);
    }
    static final FunctionDescriptor get_interface$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_interface$MH = RuntimeHelper.downcallHandle(
        _GDBusObjectIface.get_interface$FUNC, false
    );
    public interface get_interface {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(get_interface fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_interface.class, fi, _GDBusObjectIface.get_interface$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_interface ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_interface::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_interface$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_interface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_interface"));
    public static VarHandle get_interface$VH() {
        return _GDBusObjectIface.get_interface$VH;
    }
    public static MemoryAddress get_interface$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_interface$VH.get(seg);
    }
    public static void get_interface$set( MemorySegment seg, MemoryAddress x) {
        _GDBusObjectIface.get_interface$VH.set(seg, x);
    }
    public static MemoryAddress get_interface$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.get_interface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_interface$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusObjectIface.get_interface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_interface get_interface (MemorySegment segment, ResourceScope scope) {
        return get_interface.ofAddress(get_interface$get(segment), scope);
    }
    static final FunctionDescriptor interface_added$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle interface_added$MH = RuntimeHelper.downcallHandle(
        _GDBusObjectIface.interface_added$FUNC, false
    );
    public interface interface_added {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(interface_added fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(interface_added.class, fi, _GDBusObjectIface.interface_added$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static interface_added ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("interface_added::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    _GDBusObjectIface.interface_added$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle interface_added$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("interface_added"));
    public static VarHandle interface_added$VH() {
        return _GDBusObjectIface.interface_added$VH;
    }
    public static MemoryAddress interface_added$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.interface_added$VH.get(seg);
    }
    public static void interface_added$set( MemorySegment seg, MemoryAddress x) {
        _GDBusObjectIface.interface_added$VH.set(seg, x);
    }
    public static MemoryAddress interface_added$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.interface_added$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_added$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusObjectIface.interface_added$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static interface_added interface_added (MemorySegment segment, ResourceScope scope) {
        return interface_added.ofAddress(interface_added$get(segment), scope);
    }
    static final FunctionDescriptor interface_removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle interface_removed$MH = RuntimeHelper.downcallHandle(
        _GDBusObjectIface.interface_removed$FUNC, false
    );
    public interface interface_removed {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(interface_removed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(interface_removed.class, fi, _GDBusObjectIface.interface_removed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static interface_removed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("interface_removed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    _GDBusObjectIface.interface_removed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle interface_removed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("interface_removed"));
    public static VarHandle interface_removed$VH() {
        return _GDBusObjectIface.interface_removed$VH;
    }
    public static MemoryAddress interface_removed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.interface_removed$VH.get(seg);
    }
    public static void interface_removed$set( MemorySegment seg, MemoryAddress x) {
        _GDBusObjectIface.interface_removed$VH.set(seg, x);
    }
    public static MemoryAddress interface_removed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusObjectIface.interface_removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_removed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusObjectIface.interface_removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static interface_removed interface_removed (MemorySegment segment, ResourceScope scope) {
        return interface_removed.ofAddress(interface_removed$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


