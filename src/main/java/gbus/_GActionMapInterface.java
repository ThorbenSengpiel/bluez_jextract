// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GActionMapInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_action"),
        Constants$root.C_POINTER$LAYOUT.withName("add_action"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_action")
    ).withName("_GActionMapInterface");
    public static MemoryLayout $LAYOUT() {
        return _GActionMapInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor lookup_action$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_action$MH = RuntimeHelper.downcallHandle(
        _GActionMapInterface.lookup_action$FUNC, false
    );
    public interface lookup_action {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(lookup_action fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_action.class, fi, _GActionMapInterface.lookup_action$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static lookup_action ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_action::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GActionMapInterface.lookup_action$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_action$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_action"));
    public static VarHandle lookup_action$VH() {
        return _GActionMapInterface.lookup_action$VH;
    }
    public static MemoryAddress lookup_action$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GActionMapInterface.lookup_action$VH.get(seg);
    }
    public static void lookup_action$set( MemorySegment seg, MemoryAddress x) {
        _GActionMapInterface.lookup_action$VH.set(seg, x);
    }
    public static MemoryAddress lookup_action$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GActionMapInterface.lookup_action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_action$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionMapInterface.lookup_action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_action lookup_action (MemorySegment segment, ResourceScope scope) {
        return lookup_action.ofAddress(lookup_action$get(segment), scope);
    }
    static final FunctionDescriptor add_action$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_action$MH = RuntimeHelper.downcallHandle(
        _GActionMapInterface.add_action$FUNC, false
    );
    public interface add_action {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(add_action fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(add_action.class, fi, _GActionMapInterface.add_action$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static add_action ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("add_action::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    _GActionMapInterface.add_action$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_action$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_action"));
    public static VarHandle add_action$VH() {
        return _GActionMapInterface.add_action$VH;
    }
    public static MemoryAddress add_action$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GActionMapInterface.add_action$VH.get(seg);
    }
    public static void add_action$set( MemorySegment seg, MemoryAddress x) {
        _GActionMapInterface.add_action$VH.set(seg, x);
    }
    public static MemoryAddress add_action$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GActionMapInterface.add_action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_action$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionMapInterface.add_action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_action add_action (MemorySegment segment, ResourceScope scope) {
        return add_action.ofAddress(add_action$get(segment), scope);
    }
    static final FunctionDescriptor remove_action$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove_action$MH = RuntimeHelper.downcallHandle(
        _GActionMapInterface.remove_action$FUNC, false
    );
    public interface remove_action {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(remove_action fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(remove_action.class, fi, _GActionMapInterface.remove_action$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static remove_action ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("remove_action::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    _GActionMapInterface.remove_action$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_action$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_action"));
    public static VarHandle remove_action$VH() {
        return _GActionMapInterface.remove_action$VH;
    }
    public static MemoryAddress remove_action$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GActionMapInterface.remove_action$VH.get(seg);
    }
    public static void remove_action$set( MemorySegment seg, MemoryAddress x) {
        _GActionMapInterface.remove_action$VH.set(seg, x);
    }
    public static MemoryAddress remove_action$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GActionMapInterface.remove_action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_action$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionMapInterface.remove_action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_action remove_action (MemorySegment segment, ResourceScope scope) {
        return remove_action.ofAddress(remove_action$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


