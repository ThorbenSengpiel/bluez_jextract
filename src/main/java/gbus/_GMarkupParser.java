// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GMarkupParser {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("start_element"),
        Constants$root.C_POINTER$LAYOUT.withName("end_element"),
        Constants$root.C_POINTER$LAYOUT.withName("text"),
        Constants$root.C_POINTER$LAYOUT.withName("passthrough"),
        Constants$root.C_POINTER$LAYOUT.withName("error")
    ).withName("_GMarkupParser");
    public static MemoryLayout $LAYOUT() {
        return _GMarkupParser.$struct$LAYOUT;
    }
    static final FunctionDescriptor start_element$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle start_element$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.start_element$FUNC, false
    );
    public interface start_element {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static NativeSymbol allocate(start_element fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(start_element.class, fi, _GMarkupParser.start_element$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static start_element ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("start_element::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    _GMarkupParser.start_element$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3, (jdk.incubator.foreign.Addressable)x4, (jdk.incubator.foreign.Addressable)x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_element$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_element"));
    public static VarHandle start_element$VH() {
        return _GMarkupParser.start_element$VH;
    }
    public static MemoryAddress start_element$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.start_element$VH.get(seg);
    }
    public static void start_element$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.start_element$VH.set(seg, x);
    }
    public static MemoryAddress start_element$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.start_element$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_element$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.start_element$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_element start_element (MemorySegment segment, ResourceScope scope) {
        return start_element.ofAddress(start_element$get(segment), scope);
    }
    static final FunctionDescriptor end_element$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end_element$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.end_element$FUNC, false
    );
    public interface end_element {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static NativeSymbol allocate(end_element fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(end_element.class, fi, _GMarkupParser.end_element$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static end_element ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("end_element::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    _GMarkupParser.end_element$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end_element$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_element"));
    public static VarHandle end_element$VH() {
        return _GMarkupParser.end_element$VH;
    }
    public static MemoryAddress end_element$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.end_element$VH.get(seg);
    }
    public static void end_element$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.end_element$VH.set(seg, x);
    }
    public static MemoryAddress end_element$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.end_element$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_element$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.end_element$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_element end_element (MemorySegment segment, ResourceScope scope) {
        return end_element.ofAddress(end_element$get(segment), scope);
    }
    static final FunctionDescriptor text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle text$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.text$FUNC, false
    );
    public interface text {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static NativeSymbol allocate(text fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(text.class, fi, _GMarkupParser.text$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static text ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("text::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    _GMarkupParser.text$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, x2, (jdk.incubator.foreign.Addressable)x3, (jdk.incubator.foreign.Addressable)x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text"));
    public static VarHandle text$VH() {
        return _GMarkupParser.text$VH;
    }
    public static MemoryAddress text$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.text$VH.get(seg);
    }
    public static void text$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.text$VH.set(seg, x);
    }
    public static MemoryAddress text$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static text text (MemorySegment segment, ResourceScope scope) {
        return text.ofAddress(text$get(segment), scope);
    }
    static final FunctionDescriptor passthrough$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle passthrough$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.passthrough$FUNC, false
    );
    public interface passthrough {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static NativeSymbol allocate(passthrough fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(passthrough.class, fi, _GMarkupParser.passthrough$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static passthrough ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("passthrough::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    _GMarkupParser.passthrough$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, x2, (jdk.incubator.foreign.Addressable)x3, (jdk.incubator.foreign.Addressable)x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle passthrough$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("passthrough"));
    public static VarHandle passthrough$VH() {
        return _GMarkupParser.passthrough$VH;
    }
    public static MemoryAddress passthrough$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.passthrough$VH.get(seg);
    }
    public static void passthrough$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.passthrough$VH.set(seg, x);
    }
    public static MemoryAddress passthrough$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.passthrough$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void passthrough$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.passthrough$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static passthrough passthrough (MemorySegment segment, ResourceScope scope) {
        return passthrough.ofAddress(passthrough$get(segment), scope);
    }
    static final FunctionDescriptor error$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle error$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.error$FUNC, false
    );
    public interface error {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static NativeSymbol allocate(error fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(error.class, fi, _GMarkupParser.error$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static error ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("error::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    _GMarkupParser.error$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle error$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("error"));
    public static VarHandle error$VH() {
        return _GMarkupParser.error$VH;
    }
    public static MemoryAddress error$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.error$VH.get(seg);
    }
    public static void error$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.error$VH.set(seg, x);
    }
    public static MemoryAddress error$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GMarkupParser.error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static error error (MemorySegment segment, ResourceScope scope) {
        return error.ofAddress(error$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


