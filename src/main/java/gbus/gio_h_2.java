// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class gio_h_2 extends gio_h_1 {

    public static MethodHandle g_unichar_type$MH() {
        return RuntimeHelper.requireNonNull(constants$178.g_unichar_type$MH,"g_unichar_type");
    }
    public static int g_unichar_type ( int c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.g_unichar_type$MH, "g_unichar_type");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_break_type$MH() {
        return RuntimeHelper.requireNonNull(constants$178.g_unichar_break_type$MH,"g_unichar_break_type");
    }
    public static int g_unichar_break_type ( int c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.g_unichar_break_type$MH, "g_unichar_break_type");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_combining_class$MH() {
        return RuntimeHelper.requireNonNull(constants$178.g_unichar_combining_class$MH,"g_unichar_combining_class");
    }
    public static int g_unichar_combining_class ( int uc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.g_unichar_combining_class$MH, "g_unichar_combining_class");
        try {
            return (int)mh$.invokeExact(uc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_get_mirror_char$MH() {
        return RuntimeHelper.requireNonNull(constants$178.g_unichar_get_mirror_char$MH,"g_unichar_get_mirror_char");
    }
    public static int g_unichar_get_mirror_char ( int ch,  Addressable mirrored_ch) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.g_unichar_get_mirror_char$MH, "g_unichar_get_mirror_char");
        try {
            return (int)mh$.invokeExact(ch, mirrored_ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_get_script$MH() {
        return RuntimeHelper.requireNonNull(constants$178.g_unichar_get_script$MH,"g_unichar_get_script");
    }
    public static int g_unichar_get_script ( int ch) {
        var mh$ = RuntimeHelper.requireNonNull(constants$178.g_unichar_get_script$MH, "g_unichar_get_script");
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_validate$MH() {
        return RuntimeHelper.requireNonNull(constants$179.g_unichar_validate$MH,"g_unichar_validate");
    }
    public static int g_unichar_validate ( int ch) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.g_unichar_validate$MH, "g_unichar_validate");
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_compose$MH() {
        return RuntimeHelper.requireNonNull(constants$179.g_unichar_compose$MH,"g_unichar_compose");
    }
    public static int g_unichar_compose ( int a,  int b,  Addressable ch) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.g_unichar_compose$MH, "g_unichar_compose");
        try {
            return (int)mh$.invokeExact(a, b, ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_decompose$MH() {
        return RuntimeHelper.requireNonNull(constants$179.g_unichar_decompose$MH,"g_unichar_decompose");
    }
    public static int g_unichar_decompose ( int ch,  Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.g_unichar_decompose$MH, "g_unichar_decompose");
        try {
            return (int)mh$.invokeExact(ch, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_fully_decompose$MH() {
        return RuntimeHelper.requireNonNull(constants$179.g_unichar_fully_decompose$MH,"g_unichar_fully_decompose");
    }
    public static long g_unichar_fully_decompose ( int ch,  int compat,  Addressable result,  long result_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.g_unichar_fully_decompose$MH, "g_unichar_fully_decompose");
        try {
            return (long)mh$.invokeExact(ch, compat, result, result_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unicode_canonical_ordering$MH() {
        return RuntimeHelper.requireNonNull(constants$179.g_unicode_canonical_ordering$MH,"g_unicode_canonical_ordering");
    }
    public static void g_unicode_canonical_ordering ( Addressable string,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.g_unicode_canonical_ordering$MH, "g_unicode_canonical_ordering");
        try {
            mh$.invokeExact(string, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unicode_canonical_decomposition$MH() {
        return RuntimeHelper.requireNonNull(constants$179.g_unicode_canonical_decomposition$MH,"g_unicode_canonical_decomposition");
    }
    public static MemoryAddress g_unicode_canonical_decomposition ( int ch,  Addressable result_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$179.g_unicode_canonical_decomposition$MH, "g_unicode_canonical_decomposition");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ch, result_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout g_utf8_skip$LAYOUT() {
        return constants$180.g_utf8_skip$LAYOUT;
    }
    public static VarHandle g_utf8_skip$VH() {
        return constants$180.g_utf8_skip$VH;
    }
    public static MemorySegment g_utf8_skip$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$180.g_utf8_skip$SEGMENT,"g_utf8_skip");
    }
    public static MemoryAddress g_utf8_skip$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$180.g_utf8_skip$VH.get(RuntimeHelper.requireNonNull(constants$180.g_utf8_skip$SEGMENT, "g_utf8_skip"));
    }
    public static void g_utf8_skip$set( MemoryAddress x) {
        constants$180.g_utf8_skip$VH.set(RuntimeHelper.requireNonNull(constants$180.g_utf8_skip$SEGMENT, "g_utf8_skip"), x);
    }
    public static MethodHandle g_utf8_get_char$MH() {
        return RuntimeHelper.requireNonNull(constants$180.g_utf8_get_char$MH,"g_utf8_get_char");
    }
    public static int g_utf8_get_char ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.g_utf8_get_char$MH, "g_utf8_get_char");
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_get_char_validated$MH() {
        return RuntimeHelper.requireNonNull(constants$180.g_utf8_get_char_validated$MH,"g_utf8_get_char_validated");
    }
    public static int g_utf8_get_char_validated ( Addressable p,  long max_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.g_utf8_get_char_validated$MH, "g_utf8_get_char_validated");
        try {
            return (int)mh$.invokeExact(p, max_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_offset_to_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$180.g_utf8_offset_to_pointer$MH,"g_utf8_offset_to_pointer");
    }
    public static MemoryAddress g_utf8_offset_to_pointer ( Addressable str,  long offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.g_utf8_offset_to_pointer$MH, "g_utf8_offset_to_pointer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_pointer_to_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$180.g_utf8_pointer_to_offset$MH,"g_utf8_pointer_to_offset");
    }
    public static long g_utf8_pointer_to_offset ( Addressable str,  Addressable pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.g_utf8_pointer_to_offset$MH, "g_utf8_pointer_to_offset");
        try {
            return (long)mh$.invokeExact(str, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_prev_char$MH() {
        return RuntimeHelper.requireNonNull(constants$180.g_utf8_prev_char$MH,"g_utf8_prev_char");
    }
    public static MemoryAddress g_utf8_prev_char ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$180.g_utf8_prev_char$MH, "g_utf8_prev_char");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_find_next_char$MH() {
        return RuntimeHelper.requireNonNull(constants$181.g_utf8_find_next_char$MH,"g_utf8_find_next_char");
    }
    public static MemoryAddress g_utf8_find_next_char ( Addressable p,  Addressable end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.g_utf8_find_next_char$MH, "g_utf8_find_next_char");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_find_prev_char$MH() {
        return RuntimeHelper.requireNonNull(constants$181.g_utf8_find_prev_char$MH,"g_utf8_find_prev_char");
    }
    public static MemoryAddress g_utf8_find_prev_char ( Addressable str,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.g_utf8_find_prev_char$MH, "g_utf8_find_prev_char");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$181.g_utf8_strlen$MH,"g_utf8_strlen");
    }
    public static long g_utf8_strlen ( Addressable p,  long max) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.g_utf8_strlen$MH, "g_utf8_strlen");
        try {
            return (long)mh$.invokeExact(p, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_substring$MH() {
        return RuntimeHelper.requireNonNull(constants$181.g_utf8_substring$MH,"g_utf8_substring");
    }
    public static MemoryAddress g_utf8_substring ( Addressable str,  long start_pos,  long end_pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.g_utf8_substring$MH, "g_utf8_substring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, start_pos, end_pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$181.g_utf8_strncpy$MH,"g_utf8_strncpy");
    }
    public static MemoryAddress g_utf8_strncpy ( Addressable dest,  Addressable src,  long n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.g_utf8_strncpy$MH, "g_utf8_strncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dest, src, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$181.g_utf8_strchr$MH,"g_utf8_strchr");
    }
    public static MemoryAddress g_utf8_strchr ( Addressable p,  long len,  int c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$181.g_utf8_strchr$MH, "g_utf8_strchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p, len, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$182.g_utf8_strrchr$MH,"g_utf8_strrchr");
    }
    public static MemoryAddress g_utf8_strrchr ( Addressable p,  long len,  int c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.g_utf8_strrchr$MH, "g_utf8_strrchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p, len, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_strreverse$MH() {
        return RuntimeHelper.requireNonNull(constants$182.g_utf8_strreverse$MH,"g_utf8_strreverse");
    }
    public static MemoryAddress g_utf8_strreverse ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.g_utf8_strreverse$MH, "g_utf8_strreverse");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_to_utf16$MH() {
        return RuntimeHelper.requireNonNull(constants$182.g_utf8_to_utf16$MH,"g_utf8_to_utf16");
    }
    public static MemoryAddress g_utf8_to_utf16 ( Addressable str,  long len,  Addressable items_read,  Addressable items_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.g_utf8_to_utf16$MH, "g_utf8_to_utf16");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_to_ucs4$MH() {
        return RuntimeHelper.requireNonNull(constants$182.g_utf8_to_ucs4$MH,"g_utf8_to_ucs4");
    }
    public static MemoryAddress g_utf8_to_ucs4 ( Addressable str,  long len,  Addressable items_read,  Addressable items_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.g_utf8_to_ucs4$MH, "g_utf8_to_ucs4");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_to_ucs4_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$182.g_utf8_to_ucs4_fast$MH,"g_utf8_to_ucs4_fast");
    }
    public static MemoryAddress g_utf8_to_ucs4_fast ( Addressable str,  long len,  Addressable items_written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.g_utf8_to_ucs4_fast$MH, "g_utf8_to_ucs4_fast");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, items_written);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf16_to_ucs4$MH() {
        return RuntimeHelper.requireNonNull(constants$182.g_utf16_to_ucs4$MH,"g_utf16_to_ucs4");
    }
    public static MemoryAddress g_utf16_to_ucs4 ( Addressable str,  long len,  Addressable items_read,  Addressable items_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$182.g_utf16_to_ucs4$MH, "g_utf16_to_ucs4");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf16_to_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$183.g_utf16_to_utf8$MH,"g_utf16_to_utf8");
    }
    public static MemoryAddress g_utf16_to_utf8 ( Addressable str,  long len,  Addressable items_read,  Addressable items_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.g_utf16_to_utf8$MH, "g_utf16_to_utf8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ucs4_to_utf16$MH() {
        return RuntimeHelper.requireNonNull(constants$183.g_ucs4_to_utf16$MH,"g_ucs4_to_utf16");
    }
    public static MemoryAddress g_ucs4_to_utf16 ( Addressable str,  long len,  Addressable items_read,  Addressable items_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.g_ucs4_to_utf16$MH, "g_ucs4_to_utf16");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ucs4_to_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$183.g_ucs4_to_utf8$MH,"g_ucs4_to_utf8");
    }
    public static MemoryAddress g_ucs4_to_utf8 ( Addressable str,  long len,  Addressable items_read,  Addressable items_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.g_ucs4_to_utf8$MH, "g_ucs4_to_utf8");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, items_read, items_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_unichar_to_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$183.g_unichar_to_utf8$MH,"g_unichar_to_utf8");
    }
    public static int g_unichar_to_utf8 ( int c,  Addressable outbuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.g_unichar_to_utf8$MH, "g_unichar_to_utf8");
        try {
            return (int)mh$.invokeExact(c, outbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_validate$MH() {
        return RuntimeHelper.requireNonNull(constants$183.g_utf8_validate$MH,"g_utf8_validate");
    }
    public static int g_utf8_validate ( Addressable str,  long max_len,  Addressable end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.g_utf8_validate$MH, "g_utf8_validate");
        try {
            return (int)mh$.invokeExact(str, max_len, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_validate_len$MH() {
        return RuntimeHelper.requireNonNull(constants$183.g_utf8_validate_len$MH,"g_utf8_validate_len");
    }
    public static int g_utf8_validate_len ( Addressable str,  long max_len,  Addressable end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$183.g_utf8_validate_len$MH, "g_utf8_validate_len");
        try {
            return (int)mh$.invokeExact(str, max_len, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_strup$MH() {
        return RuntimeHelper.requireNonNull(constants$184.g_utf8_strup$MH,"g_utf8_strup");
    }
    public static MemoryAddress g_utf8_strup ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$184.g_utf8_strup$MH, "g_utf8_strup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_strdown$MH() {
        return RuntimeHelper.requireNonNull(constants$184.g_utf8_strdown$MH,"g_utf8_strdown");
    }
    public static MemoryAddress g_utf8_strdown ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$184.g_utf8_strdown$MH, "g_utf8_strdown");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_casefold$MH() {
        return RuntimeHelper.requireNonNull(constants$184.g_utf8_casefold$MH,"g_utf8_casefold");
    }
    public static MemoryAddress g_utf8_casefold ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$184.g_utf8_casefold$MH, "g_utf8_casefold");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_NORMALIZE_DEFAULT() {
        return (int)0L;
    }
    public static int G_NORMALIZE_NFD() {
        return (int)0L;
    }
    public static int G_NORMALIZE_DEFAULT_COMPOSE() {
        return (int)1L;
    }
    public static int G_NORMALIZE_NFC() {
        return (int)1L;
    }
    public static int G_NORMALIZE_ALL() {
        return (int)2L;
    }
    public static int G_NORMALIZE_NFKD() {
        return (int)2L;
    }
    public static int G_NORMALIZE_ALL_COMPOSE() {
        return (int)3L;
    }
    public static int G_NORMALIZE_NFKC() {
        return (int)3L;
    }
    public static MethodHandle g_utf8_normalize$MH() {
        return RuntimeHelper.requireNonNull(constants$184.g_utf8_normalize$MH,"g_utf8_normalize");
    }
    public static MemoryAddress g_utf8_normalize ( Addressable str,  long len,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$184.g_utf8_normalize$MH, "g_utf8_normalize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_collate$MH() {
        return RuntimeHelper.requireNonNull(constants$184.g_utf8_collate$MH,"g_utf8_collate");
    }
    public static int g_utf8_collate ( Addressable str1,  Addressable str2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$184.g_utf8_collate$MH, "g_utf8_collate");
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_collate_key$MH() {
        return RuntimeHelper.requireNonNull(constants$184.g_utf8_collate_key$MH,"g_utf8_collate_key");
    }
    public static MemoryAddress g_utf8_collate_key ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$184.g_utf8_collate_key$MH, "g_utf8_collate_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_collate_key_for_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$185.g_utf8_collate_key_for_filename$MH,"g_utf8_collate_key_for_filename");
    }
    public static MemoryAddress g_utf8_collate_key_for_filename ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$185.g_utf8_collate_key_for_filename$MH, "g_utf8_collate_key_for_filename");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_utf8_make_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$185.g_utf8_make_valid$MH,"g_utf8_make_valid");
    }
    public static MemoryAddress g_utf8_make_valid ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$185.g_utf8_make_valid$MH, "g_utf8_make_valid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_new$MH() {
        return RuntimeHelper.requireNonNull(constants$185.g_string_new$MH,"g_string_new");
    }
    public static MemoryAddress g_string_new ( Addressable init) {
        var mh$ = RuntimeHelper.requireNonNull(constants$185.g_string_new$MH, "g_string_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(init);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_new_len$MH() {
        return RuntimeHelper.requireNonNull(constants$185.g_string_new_len$MH,"g_string_new_len");
    }
    public static MemoryAddress g_string_new_len ( Addressable init,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$185.g_string_new_len$MH, "g_string_new_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(init, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$185.g_string_sized_new$MH,"g_string_sized_new");
    }
    public static MemoryAddress g_string_sized_new ( long dfl_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$185.g_string_sized_new$MH, "g_string_sized_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dfl_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_free$MH() {
        return RuntimeHelper.requireNonNull(constants$185.g_string_free$MH,"g_string_free");
    }
    public static MemoryAddress g_string_free ( Addressable string,  int free_segment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$185.g_string_free$MH, "g_string_free");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, free_segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_free_to_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$186.g_string_free_to_bytes$MH,"g_string_free_to_bytes");
    }
    public static MemoryAddress g_string_free_to_bytes ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.g_string_free_to_bytes$MH, "g_string_free_to_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$186.g_string_equal$MH,"g_string_equal");
    }
    public static int g_string_equal ( Addressable v,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.g_string_equal$MH, "g_string_equal");
        try {
            return (int)mh$.invokeExact(v, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$186.g_string_hash$MH,"g_string_hash");
    }
    public static int g_string_hash ( Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.g_string_hash$MH, "g_string_hash");
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_assign$MH() {
        return RuntimeHelper.requireNonNull(constants$186.g_string_assign$MH,"g_string_assign");
    }
    public static MemoryAddress g_string_assign ( Addressable string,  Addressable rval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.g_string_assign$MH, "g_string_assign");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, rval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$186.g_string_truncate$MH,"g_string_truncate");
    }
    public static MemoryAddress g_string_truncate ( Addressable string,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.g_string_truncate$MH, "g_string_truncate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$186.g_string_set_size$MH,"g_string_set_size");
    }
    public static MemoryAddress g_string_set_size ( Addressable string,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$186.g_string_set_size$MH, "g_string_set_size");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_insert_len$MH() {
        return RuntimeHelper.requireNonNull(constants$187.g_string_insert_len$MH,"g_string_insert_len");
    }
    public static MemoryAddress g_string_insert_len ( Addressable string,  long pos,  Addressable val,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.g_string_insert_len$MH, "g_string_insert_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, pos, val, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append$MH() {
        return RuntimeHelper.requireNonNull(constants$187.g_string_append$MH,"g_string_append");
    }
    public static MemoryAddress g_string_append ( Addressable string,  Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.g_string_append$MH, "g_string_append");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append_len$MH() {
        return RuntimeHelper.requireNonNull(constants$187.g_string_append_len$MH,"g_string_append_len");
    }
    public static MemoryAddress g_string_append_len ( Addressable string,  Addressable val,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.g_string_append_len$MH, "g_string_append_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, val, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append_c$MH() {
        return RuntimeHelper.requireNonNull(constants$187.g_string_append_c$MH,"g_string_append_c");
    }
    public static MemoryAddress g_string_append_c ( Addressable string,  byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.g_string_append_c$MH, "g_string_append_c");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append_unichar$MH() {
        return RuntimeHelper.requireNonNull(constants$187.g_string_append_unichar$MH,"g_string_append_unichar");
    }
    public static MemoryAddress g_string_append_unichar ( Addressable string,  int wc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.g_string_append_unichar$MH, "g_string_append_unichar");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, wc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$187.g_string_prepend$MH,"g_string_prepend");
    }
    public static MemoryAddress g_string_prepend ( Addressable string,  Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$187.g_string_prepend$MH, "g_string_prepend");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_prepend_c$MH() {
        return RuntimeHelper.requireNonNull(constants$188.g_string_prepend_c$MH,"g_string_prepend_c");
    }
    public static MemoryAddress g_string_prepend_c ( Addressable string,  byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.g_string_prepend_c$MH, "g_string_prepend_c");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_prepend_unichar$MH() {
        return RuntimeHelper.requireNonNull(constants$188.g_string_prepend_unichar$MH,"g_string_prepend_unichar");
    }
    public static MemoryAddress g_string_prepend_unichar ( Addressable string,  int wc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.g_string_prepend_unichar$MH, "g_string_prepend_unichar");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, wc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_prepend_len$MH() {
        return RuntimeHelper.requireNonNull(constants$188.g_string_prepend_len$MH,"g_string_prepend_len");
    }
    public static MemoryAddress g_string_prepend_len ( Addressable string,  Addressable val,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.g_string_prepend_len$MH, "g_string_prepend_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, val, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$188.g_string_insert$MH,"g_string_insert");
    }
    public static MemoryAddress g_string_insert ( Addressable string,  long pos,  Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.g_string_insert$MH, "g_string_insert");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, pos, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_insert_c$MH() {
        return RuntimeHelper.requireNonNull(constants$188.g_string_insert_c$MH,"g_string_insert_c");
    }
    public static MemoryAddress g_string_insert_c ( Addressable string,  long pos,  byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.g_string_insert_c$MH, "g_string_insert_c");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, pos, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_insert_unichar$MH() {
        return RuntimeHelper.requireNonNull(constants$188.g_string_insert_unichar$MH,"g_string_insert_unichar");
    }
    public static MemoryAddress g_string_insert_unichar ( Addressable string,  long pos,  int wc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$188.g_string_insert_unichar$MH, "g_string_insert_unichar");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, pos, wc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_overwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$189.g_string_overwrite$MH,"g_string_overwrite");
    }
    public static MemoryAddress g_string_overwrite ( Addressable string,  long pos,  Addressable val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.g_string_overwrite$MH, "g_string_overwrite");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, pos, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_overwrite_len$MH() {
        return RuntimeHelper.requireNonNull(constants$189.g_string_overwrite_len$MH,"g_string_overwrite_len");
    }
    public static MemoryAddress g_string_overwrite_len ( Addressable string,  long pos,  Addressable val,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.g_string_overwrite_len$MH, "g_string_overwrite_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, pos, val, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_erase$MH() {
        return RuntimeHelper.requireNonNull(constants$189.g_string_erase$MH,"g_string_erase");
    }
    public static MemoryAddress g_string_erase ( Addressable string,  long pos,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.g_string_erase$MH, "g_string_erase");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, pos, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$189.g_string_replace$MH,"g_string_replace");
    }
    public static int g_string_replace ( Addressable string,  Addressable find,  Addressable replace,  int limit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.g_string_replace$MH, "g_string_replace");
        try {
            return (int)mh$.invokeExact(string, find, replace, limit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_ascii_down$MH() {
        return RuntimeHelper.requireNonNull(constants$189.g_string_ascii_down$MH,"g_string_ascii_down");
    }
    public static MemoryAddress g_string_ascii_down ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.g_string_ascii_down$MH, "g_string_ascii_down");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_ascii_up$MH() {
        return RuntimeHelper.requireNonNull(constants$189.g_string_ascii_up$MH,"g_string_ascii_up");
    }
    public static MemoryAddress g_string_ascii_up ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$189.g_string_ascii_up$MH, "g_string_ascii_up");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$190.g_string_vprintf$MH,"g_string_vprintf");
    }
    public static void g_string_vprintf ( Addressable string,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$190.g_string_vprintf$MH, "g_string_vprintf");
        try {
            mh$.invokeExact(string, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$190.g_string_printf$MH,"g_string_printf");
    }
    public static void g_string_printf ( Addressable string,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$190.g_string_printf$MH, "g_string_printf");
        try {
            mh$.invokeExact(string, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append_vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$190.g_string_append_vprintf$MH,"g_string_append_vprintf");
    }
    public static void g_string_append_vprintf ( Addressable string,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$190.g_string_append_vprintf$MH, "g_string_append_vprintf");
        try {
            mh$.invokeExact(string, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$190.g_string_append_printf$MH,"g_string_append_printf");
    }
    public static void g_string_append_printf ( Addressable string,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$190.g_string_append_printf$MH, "g_string_append_printf");
        try {
            mh$.invokeExact(string, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append_uri_escaped$MH() {
        return RuntimeHelper.requireNonNull(constants$190.g_string_append_uri_escaped$MH,"g_string_append_uri_escaped");
    }
    public static MemoryAddress g_string_append_uri_escaped ( Addressable string,  Addressable unescaped,  Addressable reserved_chars_allowed,  int allow_utf8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$190.g_string_append_uri_escaped$MH, "g_string_append_uri_escaped");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, unescaped, reserved_chars_allowed, allow_utf8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_append_c_inline$MH() {
        return RuntimeHelper.requireNonNull(constants$190.g_string_append_c_inline$MH,"g_string_append_c_inline");
    }
    public static MemoryAddress g_string_append_c_inline ( Addressable gstring,  byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$190.g_string_append_c_inline$MH, "g_string_append_c_inline");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(gstring, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_down$MH() {
        return RuntimeHelper.requireNonNull(constants$191.g_string_down$MH,"g_string_down");
    }
    public static MemoryAddress g_string_down ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.g_string_down$MH, "g_string_down");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_up$MH() {
        return RuntimeHelper.requireNonNull(constants$191.g_string_up$MH,"g_string_up");
    }
    public static MemoryAddress g_string_up ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.g_string_up$MH, "g_string_up");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_IO_ERROR_NONE() {
        return (int)0L;
    }
    public static int G_IO_ERROR_AGAIN() {
        return (int)1L;
    }
    public static int G_IO_ERROR_INVAL() {
        return (int)2L;
    }
    public static int G_IO_ERROR_UNKNOWN() {
        return (int)3L;
    }
    public static int G_IO_CHANNEL_ERROR_FBIG() {
        return (int)0L;
    }
    public static int G_IO_CHANNEL_ERROR_INVAL() {
        return (int)1L;
    }
    public static int G_IO_CHANNEL_ERROR_IO() {
        return (int)2L;
    }
    public static int G_IO_CHANNEL_ERROR_ISDIR() {
        return (int)3L;
    }
    public static int G_IO_CHANNEL_ERROR_NOSPC() {
        return (int)4L;
    }
    public static int G_IO_CHANNEL_ERROR_NXIO() {
        return (int)5L;
    }
    public static int G_IO_CHANNEL_ERROR_OVERFLOW() {
        return (int)6L;
    }
    public static int G_IO_CHANNEL_ERROR_PIPE() {
        return (int)7L;
    }
    public static int G_IO_CHANNEL_ERROR_FAILED() {
        return (int)8L;
    }
    public static int G_IO_STATUS_ERROR() {
        return (int)0L;
    }
    public static int G_IO_STATUS_NORMAL() {
        return (int)1L;
    }
    public static int G_IO_STATUS_EOF() {
        return (int)2L;
    }
    public static int G_IO_STATUS_AGAIN() {
        return (int)3L;
    }
    public static int G_SEEK_CUR() {
        return (int)0L;
    }
    public static int G_SEEK_SET() {
        return (int)1L;
    }
    public static int G_SEEK_END() {
        return (int)2L;
    }
    public static int G_IO_FLAG_APPEND() {
        return (int)1L;
    }
    public static int G_IO_FLAG_NONBLOCK() {
        return (int)2L;
    }
    public static int G_IO_FLAG_IS_READABLE() {
        return (int)4L;
    }
    public static int G_IO_FLAG_IS_WRITABLE() {
        return (int)8L;
    }
    public static int G_IO_FLAG_IS_WRITEABLE() {
        return (int)8L;
    }
    public static int G_IO_FLAG_IS_SEEKABLE() {
        return (int)16L;
    }
    public static int G_IO_FLAG_MASK() {
        return (int)31L;
    }
    public static int G_IO_FLAG_GET_MASK() {
        return (int)31L;
    }
    public static int G_IO_FLAG_SET_MASK() {
        return (int)3L;
    }
    public static MethodHandle g_io_channel_init$MH() {
        return RuntimeHelper.requireNonNull(constants$191.g_io_channel_init$MH,"g_io_channel_init");
    }
    public static void g_io_channel_init ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.g_io_channel_init$MH, "g_io_channel_init");
        try {
            mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$191.g_io_channel_ref$MH,"g_io_channel_ref");
    }
    public static MemoryAddress g_io_channel_ref ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$191.g_io_channel_ref$MH, "g_io_channel_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$192.g_io_channel_unref$MH,"g_io_channel_unref");
    }
    public static void g_io_channel_unref ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.g_io_channel_unref$MH, "g_io_channel_unref");
        try {
            mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_read$MH() {
        return RuntimeHelper.requireNonNull(constants$192.g_io_channel_read$MH,"g_io_channel_read");
    }
    public static int g_io_channel_read ( Addressable channel,  Addressable buf,  long count,  Addressable bytes_read) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.g_io_channel_read$MH, "g_io_channel_read");
        try {
            return (int)mh$.invokeExact(channel, buf, count, bytes_read);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_write$MH() {
        return RuntimeHelper.requireNonNull(constants$192.g_io_channel_write$MH,"g_io_channel_write");
    }
    public static int g_io_channel_write ( Addressable channel,  Addressable buf,  long count,  Addressable bytes_written) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.g_io_channel_write$MH, "g_io_channel_write");
        try {
            return (int)mh$.invokeExact(channel, buf, count, bytes_written);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_seek$MH() {
        return RuntimeHelper.requireNonNull(constants$192.g_io_channel_seek$MH,"g_io_channel_seek");
    }
    public static int g_io_channel_seek ( Addressable channel,  long offset,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.g_io_channel_seek$MH, "g_io_channel_seek");
        try {
            return (int)mh$.invokeExact(channel, offset, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_close$MH() {
        return RuntimeHelper.requireNonNull(constants$192.g_io_channel_close$MH,"g_io_channel_close");
    }
    public static void g_io_channel_close ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.g_io_channel_close$MH, "g_io_channel_close");
        try {
            mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$192.g_io_channel_shutdown$MH,"g_io_channel_shutdown");
    }
    public static int g_io_channel_shutdown ( Addressable channel,  int flush,  Addressable err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$192.g_io_channel_shutdown$MH, "g_io_channel_shutdown");
        try {
            return (int)mh$.invokeExact(channel, flush, err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_add_watch_full$MH() {
        return RuntimeHelper.requireNonNull(constants$193.g_io_add_watch_full$MH,"g_io_add_watch_full");
    }
    public static int g_io_add_watch_full ( Addressable channel,  int priority,  int condition,  Addressable func,  Addressable user_data,  Addressable notify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.g_io_add_watch_full$MH, "g_io_add_watch_full");
        try {
            return (int)mh$.invokeExact(channel, priority, condition, func, user_data, notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_create_watch$MH() {
        return RuntimeHelper.requireNonNull(constants$193.g_io_create_watch$MH,"g_io_create_watch");
    }
    public static MemoryAddress g_io_create_watch ( Addressable channel,  int condition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.g_io_create_watch$MH, "g_io_create_watch");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(channel, condition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_add_watch$MH() {
        return RuntimeHelper.requireNonNull(constants$193.g_io_add_watch$MH,"g_io_add_watch");
    }
    public static int g_io_add_watch ( Addressable channel,  int condition,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.g_io_add_watch$MH, "g_io_add_watch");
        try {
            return (int)mh$.invokeExact(channel, condition, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_set_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$193.g_io_channel_set_buffer_size$MH,"g_io_channel_set_buffer_size");
    }
    public static void g_io_channel_set_buffer_size ( Addressable channel,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.g_io_channel_set_buffer_size$MH, "g_io_channel_set_buffer_size");
        try {
            mh$.invokeExact(channel, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_get_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$193.g_io_channel_get_buffer_size$MH,"g_io_channel_get_buffer_size");
    }
    public static long g_io_channel_get_buffer_size ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.g_io_channel_get_buffer_size$MH, "g_io_channel_get_buffer_size");
        try {
            return (long)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_get_buffer_condition$MH() {
        return RuntimeHelper.requireNonNull(constants$193.g_io_channel_get_buffer_condition$MH,"g_io_channel_get_buffer_condition");
    }
    public static int g_io_channel_get_buffer_condition ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$193.g_io_channel_get_buffer_condition$MH, "g_io_channel_get_buffer_condition");
        try {
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$194.g_io_channel_set_flags$MH,"g_io_channel_set_flags");
    }
    public static int g_io_channel_set_flags ( Addressable channel,  int flags,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.g_io_channel_set_flags$MH, "g_io_channel_set_flags");
        try {
            return (int)mh$.invokeExact(channel, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$194.g_io_channel_get_flags$MH,"g_io_channel_get_flags");
    }
    public static int g_io_channel_get_flags ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.g_io_channel_get_flags$MH, "g_io_channel_get_flags");
        try {
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_set_line_term$MH() {
        return RuntimeHelper.requireNonNull(constants$194.g_io_channel_set_line_term$MH,"g_io_channel_set_line_term");
    }
    public static void g_io_channel_set_line_term ( Addressable channel,  Addressable line_term,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.g_io_channel_set_line_term$MH, "g_io_channel_set_line_term");
        try {
            mh$.invokeExact(channel, line_term, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_get_line_term$MH() {
        return RuntimeHelper.requireNonNull(constants$194.g_io_channel_get_line_term$MH,"g_io_channel_get_line_term");
    }
    public static MemoryAddress g_io_channel_get_line_term ( Addressable channel,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.g_io_channel_get_line_term$MH, "g_io_channel_get_line_term");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(channel, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_set_buffered$MH() {
        return RuntimeHelper.requireNonNull(constants$194.g_io_channel_set_buffered$MH,"g_io_channel_set_buffered");
    }
    public static void g_io_channel_set_buffered ( Addressable channel,  int buffered) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.g_io_channel_set_buffered$MH, "g_io_channel_set_buffered");
        try {
            mh$.invokeExact(channel, buffered);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_get_buffered$MH() {
        return RuntimeHelper.requireNonNull(constants$194.g_io_channel_get_buffered$MH,"g_io_channel_get_buffered");
    }
    public static int g_io_channel_get_buffered ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$194.g_io_channel_get_buffered$MH, "g_io_channel_get_buffered");
        try {
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_set_encoding$MH() {
        return RuntimeHelper.requireNonNull(constants$195.g_io_channel_set_encoding$MH,"g_io_channel_set_encoding");
    }
    public static int g_io_channel_set_encoding ( Addressable channel,  Addressable encoding,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$195.g_io_channel_set_encoding$MH, "g_io_channel_set_encoding");
        try {
            return (int)mh$.invokeExact(channel, encoding, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_get_encoding$MH() {
        return RuntimeHelper.requireNonNull(constants$195.g_io_channel_get_encoding$MH,"g_io_channel_get_encoding");
    }
    public static MemoryAddress g_io_channel_get_encoding ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$195.g_io_channel_get_encoding$MH, "g_io_channel_get_encoding");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_set_close_on_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$195.g_io_channel_set_close_on_unref$MH,"g_io_channel_set_close_on_unref");
    }
    public static void g_io_channel_set_close_on_unref ( Addressable channel,  int do_close) {
        var mh$ = RuntimeHelper.requireNonNull(constants$195.g_io_channel_set_close_on_unref$MH, "g_io_channel_set_close_on_unref");
        try {
            mh$.invokeExact(channel, do_close);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_get_close_on_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$195.g_io_channel_get_close_on_unref$MH,"g_io_channel_get_close_on_unref");
    }
    public static int g_io_channel_get_close_on_unref ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$195.g_io_channel_get_close_on_unref$MH, "g_io_channel_get_close_on_unref");
        try {
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$195.g_io_channel_flush$MH,"g_io_channel_flush");
    }
    public static int g_io_channel_flush ( Addressable channel,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$195.g_io_channel_flush$MH, "g_io_channel_flush");
        try {
            return (int)mh$.invokeExact(channel, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_read_line$MH() {
        return RuntimeHelper.requireNonNull(constants$195.g_io_channel_read_line$MH,"g_io_channel_read_line");
    }
    public static int g_io_channel_read_line ( Addressable channel,  Addressable str_return,  Addressable length,  Addressable terminator_pos,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$195.g_io_channel_read_line$MH, "g_io_channel_read_line");
        try {
            return (int)mh$.invokeExact(channel, str_return, length, terminator_pos, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_read_line_string$MH() {
        return RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_line_string$MH,"g_io_channel_read_line_string");
    }
    public static int g_io_channel_read_line_string ( Addressable channel,  Addressable buffer,  Addressable terminator_pos,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_line_string$MH, "g_io_channel_read_line_string");
        try {
            return (int)mh$.invokeExact(channel, buffer, terminator_pos, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_read_to_end$MH() {
        return RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_to_end$MH,"g_io_channel_read_to_end");
    }
    public static int g_io_channel_read_to_end ( Addressable channel,  Addressable str_return,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_to_end$MH, "g_io_channel_read_to_end");
        try {
            return (int)mh$.invokeExact(channel, str_return, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_read_chars$MH() {
        return RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_chars$MH,"g_io_channel_read_chars");
    }
    public static int g_io_channel_read_chars ( Addressable channel,  Addressable buf,  long count,  Addressable bytes_read,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_chars$MH, "g_io_channel_read_chars");
        try {
            return (int)mh$.invokeExact(channel, buf, count, bytes_read, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_read_unichar$MH() {
        return RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_unichar$MH,"g_io_channel_read_unichar");
    }
    public static int g_io_channel_read_unichar ( Addressable channel,  Addressable thechar,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.g_io_channel_read_unichar$MH, "g_io_channel_read_unichar");
        try {
            return (int)mh$.invokeExact(channel, thechar, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_write_chars$MH() {
        return RuntimeHelper.requireNonNull(constants$196.g_io_channel_write_chars$MH,"g_io_channel_write_chars");
    }
    public static int g_io_channel_write_chars ( Addressable channel,  Addressable buf,  long count,  Addressable bytes_written,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.g_io_channel_write_chars$MH, "g_io_channel_write_chars");
        try {
            return (int)mh$.invokeExact(channel, buf, count, bytes_written, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_write_unichar$MH() {
        return RuntimeHelper.requireNonNull(constants$196.g_io_channel_write_unichar$MH,"g_io_channel_write_unichar");
    }
    public static int g_io_channel_write_unichar ( Addressable channel,  int thechar,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$196.g_io_channel_write_unichar$MH, "g_io_channel_write_unichar");
        try {
            return (int)mh$.invokeExact(channel, thechar, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_seek_position$MH() {
        return RuntimeHelper.requireNonNull(constants$197.g_io_channel_seek_position$MH,"g_io_channel_seek_position");
    }
    public static int g_io_channel_seek_position ( Addressable channel,  long offset,  int type,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.g_io_channel_seek_position$MH, "g_io_channel_seek_position");
        try {
            return (int)mh$.invokeExact(channel, offset, type, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_new_file$MH() {
        return RuntimeHelper.requireNonNull(constants$197.g_io_channel_new_file$MH,"g_io_channel_new_file");
    }
    public static MemoryAddress g_io_channel_new_file ( Addressable filename,  Addressable mode,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.g_io_channel_new_file$MH, "g_io_channel_new_file");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename, mode, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$197.g_io_channel_error_quark$MH,"g_io_channel_error_quark");
    }
    public static int g_io_channel_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.g_io_channel_error_quark$MH, "g_io_channel_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_error_from_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$197.g_io_channel_error_from_errno$MH,"g_io_channel_error_from_errno");
    }
    public static int g_io_channel_error_from_errno ( int en) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.g_io_channel_error_from_errno$MH, "g_io_channel_error_from_errno");
        try {
            return (int)mh$.invokeExact(en);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_unix_new$MH() {
        return RuntimeHelper.requireNonNull(constants$197.g_io_channel_unix_new$MH,"g_io_channel_unix_new");
    }
    public static MemoryAddress g_io_channel_unix_new ( int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.g_io_channel_unix_new$MH, "g_io_channel_unix_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_io_channel_unix_get_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$197.g_io_channel_unix_get_fd$MH,"g_io_channel_unix_get_fd");
    }
    public static int g_io_channel_unix_get_fd ( Addressable channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$197.g_io_channel_unix_get_fd$MH, "g_io_channel_unix_get_fd");
        try {
            return (int)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment g_io_watch_funcs$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$198.g_io_watch_funcs$SEGMENT,"g_io_watch_funcs");
    }
    public static int G_KEY_FILE_ERROR_UNKNOWN_ENCODING() {
        return (int)0L;
    }
    public static int G_KEY_FILE_ERROR_PARSE() {
        return (int)1L;
    }
    public static int G_KEY_FILE_ERROR_NOT_FOUND() {
        return (int)2L;
    }
    public static int G_KEY_FILE_ERROR_KEY_NOT_FOUND() {
        return (int)3L;
    }
    public static int G_KEY_FILE_ERROR_GROUP_NOT_FOUND() {
        return (int)4L;
    }
    public static int G_KEY_FILE_ERROR_INVALID_VALUE() {
        return (int)5L;
    }
    public static MethodHandle g_key_file_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$198.g_key_file_error_quark$MH,"g_key_file_error_quark");
    }
    public static int g_key_file_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.g_key_file_error_quark$MH, "g_key_file_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_KEY_FILE_NONE() {
        return (int)0L;
    }
    public static int G_KEY_FILE_KEEP_COMMENTS() {
        return (int)1L;
    }
    public static int G_KEY_FILE_KEEP_TRANSLATIONS() {
        return (int)2L;
    }
    public static MethodHandle g_key_file_new$MH() {
        return RuntimeHelper.requireNonNull(constants$198.g_key_file_new$MH,"g_key_file_new");
    }
    public static MemoryAddress g_key_file_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.g_key_file_new$MH, "g_key_file_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$198.g_key_file_ref$MH,"g_key_file_ref");
    }
    public static MemoryAddress g_key_file_ref ( Addressable key_file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.g_key_file_ref$MH, "g_key_file_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$198.g_key_file_unref$MH,"g_key_file_unref");
    }
    public static void g_key_file_unref ( Addressable key_file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.g_key_file_unref$MH, "g_key_file_unref");
        try {
            mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_free$MH() {
        return RuntimeHelper.requireNonNull(constants$198.g_key_file_free$MH,"g_key_file_free");
    }
    public static void g_key_file_free ( Addressable key_file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$198.g_key_file_free$MH, "g_key_file_free");
        try {
            mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_list_separator$MH() {
        return RuntimeHelper.requireNonNull(constants$199.g_key_file_set_list_separator$MH,"g_key_file_set_list_separator");
    }
    public static void g_key_file_set_list_separator ( Addressable key_file,  byte separator) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.g_key_file_set_list_separator$MH, "g_key_file_set_list_separator");
        try {
            mh$.invokeExact(key_file, separator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_load_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_file$MH,"g_key_file_load_from_file");
    }
    public static int g_key_file_load_from_file ( Addressable key_file,  Addressable file,  int flags,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_file$MH, "g_key_file_load_from_file");
        try {
            return (int)mh$.invokeExact(key_file, file, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_load_from_data$MH() {
        return RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_data$MH,"g_key_file_load_from_data");
    }
    public static int g_key_file_load_from_data ( Addressable key_file,  Addressable data,  long length,  int flags,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_data$MH, "g_key_file_load_from_data");
        try {
            return (int)mh$.invokeExact(key_file, data, length, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_load_from_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_bytes$MH,"g_key_file_load_from_bytes");
    }
    public static int g_key_file_load_from_bytes ( Addressable key_file,  Addressable bytes,  int flags,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_bytes$MH, "g_key_file_load_from_bytes");
        try {
            return (int)mh$.invokeExact(key_file, bytes, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_load_from_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_dirs$MH,"g_key_file_load_from_dirs");
    }
    public static int g_key_file_load_from_dirs ( Addressable key_file,  Addressable file,  Addressable search_dirs,  Addressable full_path,  int flags,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_dirs$MH, "g_key_file_load_from_dirs");
        try {
            return (int)mh$.invokeExact(key_file, file, search_dirs, full_path, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_load_from_data_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_data_dirs$MH,"g_key_file_load_from_data_dirs");
    }
    public static int g_key_file_load_from_data_dirs ( Addressable key_file,  Addressable file,  Addressable full_path,  int flags,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$199.g_key_file_load_from_data_dirs$MH, "g_key_file_load_from_data_dirs");
        try {
            return (int)mh$.invokeExact(key_file, file, full_path, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_to_data$MH() {
        return RuntimeHelper.requireNonNull(constants$200.g_key_file_to_data$MH,"g_key_file_to_data");
    }
    public static MemoryAddress g_key_file_to_data ( Addressable key_file,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$200.g_key_file_to_data$MH, "g_key_file_to_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_save_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$200.g_key_file_save_to_file$MH,"g_key_file_save_to_file");
    }
    public static int g_key_file_save_to_file ( Addressable key_file,  Addressable filename,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$200.g_key_file_save_to_file$MH, "g_key_file_save_to_file");
        try {
            return (int)mh$.invokeExact(key_file, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_start_group$MH() {
        return RuntimeHelper.requireNonNull(constants$200.g_key_file_get_start_group$MH,"g_key_file_get_start_group");
    }
    public static MemoryAddress g_key_file_get_start_group ( Addressable key_file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$200.g_key_file_get_start_group$MH, "g_key_file_get_start_group");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$200.g_key_file_get_groups$MH,"g_key_file_get_groups");
    }
    public static MemoryAddress g_key_file_get_groups ( Addressable key_file,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$200.g_key_file_get_groups$MH, "g_key_file_get_groups");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_keys$MH() {
        return RuntimeHelper.requireNonNull(constants$200.g_key_file_get_keys$MH,"g_key_file_get_keys");
    }
    public static MemoryAddress g_key_file_get_keys ( Addressable key_file,  Addressable group_name,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$200.g_key_file_get_keys$MH, "g_key_file_get_keys");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_has_group$MH() {
        return RuntimeHelper.requireNonNull(constants$200.g_key_file_has_group$MH,"g_key_file_has_group");
    }
    public static int g_key_file_has_group ( Addressable key_file,  Addressable group_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$200.g_key_file_has_group$MH, "g_key_file_has_group");
        try {
            return (int)mh$.invokeExact(key_file, group_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_has_key$MH() {
        return RuntimeHelper.requireNonNull(constants$201.g_key_file_has_key$MH,"g_key_file_has_key");
    }
    public static int g_key_file_has_key ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.g_key_file_has_key$MH, "g_key_file_has_key");
        try {
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_value$MH() {
        return RuntimeHelper.requireNonNull(constants$201.g_key_file_get_value$MH,"g_key_file_get_value");
    }
    public static MemoryAddress g_key_file_get_value ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.g_key_file_get_value$MH, "g_key_file_get_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_value$MH() {
        return RuntimeHelper.requireNonNull(constants$201.g_key_file_set_value$MH,"g_key_file_set_value");
    }
    public static void g_key_file_set_value ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.g_key_file_set_value$MH, "g_key_file_set_value");
        try {
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$201.g_key_file_get_string$MH,"g_key_file_get_string");
    }
    public static MemoryAddress g_key_file_get_string ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.g_key_file_get_string$MH, "g_key_file_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_string$MH() {
        return RuntimeHelper.requireNonNull(constants$201.g_key_file_set_string$MH,"g_key_file_set_string");
    }
    public static void g_key_file_set_string ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.g_key_file_set_string$MH, "g_key_file_set_string");
        try {
            mh$.invokeExact(key_file, group_name, key, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_locale_string$MH() {
        return RuntimeHelper.requireNonNull(constants$201.g_key_file_get_locale_string$MH,"g_key_file_get_locale_string");
    }
    public static MemoryAddress g_key_file_get_locale_string ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable locale,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$201.g_key_file_get_locale_string$MH, "g_key_file_get_locale_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, locale, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_locale_for_key$MH() {
        return RuntimeHelper.requireNonNull(constants$202.g_key_file_get_locale_for_key$MH,"g_key_file_get_locale_for_key");
    }
    public static MemoryAddress g_key_file_get_locale_for_key ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.g_key_file_get_locale_for_key$MH, "g_key_file_get_locale_for_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_locale_string$MH() {
        return RuntimeHelper.requireNonNull(constants$202.g_key_file_set_locale_string$MH,"g_key_file_set_locale_string");
    }
    public static void g_key_file_set_locale_string ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable locale,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.g_key_file_set_locale_string$MH, "g_key_file_set_locale_string");
        try {
            mh$.invokeExact(key_file, group_name, key, locale, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$202.g_key_file_get_boolean$MH,"g_key_file_get_boolean");
    }
    public static int g_key_file_get_boolean ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.g_key_file_get_boolean$MH, "g_key_file_get_boolean");
        try {
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$202.g_key_file_set_boolean$MH,"g_key_file_set_boolean");
    }
    public static void g_key_file_set_boolean ( Addressable key_file,  Addressable group_name,  Addressable key,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.g_key_file_set_boolean$MH, "g_key_file_set_boolean");
        try {
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$202.g_key_file_get_integer$MH,"g_key_file_get_integer");
    }
    public static int g_key_file_get_integer ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.g_key_file_get_integer$MH, "g_key_file_get_integer");
        try {
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$202.g_key_file_set_integer$MH,"g_key_file_set_integer");
    }
    public static void g_key_file_set_integer ( Addressable key_file,  Addressable group_name,  Addressable key,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$202.g_key_file_set_integer$MH, "g_key_file_set_integer");
        try {
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$203.g_key_file_get_int64$MH,"g_key_file_get_int64");
    }
    public static long g_key_file_get_int64 ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.g_key_file_get_int64$MH, "g_key_file_get_int64");
        try {
            return (long)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$203.g_key_file_set_int64$MH,"g_key_file_set_int64");
    }
    public static void g_key_file_set_int64 ( Addressable key_file,  Addressable group_name,  Addressable key,  long value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.g_key_file_set_int64$MH, "g_key_file_set_int64");
        try {
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$203.g_key_file_get_uint64$MH,"g_key_file_get_uint64");
    }
    public static long g_key_file_get_uint64 ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.g_key_file_get_uint64$MH, "g_key_file_get_uint64");
        try {
            return (long)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$203.g_key_file_set_uint64$MH,"g_key_file_set_uint64");
    }
    public static void g_key_file_set_uint64 ( Addressable key_file,  Addressable group_name,  Addressable key,  long value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.g_key_file_set_uint64$MH, "g_key_file_set_uint64");
        try {
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_double$MH() {
        return RuntimeHelper.requireNonNull(constants$203.g_key_file_get_double$MH,"g_key_file_get_double");
    }
    public static double g_key_file_get_double ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.g_key_file_get_double$MH, "g_key_file_get_double");
        try {
            return (double)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_double$MH() {
        return RuntimeHelper.requireNonNull(constants$203.g_key_file_set_double$MH,"g_key_file_set_double");
    }
    public static void g_key_file_set_double ( Addressable key_file,  Addressable group_name,  Addressable key,  double value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$203.g_key_file_set_double$MH, "g_key_file_set_double");
        try {
            mh$.invokeExact(key_file, group_name, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_string_list$MH() {
        return RuntimeHelper.requireNonNull(constants$204.g_key_file_get_string_list$MH,"g_key_file_get_string_list");
    }
    public static MemoryAddress g_key_file_get_string_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.g_key_file_get_string_list$MH, "g_key_file_get_string_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_string_list$MH() {
        return RuntimeHelper.requireNonNull(constants$204.g_key_file_set_string_list$MH,"g_key_file_set_string_list");
    }
    public static void g_key_file_set_string_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable list,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.g_key_file_set_string_list$MH, "g_key_file_set_string_list");
        try {
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_locale_string_list$MH() {
        return RuntimeHelper.requireNonNull(constants$204.g_key_file_get_locale_string_list$MH,"g_key_file_get_locale_string_list");
    }
    public static MemoryAddress g_key_file_get_locale_string_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable locale,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.g_key_file_get_locale_string_list$MH, "g_key_file_get_locale_string_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, locale, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_locale_string_list$MH() {
        return RuntimeHelper.requireNonNull(constants$204.g_key_file_set_locale_string_list$MH,"g_key_file_set_locale_string_list");
    }
    public static void g_key_file_set_locale_string_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable locale,  Addressable list,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.g_key_file_set_locale_string_list$MH, "g_key_file_set_locale_string_list");
        try {
            mh$.invokeExact(key_file, group_name, key, locale, list, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_boolean_list$MH() {
        return RuntimeHelper.requireNonNull(constants$204.g_key_file_get_boolean_list$MH,"g_key_file_get_boolean_list");
    }
    public static MemoryAddress g_key_file_get_boolean_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.g_key_file_get_boolean_list$MH, "g_key_file_get_boolean_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_boolean_list$MH() {
        return RuntimeHelper.requireNonNull(constants$204.g_key_file_set_boolean_list$MH,"g_key_file_set_boolean_list");
    }
    public static void g_key_file_set_boolean_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable list,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$204.g_key_file_set_boolean_list$MH, "g_key_file_set_boolean_list");
        try {
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_integer_list$MH() {
        return RuntimeHelper.requireNonNull(constants$205.g_key_file_get_integer_list$MH,"g_key_file_get_integer_list");
    }
    public static MemoryAddress g_key_file_get_integer_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.g_key_file_get_integer_list$MH, "g_key_file_get_integer_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_double_list$MH() {
        return RuntimeHelper.requireNonNull(constants$205.g_key_file_set_double_list$MH,"g_key_file_set_double_list");
    }
    public static void g_key_file_set_double_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable list,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.g_key_file_set_double_list$MH, "g_key_file_set_double_list");
        try {
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_double_list$MH() {
        return RuntimeHelper.requireNonNull(constants$205.g_key_file_get_double_list$MH,"g_key_file_get_double_list");
    }
    public static MemoryAddress g_key_file_get_double_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable length,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.g_key_file_get_double_list$MH, "g_key_file_get_double_list");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_integer_list$MH() {
        return RuntimeHelper.requireNonNull(constants$205.g_key_file_set_integer_list$MH,"g_key_file_set_integer_list");
    }
    public static void g_key_file_set_integer_list ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable list,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.g_key_file_set_integer_list$MH, "g_key_file_set_integer_list");
        try {
            mh$.invokeExact(key_file, group_name, key, list, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_set_comment$MH() {
        return RuntimeHelper.requireNonNull(constants$205.g_key_file_set_comment$MH,"g_key_file_set_comment");
    }
    public static int g_key_file_set_comment ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable comment,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.g_key_file_set_comment$MH, "g_key_file_set_comment");
        try {
            return (int)mh$.invokeExact(key_file, group_name, key, comment, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_get_comment$MH() {
        return RuntimeHelper.requireNonNull(constants$205.g_key_file_get_comment$MH,"g_key_file_get_comment");
    }
    public static MemoryAddress g_key_file_get_comment ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$205.g_key_file_get_comment$MH, "g_key_file_get_comment");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_remove_comment$MH() {
        return RuntimeHelper.requireNonNull(constants$206.g_key_file_remove_comment$MH,"g_key_file_remove_comment");
    }
    public static int g_key_file_remove_comment ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.g_key_file_remove_comment$MH, "g_key_file_remove_comment");
        try {
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_remove_key$MH() {
        return RuntimeHelper.requireNonNull(constants$206.g_key_file_remove_key$MH,"g_key_file_remove_key");
    }
    public static int g_key_file_remove_key ( Addressable key_file,  Addressable group_name,  Addressable key,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.g_key_file_remove_key$MH, "g_key_file_remove_key");
        try {
            return (int)mh$.invokeExact(key_file, group_name, key, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_key_file_remove_group$MH() {
        return RuntimeHelper.requireNonNull(constants$206.g_key_file_remove_group$MH,"g_key_file_remove_group");
    }
    public static int g_key_file_remove_group ( Addressable key_file,  Addressable group_name,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.g_key_file_remove_group$MH, "g_key_file_remove_group");
        try {
            return (int)mh$.invokeExact(key_file, group_name, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_new$MH() {
        return RuntimeHelper.requireNonNull(constants$206.g_mapped_file_new$MH,"g_mapped_file_new");
    }
    public static MemoryAddress g_mapped_file_new ( Addressable filename,  int writable,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.g_mapped_file_new$MH, "g_mapped_file_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(filename, writable, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_new_from_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$206.g_mapped_file_new_from_fd$MH,"g_mapped_file_new_from_fd");
    }
    public static MemoryAddress g_mapped_file_new_from_fd ( int fd,  int writable,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.g_mapped_file_new_from_fd$MH, "g_mapped_file_new_from_fd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fd, writable, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$206.g_mapped_file_get_length$MH,"g_mapped_file_get_length");
    }
    public static long g_mapped_file_get_length ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$206.g_mapped_file_get_length$MH, "g_mapped_file_get_length");
        try {
            return (long)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_get_contents$MH() {
        return RuntimeHelper.requireNonNull(constants$207.g_mapped_file_get_contents$MH,"g_mapped_file_get_contents");
    }
    public static MemoryAddress g_mapped_file_get_contents ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.g_mapped_file_get_contents$MH, "g_mapped_file_get_contents");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_get_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$207.g_mapped_file_get_bytes$MH,"g_mapped_file_get_bytes");
    }
    public static MemoryAddress g_mapped_file_get_bytes ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.g_mapped_file_get_bytes$MH, "g_mapped_file_get_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$207.g_mapped_file_ref$MH,"g_mapped_file_ref");
    }
    public static MemoryAddress g_mapped_file_ref ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.g_mapped_file_ref$MH, "g_mapped_file_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$207.g_mapped_file_unref$MH,"g_mapped_file_unref");
    }
    public static void g_mapped_file_unref ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.g_mapped_file_unref$MH, "g_mapped_file_unref");
        try {
            mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mapped_file_free$MH() {
        return RuntimeHelper.requireNonNull(constants$207.g_mapped_file_free$MH,"g_mapped_file_free");
    }
    public static void g_mapped_file_free ( Addressable file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.g_mapped_file_free$MH, "g_mapped_file_free");
        try {
            mh$.invokeExact(file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_MARKUP_ERROR_BAD_UTF8() {
        return (int)0L;
    }
    public static int G_MARKUP_ERROR_EMPTY() {
        return (int)1L;
    }
    public static int G_MARKUP_ERROR_PARSE() {
        return (int)2L;
    }
    public static int G_MARKUP_ERROR_UNKNOWN_ELEMENT() {
        return (int)3L;
    }
    public static int G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE() {
        return (int)4L;
    }
    public static int G_MARKUP_ERROR_INVALID_CONTENT() {
        return (int)5L;
    }
    public static int G_MARKUP_ERROR_MISSING_ATTRIBUTE() {
        return (int)6L;
    }
    public static MethodHandle g_markup_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$207.g_markup_error_quark$MH,"g_markup_error_quark");
    }
    public static int g_markup_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$207.g_markup_error_quark$MH, "g_markup_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG() {
        return (int)1L;
    }
    public static int G_MARKUP_TREAT_CDATA_AS_TEXT() {
        return (int)2L;
    }
    public static int G_MARKUP_PREFIX_ERROR_POSITION() {
        return (int)4L;
    }
    public static int G_MARKUP_IGNORE_QUALIFIED() {
        return (int)8L;
    }
    public static MethodHandle g_markup_parse_context_new$MH() {
        return RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_new$MH,"g_markup_parse_context_new");
    }
    public static MemoryAddress g_markup_parse_context_new ( Addressable parser,  int flags,  Addressable user_data,  Addressable user_data_dnotify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_new$MH, "g_markup_parse_context_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(parser, flags, user_data, user_data_dnotify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_ref$MH,"g_markup_parse_context_ref");
    }
    public static MemoryAddress g_markup_parse_context_ref ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_ref$MH, "g_markup_parse_context_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_unref$MH,"g_markup_parse_context_unref");
    }
    public static void g_markup_parse_context_unref ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_unref$MH, "g_markup_parse_context_unref");
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_free$MH() {
        return RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_free$MH,"g_markup_parse_context_free");
    }
    public static void g_markup_parse_context_free ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_free$MH, "g_markup_parse_context_free");
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_parse$MH,"g_markup_parse_context_parse");
    }
    public static int g_markup_parse_context_parse ( Addressable context,  Addressable text,  long text_len,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_parse$MH, "g_markup_parse_context_parse");
        try {
            return (int)mh$.invokeExact(context, text, text_len, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_push$MH() {
        return RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_push$MH,"g_markup_parse_context_push");
    }
    public static void g_markup_parse_context_push ( Addressable context,  Addressable parser,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$208.g_markup_parse_context_push$MH, "g_markup_parse_context_push");
        try {
            mh$.invokeExact(context, parser, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_pop$MH,"g_markup_parse_context_pop");
    }
    public static MemoryAddress g_markup_parse_context_pop ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_pop$MH, "g_markup_parse_context_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_end_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_end_parse$MH,"g_markup_parse_context_end_parse");
    }
    public static int g_markup_parse_context_end_parse ( Addressable context,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_end_parse$MH, "g_markup_parse_context_end_parse");
        try {
            return (int)mh$.invokeExact(context, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_get_element$MH() {
        return RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_element$MH,"g_markup_parse_context_get_element");
    }
    public static MemoryAddress g_markup_parse_context_get_element ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_element$MH, "g_markup_parse_context_get_element");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_get_element_stack$MH() {
        return RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_element_stack$MH,"g_markup_parse_context_get_element_stack");
    }
    public static MemoryAddress g_markup_parse_context_get_element_stack ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_element_stack$MH, "g_markup_parse_context_get_element_stack");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_get_position$MH() {
        return RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_position$MH,"g_markup_parse_context_get_position");
    }
    public static void g_markup_parse_context_get_position ( Addressable context,  Addressable line_number,  Addressable char_number) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_position$MH, "g_markup_parse_context_get_position");
        try {
            mh$.invokeExact(context, line_number, char_number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_parse_context_get_user_data$MH() {
        return RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_user_data$MH,"g_markup_parse_context_get_user_data");
    }
    public static MemoryAddress g_markup_parse_context_get_user_data ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$209.g_markup_parse_context_get_user_data$MH, "g_markup_parse_context_get_user_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_escape_text$MH() {
        return RuntimeHelper.requireNonNull(constants$210.g_markup_escape_text$MH,"g_markup_escape_text");
    }
    public static MemoryAddress g_markup_escape_text ( Addressable text,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.g_markup_escape_text$MH, "g_markup_escape_text");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(text, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_printf_escaped$MH() {
        return RuntimeHelper.requireNonNull(constants$210.g_markup_printf_escaped$MH,"g_markup_printf_escaped");
    }
    public static MemoryAddress g_markup_printf_escaped ( Addressable format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.g_markup_printf_escaped$MH, "g_markup_printf_escaped");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_markup_vprintf_escaped$MH() {
        return RuntimeHelper.requireNonNull(constants$210.g_markup_vprintf_escaped$MH,"g_markup_vprintf_escaped");
    }
    public static MemoryAddress g_markup_vprintf_escaped ( Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.g_markup_vprintf_escaped$MH, "g_markup_vprintf_escaped");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_MARKUP_COLLECT_INVALID() {
        return (int)0L;
    }
    public static int G_MARKUP_COLLECT_STRING() {
        return (int)1L;
    }
    public static int G_MARKUP_COLLECT_STRDUP() {
        return (int)2L;
    }
    public static int G_MARKUP_COLLECT_BOOLEAN() {
        return (int)3L;
    }
    public static int G_MARKUP_COLLECT_TRISTATE() {
        return (int)4L;
    }
    public static int G_MARKUP_COLLECT_OPTIONAL() {
        return (int)65536L;
    }
    public static MethodHandle g_markup_collect_attributes$MH() {
        return RuntimeHelper.requireNonNull(constants$210.g_markup_collect_attributes$MH,"g_markup_collect_attributes");
    }
    public static int g_markup_collect_attributes ( Addressable element_name,  Addressable attribute_names,  Addressable attribute_values,  Addressable error,  int first_type,  Addressable first_attr, Object... x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.g_markup_collect_attributes$MH, "g_markup_collect_attributes");
        try {
            return (int)mh$.invokeExact(element_name, attribute_names, attribute_values, error, first_type, first_attr, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_string_is_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$210.g_variant_type_string_is_valid$MH,"g_variant_type_string_is_valid");
    }
    public static int g_variant_type_string_is_valid ( Addressable type_string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.g_variant_type_string_is_valid$MH, "g_variant_type_string_is_valid");
        try {
            return (int)mh$.invokeExact(type_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_string_scan$MH() {
        return RuntimeHelper.requireNonNull(constants$210.g_variant_type_string_scan$MH,"g_variant_type_string_scan");
    }
    public static int g_variant_type_string_scan ( Addressable string,  Addressable limit,  Addressable endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$210.g_variant_type_string_scan$MH, "g_variant_type_string_scan");
        try {
            return (int)mh$.invokeExact(string, limit, endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_free$MH() {
        return RuntimeHelper.requireNonNull(constants$211.g_variant_type_free$MH,"g_variant_type_free");
    }
    public static void g_variant_type_free ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.g_variant_type_free$MH, "g_variant_type_free");
        try {
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$211.g_variant_type_copy$MH,"g_variant_type_copy");
    }
    public static MemoryAddress g_variant_type_copy ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.g_variant_type_copy$MH, "g_variant_type_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_new$MH() {
        return RuntimeHelper.requireNonNull(constants$211.g_variant_type_new$MH,"g_variant_type_new");
    }
    public static MemoryAddress g_variant_type_new ( Addressable type_string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.g_variant_type_new$MH, "g_variant_type_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_get_string_length$MH() {
        return RuntimeHelper.requireNonNull(constants$211.g_variant_type_get_string_length$MH,"g_variant_type_get_string_length");
    }
    public static long g_variant_type_get_string_length ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.g_variant_type_get_string_length$MH, "g_variant_type_get_string_length");
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_peek_string$MH() {
        return RuntimeHelper.requireNonNull(constants$211.g_variant_type_peek_string$MH,"g_variant_type_peek_string");
    }
    public static MemoryAddress g_variant_type_peek_string ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.g_variant_type_peek_string$MH, "g_variant_type_peek_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_dup_string$MH() {
        return RuntimeHelper.requireNonNull(constants$211.g_variant_type_dup_string$MH,"g_variant_type_dup_string");
    }
    public static MemoryAddress g_variant_type_dup_string ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$211.g_variant_type_dup_string$MH, "g_variant_type_dup_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_definite$MH() {
        return RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_definite$MH,"g_variant_type_is_definite");
    }
    public static int g_variant_type_is_definite ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_definite$MH, "g_variant_type_is_definite");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_container$MH() {
        return RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_container$MH,"g_variant_type_is_container");
    }
    public static int g_variant_type_is_container ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_container$MH, "g_variant_type_is_container");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_basic$MH() {
        return RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_basic$MH,"g_variant_type_is_basic");
    }
    public static int g_variant_type_is_basic ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_basic$MH, "g_variant_type_is_basic");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_maybe$MH() {
        return RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_maybe$MH,"g_variant_type_is_maybe");
    }
    public static int g_variant_type_is_maybe ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_maybe$MH, "g_variant_type_is_maybe");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_array$MH() {
        return RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_array$MH,"g_variant_type_is_array");
    }
    public static int g_variant_type_is_array ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_array$MH, "g_variant_type_is_array");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_tuple$MH() {
        return RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_tuple$MH,"g_variant_type_is_tuple");
    }
    public static int g_variant_type_is_tuple ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$212.g_variant_type_is_tuple$MH, "g_variant_type_is_tuple");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_dict_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$213.g_variant_type_is_dict_entry$MH,"g_variant_type_is_dict_entry");
    }
    public static int g_variant_type_is_dict_entry ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.g_variant_type_is_dict_entry$MH, "g_variant_type_is_dict_entry");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_variant$MH() {
        return RuntimeHelper.requireNonNull(constants$213.g_variant_type_is_variant$MH,"g_variant_type_is_variant");
    }
    public static int g_variant_type_is_variant ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.g_variant_type_is_variant$MH, "g_variant_type_is_variant");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$213.g_variant_type_hash$MH,"g_variant_type_hash");
    }
    public static int g_variant_type_hash ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.g_variant_type_hash$MH, "g_variant_type_hash");
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$213.g_variant_type_equal$MH,"g_variant_type_equal");
    }
    public static int g_variant_type_equal ( Addressable type1,  Addressable type2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.g_variant_type_equal$MH, "g_variant_type_equal");
        try {
            return (int)mh$.invokeExact(type1, type2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_is_subtype_of$MH() {
        return RuntimeHelper.requireNonNull(constants$213.g_variant_type_is_subtype_of$MH,"g_variant_type_is_subtype_of");
    }
    public static int g_variant_type_is_subtype_of ( Addressable type,  Addressable supertype) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.g_variant_type_is_subtype_of$MH, "g_variant_type_is_subtype_of");
        try {
            return (int)mh$.invokeExact(type, supertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_element$MH() {
        return RuntimeHelper.requireNonNull(constants$213.g_variant_type_element$MH,"g_variant_type_element");
    }
    public static MemoryAddress g_variant_type_element ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$213.g_variant_type_element$MH, "g_variant_type_element");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_first$MH() {
        return RuntimeHelper.requireNonNull(constants$214.g_variant_type_first$MH,"g_variant_type_first");
    }
    public static MemoryAddress g_variant_type_first ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.g_variant_type_first$MH, "g_variant_type_first");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_next$MH() {
        return RuntimeHelper.requireNonNull(constants$214.g_variant_type_next$MH,"g_variant_type_next");
    }
    public static MemoryAddress g_variant_type_next ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.g_variant_type_next$MH, "g_variant_type_next");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_n_items$MH() {
        return RuntimeHelper.requireNonNull(constants$214.g_variant_type_n_items$MH,"g_variant_type_n_items");
    }
    public static long g_variant_type_n_items ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.g_variant_type_n_items$MH, "g_variant_type_n_items");
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_key$MH() {
        return RuntimeHelper.requireNonNull(constants$214.g_variant_type_key$MH,"g_variant_type_key");
    }
    public static MemoryAddress g_variant_type_key ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.g_variant_type_key$MH, "g_variant_type_key");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_value$MH() {
        return RuntimeHelper.requireNonNull(constants$214.g_variant_type_value$MH,"g_variant_type_value");
    }
    public static MemoryAddress g_variant_type_value ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.g_variant_type_value$MH, "g_variant_type_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_new_array$MH() {
        return RuntimeHelper.requireNonNull(constants$214.g_variant_type_new_array$MH,"g_variant_type_new_array");
    }
    public static MemoryAddress g_variant_type_new_array ( Addressable element) {
        var mh$ = RuntimeHelper.requireNonNull(constants$214.g_variant_type_new_array$MH, "g_variant_type_new_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_new_maybe$MH() {
        return RuntimeHelper.requireNonNull(constants$215.g_variant_type_new_maybe$MH,"g_variant_type_new_maybe");
    }
    public static MemoryAddress g_variant_type_new_maybe ( Addressable element) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.g_variant_type_new_maybe$MH, "g_variant_type_new_maybe");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(element);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_new_tuple$MH() {
        return RuntimeHelper.requireNonNull(constants$215.g_variant_type_new_tuple$MH,"g_variant_type_new_tuple");
    }
    public static MemoryAddress g_variant_type_new_tuple ( Addressable items,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.g_variant_type_new_tuple$MH, "g_variant_type_new_tuple");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(items, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_new_dict_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$215.g_variant_type_new_dict_entry$MH,"g_variant_type_new_dict_entry");
    }
    public static MemoryAddress g_variant_type_new_dict_entry ( Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.g_variant_type_new_dict_entry$MH, "g_variant_type_new_dict_entry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_checked_$MH() {
        return RuntimeHelper.requireNonNull(constants$215.g_variant_type_checked_$MH,"g_variant_type_checked_");
    }
    public static MemoryAddress g_variant_type_checked_ ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.g_variant_type_checked_$MH, "g_variant_type_checked_");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_type_string_get_depth_$MH() {
        return RuntimeHelper.requireNonNull(constants$215.g_variant_type_string_get_depth_$MH,"g_variant_type_string_get_depth_");
    }
    public static long g_variant_type_string_get_depth_ ( Addressable type_string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.g_variant_type_string_get_depth_$MH, "g_variant_type_string_get_depth_");
        try {
            return (long)mh$.invokeExact(type_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_VARIANT_CLASS_BOOLEAN() {
        return (int)98L;
    }
    public static int G_VARIANT_CLASS_BYTE() {
        return (int)121L;
    }
    public static int G_VARIANT_CLASS_INT16() {
        return (int)110L;
    }
    public static int G_VARIANT_CLASS_UINT16() {
        return (int)113L;
    }
    public static int G_VARIANT_CLASS_INT32() {
        return (int)105L;
    }
    public static int G_VARIANT_CLASS_UINT32() {
        return (int)117L;
    }
    public static int G_VARIANT_CLASS_INT64() {
        return (int)120L;
    }
    public static int G_VARIANT_CLASS_UINT64() {
        return (int)116L;
    }
    public static int G_VARIANT_CLASS_HANDLE() {
        return (int)104L;
    }
    public static int G_VARIANT_CLASS_DOUBLE() {
        return (int)100L;
    }
    public static int G_VARIANT_CLASS_STRING() {
        return (int)115L;
    }
    public static int G_VARIANT_CLASS_OBJECT_PATH() {
        return (int)111L;
    }
    public static int G_VARIANT_CLASS_SIGNATURE() {
        return (int)103L;
    }
    public static int G_VARIANT_CLASS_VARIANT() {
        return (int)118L;
    }
    public static int G_VARIANT_CLASS_MAYBE() {
        return (int)109L;
    }
    public static int G_VARIANT_CLASS_ARRAY() {
        return (int)97L;
    }
    public static int G_VARIANT_CLASS_TUPLE() {
        return (int)40L;
    }
    public static int G_VARIANT_CLASS_DICT_ENTRY() {
        return (int)123L;
    }
    public static MethodHandle g_variant_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$215.g_variant_unref$MH,"g_variant_unref");
    }
    public static void g_variant_unref ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$215.g_variant_unref$MH, "g_variant_unref");
        try {
            mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$216.g_variant_ref$MH,"g_variant_ref");
    }
    public static MemoryAddress g_variant_ref ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.g_variant_ref$MH, "g_variant_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_ref_sink$MH() {
        return RuntimeHelper.requireNonNull(constants$216.g_variant_ref_sink$MH,"g_variant_ref_sink");
    }
    public static MemoryAddress g_variant_ref_sink ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.g_variant_ref_sink$MH, "g_variant_ref_sink");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_is_floating$MH() {
        return RuntimeHelper.requireNonNull(constants$216.g_variant_is_floating$MH,"g_variant_is_floating");
    }
    public static int g_variant_is_floating ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.g_variant_is_floating$MH, "g_variant_is_floating");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_take_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$216.g_variant_take_ref$MH,"g_variant_take_ref");
    }
    public static MemoryAddress g_variant_take_ref ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.g_variant_take_ref$MH, "g_variant_take_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$216.g_variant_get_type$MH,"g_variant_get_type");
    }
    public static MemoryAddress g_variant_get_type ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.g_variant_get_type$MH, "g_variant_get_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_type_string$MH() {
        return RuntimeHelper.requireNonNull(constants$216.g_variant_get_type_string$MH,"g_variant_get_type_string");
    }
    public static MemoryAddress g_variant_get_type_string ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$216.g_variant_get_type_string$MH, "g_variant_get_type_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_is_of_type$MH() {
        return RuntimeHelper.requireNonNull(constants$217.g_variant_is_of_type$MH,"g_variant_is_of_type");
    }
    public static int g_variant_is_of_type ( Addressable value,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.g_variant_is_of_type$MH, "g_variant_is_of_type");
        try {
            return (int)mh$.invokeExact(value, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_is_container$MH() {
        return RuntimeHelper.requireNonNull(constants$217.g_variant_is_container$MH,"g_variant_is_container");
    }
    public static int g_variant_is_container ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.g_variant_is_container$MH, "g_variant_is_container");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_classify$MH() {
        return RuntimeHelper.requireNonNull(constants$217.g_variant_classify$MH,"g_variant_classify");
    }
    public static int g_variant_classify ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.g_variant_classify$MH, "g_variant_classify");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$217.g_variant_new_boolean$MH,"g_variant_new_boolean");
    }
    public static MemoryAddress g_variant_new_boolean ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.g_variant_new_boolean$MH, "g_variant_new_boolean");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_byte$MH() {
        return RuntimeHelper.requireNonNull(constants$217.g_variant_new_byte$MH,"g_variant_new_byte");
    }
    public static MemoryAddress g_variant_new_byte ( byte value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.g_variant_new_byte$MH, "g_variant_new_byte");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_int16$MH() {
        return RuntimeHelper.requireNonNull(constants$217.g_variant_new_int16$MH,"g_variant_new_int16");
    }
    public static MemoryAddress g_variant_new_int16 ( short value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$217.g_variant_new_int16$MH, "g_variant_new_int16");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_uint16$MH() {
        return RuntimeHelper.requireNonNull(constants$218.g_variant_new_uint16$MH,"g_variant_new_uint16");
    }
    public static MemoryAddress g_variant_new_uint16 ( short value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.g_variant_new_uint16$MH, "g_variant_new_uint16");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_int32$MH() {
        return RuntimeHelper.requireNonNull(constants$218.g_variant_new_int32$MH,"g_variant_new_int32");
    }
    public static MemoryAddress g_variant_new_int32 ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.g_variant_new_int32$MH, "g_variant_new_int32");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$218.g_variant_new_uint32$MH,"g_variant_new_uint32");
    }
    public static MemoryAddress g_variant_new_uint32 ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.g_variant_new_uint32$MH, "g_variant_new_uint32");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$218.g_variant_new_int64$MH,"g_variant_new_int64");
    }
    public static MemoryAddress g_variant_new_int64 ( long value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.g_variant_new_int64$MH, "g_variant_new_int64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$218.g_variant_new_uint64$MH,"g_variant_new_uint64");
    }
    public static MemoryAddress g_variant_new_uint64 ( long value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.g_variant_new_uint64$MH, "g_variant_new_uint64");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$218.g_variant_new_handle$MH,"g_variant_new_handle");
    }
    public static MemoryAddress g_variant_new_handle ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$218.g_variant_new_handle$MH, "g_variant_new_handle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_double$MH() {
        return RuntimeHelper.requireNonNull(constants$219.g_variant_new_double$MH,"g_variant_new_double");
    }
    public static MemoryAddress g_variant_new_double ( double value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.g_variant_new_double$MH, "g_variant_new_double");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_string$MH() {
        return RuntimeHelper.requireNonNull(constants$219.g_variant_new_string$MH,"g_variant_new_string");
    }
    public static MemoryAddress g_variant_new_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.g_variant_new_string$MH, "g_variant_new_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_take_string$MH() {
        return RuntimeHelper.requireNonNull(constants$219.g_variant_new_take_string$MH,"g_variant_new_take_string");
    }
    public static MemoryAddress g_variant_new_take_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.g_variant_new_take_string$MH, "g_variant_new_take_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$219.g_variant_new_printf$MH,"g_variant_new_printf");
    }
    public static MemoryAddress g_variant_new_printf ( Addressable format_string, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.g_variant_new_printf$MH, "g_variant_new_printf");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format_string, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_object_path$MH() {
        return RuntimeHelper.requireNonNull(constants$219.g_variant_new_object_path$MH,"g_variant_new_object_path");
    }
    public static MemoryAddress g_variant_new_object_path ( Addressable object_path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.g_variant_new_object_path$MH, "g_variant_new_object_path");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(object_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_is_object_path$MH() {
        return RuntimeHelper.requireNonNull(constants$219.g_variant_is_object_path$MH,"g_variant_is_object_path");
    }
    public static int g_variant_is_object_path ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$219.g_variant_is_object_path$MH, "g_variant_is_object_path");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$220.g_variant_new_signature$MH,"g_variant_new_signature");
    }
    public static MemoryAddress g_variant_new_signature ( Addressable signature) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.g_variant_new_signature$MH, "g_variant_new_signature");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(signature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_is_signature$MH() {
        return RuntimeHelper.requireNonNull(constants$220.g_variant_is_signature$MH,"g_variant_is_signature");
    }
    public static int g_variant_is_signature ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.g_variant_is_signature$MH, "g_variant_is_signature");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_variant$MH() {
        return RuntimeHelper.requireNonNull(constants$220.g_variant_new_variant$MH,"g_variant_new_variant");
    }
    public static MemoryAddress g_variant_new_variant ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.g_variant_new_variant$MH, "g_variant_new_variant");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_strv$MH() {
        return RuntimeHelper.requireNonNull(constants$220.g_variant_new_strv$MH,"g_variant_new_strv");
    }
    public static MemoryAddress g_variant_new_strv ( Addressable strv,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.g_variant_new_strv$MH, "g_variant_new_strv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(strv, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_objv$MH() {
        return RuntimeHelper.requireNonNull(constants$220.g_variant_new_objv$MH,"g_variant_new_objv");
    }
    public static MemoryAddress g_variant_new_objv ( Addressable strv,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.g_variant_new_objv$MH, "g_variant_new_objv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(strv, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_bytestring$MH() {
        return RuntimeHelper.requireNonNull(constants$220.g_variant_new_bytestring$MH,"g_variant_new_bytestring");
    }
    public static MemoryAddress g_variant_new_bytestring ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$220.g_variant_new_bytestring$MH, "g_variant_new_bytestring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_bytestring_array$MH() {
        return RuntimeHelper.requireNonNull(constants$221.g_variant_new_bytestring_array$MH,"g_variant_new_bytestring_array");
    }
    public static MemoryAddress g_variant_new_bytestring_array ( Addressable strv,  long length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.g_variant_new_bytestring_array$MH, "g_variant_new_bytestring_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(strv, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_fixed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$221.g_variant_new_fixed_array$MH,"g_variant_new_fixed_array");
    }
    public static MemoryAddress g_variant_new_fixed_array ( Addressable element_type,  Addressable elements,  long n_elements,  long element_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.g_variant_new_fixed_array$MH, "g_variant_new_fixed_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(element_type, elements, n_elements, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$221.g_variant_get_boolean$MH,"g_variant_get_boolean");
    }
    public static int g_variant_get_boolean ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.g_variant_get_boolean$MH, "g_variant_get_boolean");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_byte$MH() {
        return RuntimeHelper.requireNonNull(constants$221.g_variant_get_byte$MH,"g_variant_get_byte");
    }
    public static byte g_variant_get_byte ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.g_variant_get_byte$MH, "g_variant_get_byte");
        try {
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_int16$MH() {
        return RuntimeHelper.requireNonNull(constants$221.g_variant_get_int16$MH,"g_variant_get_int16");
    }
    public static short g_variant_get_int16 ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.g_variant_get_int16$MH, "g_variant_get_int16");
        try {
            return (short)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_uint16$MH() {
        return RuntimeHelper.requireNonNull(constants$221.g_variant_get_uint16$MH,"g_variant_get_uint16");
    }
    public static short g_variant_get_uint16 ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$221.g_variant_get_uint16$MH, "g_variant_get_uint16");
        try {
            return (short)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_int32$MH() {
        return RuntimeHelper.requireNonNull(constants$222.g_variant_get_int32$MH,"g_variant_get_int32");
    }
    public static int g_variant_get_int32 ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.g_variant_get_int32$MH, "g_variant_get_int32");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$222.g_variant_get_uint32$MH,"g_variant_get_uint32");
    }
    public static int g_variant_get_uint32 ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.g_variant_get_uint32$MH, "g_variant_get_uint32");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$222.g_variant_get_int64$MH,"g_variant_get_int64");
    }
    public static long g_variant_get_int64 ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.g_variant_get_int64$MH, "g_variant_get_int64");
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$222.g_variant_get_uint64$MH,"g_variant_get_uint64");
    }
    public static long g_variant_get_uint64 ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.g_variant_get_uint64$MH, "g_variant_get_uint64");
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$222.g_variant_get_handle$MH,"g_variant_get_handle");
    }
    public static int g_variant_get_handle ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.g_variant_get_handle$MH, "g_variant_get_handle");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_double$MH() {
        return RuntimeHelper.requireNonNull(constants$222.g_variant_get_double$MH,"g_variant_get_double");
    }
    public static double g_variant_get_double ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$222.g_variant_get_double$MH, "g_variant_get_double");
        try {
            return (double)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_variant$MH() {
        return RuntimeHelper.requireNonNull(constants$223.g_variant_get_variant$MH,"g_variant_get_variant");
    }
    public static MemoryAddress g_variant_get_variant ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.g_variant_get_variant$MH, "g_variant_get_variant");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$223.g_variant_get_string$MH,"g_variant_get_string");
    }
    public static MemoryAddress g_variant_get_string ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.g_variant_get_string$MH, "g_variant_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dup_string$MH() {
        return RuntimeHelper.requireNonNull(constants$223.g_variant_dup_string$MH,"g_variant_dup_string");
    }
    public static MemoryAddress g_variant_dup_string ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.g_variant_dup_string$MH, "g_variant_dup_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_strv$MH() {
        return RuntimeHelper.requireNonNull(constants$223.g_variant_get_strv$MH,"g_variant_get_strv");
    }
    public static MemoryAddress g_variant_get_strv ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.g_variant_get_strv$MH, "g_variant_get_strv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dup_strv$MH() {
        return RuntimeHelper.requireNonNull(constants$223.g_variant_dup_strv$MH,"g_variant_dup_strv");
    }
    public static MemoryAddress g_variant_dup_strv ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.g_variant_dup_strv$MH, "g_variant_dup_strv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_objv$MH() {
        return RuntimeHelper.requireNonNull(constants$223.g_variant_get_objv$MH,"g_variant_get_objv");
    }
    public static MemoryAddress g_variant_get_objv ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$223.g_variant_get_objv$MH, "g_variant_get_objv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dup_objv$MH() {
        return RuntimeHelper.requireNonNull(constants$224.g_variant_dup_objv$MH,"g_variant_dup_objv");
    }
    public static MemoryAddress g_variant_dup_objv ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.g_variant_dup_objv$MH, "g_variant_dup_objv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_bytestring$MH() {
        return RuntimeHelper.requireNonNull(constants$224.g_variant_get_bytestring$MH,"g_variant_get_bytestring");
    }
    public static MemoryAddress g_variant_get_bytestring ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.g_variant_get_bytestring$MH, "g_variant_get_bytestring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dup_bytestring$MH() {
        return RuntimeHelper.requireNonNull(constants$224.g_variant_dup_bytestring$MH,"g_variant_dup_bytestring");
    }
    public static MemoryAddress g_variant_dup_bytestring ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.g_variant_dup_bytestring$MH, "g_variant_dup_bytestring");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_bytestring_array$MH() {
        return RuntimeHelper.requireNonNull(constants$224.g_variant_get_bytestring_array$MH,"g_variant_get_bytestring_array");
    }
    public static MemoryAddress g_variant_get_bytestring_array ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.g_variant_get_bytestring_array$MH, "g_variant_get_bytestring_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dup_bytestring_array$MH() {
        return RuntimeHelper.requireNonNull(constants$224.g_variant_dup_bytestring_array$MH,"g_variant_dup_bytestring_array");
    }
    public static MemoryAddress g_variant_dup_bytestring_array ( Addressable value,  Addressable length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.g_variant_dup_bytestring_array$MH, "g_variant_dup_bytestring_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_maybe$MH() {
        return RuntimeHelper.requireNonNull(constants$224.g_variant_new_maybe$MH,"g_variant_new_maybe");
    }
    public static MemoryAddress g_variant_new_maybe ( Addressable child_type,  Addressable child) {
        var mh$ = RuntimeHelper.requireNonNull(constants$224.g_variant_new_maybe$MH, "g_variant_new_maybe");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(child_type, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_array$MH() {
        return RuntimeHelper.requireNonNull(constants$225.g_variant_new_array$MH,"g_variant_new_array");
    }
    public static MemoryAddress g_variant_new_array ( Addressable child_type,  Addressable children,  long n_children) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.g_variant_new_array$MH, "g_variant_new_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(child_type, children, n_children);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_tuple$MH() {
        return RuntimeHelper.requireNonNull(constants$225.g_variant_new_tuple$MH,"g_variant_new_tuple");
    }
    public static MemoryAddress g_variant_new_tuple ( Addressable children,  long n_children) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.g_variant_new_tuple$MH, "g_variant_new_tuple");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(children, n_children);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_dict_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$225.g_variant_new_dict_entry$MH,"g_variant_new_dict_entry");
    }
    public static MemoryAddress g_variant_new_dict_entry ( Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.g_variant_new_dict_entry$MH, "g_variant_new_dict_entry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_maybe$MH() {
        return RuntimeHelper.requireNonNull(constants$225.g_variant_get_maybe$MH,"g_variant_get_maybe");
    }
    public static MemoryAddress g_variant_get_maybe ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.g_variant_get_maybe$MH, "g_variant_get_maybe");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_n_children$MH() {
        return RuntimeHelper.requireNonNull(constants$225.g_variant_n_children$MH,"g_variant_n_children");
    }
    public static long g_variant_n_children ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.g_variant_n_children$MH, "g_variant_n_children");
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_child$MH() {
        return RuntimeHelper.requireNonNull(constants$225.g_variant_get_child$MH,"g_variant_get_child");
    }
    public static void g_variant_get_child ( Addressable value,  long index_,  Addressable format_string, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$225.g_variant_get_child$MH, "g_variant_get_child");
        try {
            mh$.invokeExact(value, index_, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_child_value$MH() {
        return RuntimeHelper.requireNonNull(constants$226.g_variant_get_child_value$MH,"g_variant_get_child_value");
    }
    public static MemoryAddress g_variant_get_child_value ( Addressable value,  long index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.g_variant_get_child_value$MH, "g_variant_get_child_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$226.g_variant_lookup$MH,"g_variant_lookup");
    }
    public static int g_variant_lookup ( Addressable dictionary,  Addressable key,  Addressable format_string, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.g_variant_lookup$MH, "g_variant_lookup");
        try {
            return (int)mh$.invokeExact(dictionary, key, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_lookup_value$MH() {
        return RuntimeHelper.requireNonNull(constants$226.g_variant_lookup_value$MH,"g_variant_lookup_value");
    }
    public static MemoryAddress g_variant_lookup_value ( Addressable dictionary,  Addressable key,  Addressable expected_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.g_variant_lookup_value$MH, "g_variant_lookup_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dictionary, key, expected_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_fixed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$226.g_variant_get_fixed_array$MH,"g_variant_get_fixed_array");
    }
    public static MemoryAddress g_variant_get_fixed_array ( Addressable value,  Addressable n_elements,  long element_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.g_variant_get_fixed_array$MH, "g_variant_get_fixed_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, n_elements, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$226.g_variant_get_size$MH,"g_variant_get_size");
    }
    public static long g_variant_get_size ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.g_variant_get_size$MH, "g_variant_get_size");
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$226.g_variant_get_data$MH,"g_variant_get_data");
    }
    public static MemoryAddress g_variant_get_data ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$226.g_variant_get_data$MH, "g_variant_get_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_data_as_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$227.g_variant_get_data_as_bytes$MH,"g_variant_get_data_as_bytes");
    }
    public static MemoryAddress g_variant_get_data_as_bytes ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.g_variant_get_data_as_bytes$MH, "g_variant_get_data_as_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_store$MH() {
        return RuntimeHelper.requireNonNull(constants$227.g_variant_store$MH,"g_variant_store");
    }
    public static void g_variant_store ( Addressable value,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.g_variant_store$MH, "g_variant_store");
        try {
            mh$.invokeExact(value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_print$MH() {
        return RuntimeHelper.requireNonNull(constants$227.g_variant_print$MH,"g_variant_print");
    }
    public static MemoryAddress g_variant_print ( Addressable value,  int type_annotate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.g_variant_print$MH, "g_variant_print");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, type_annotate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_print_string$MH() {
        return RuntimeHelper.requireNonNull(constants$227.g_variant_print_string$MH,"g_variant_print_string");
    }
    public static MemoryAddress g_variant_print_string ( Addressable value,  Addressable string,  int type_annotate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.g_variant_print_string$MH, "g_variant_print_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value, string, type_annotate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$227.g_variant_hash$MH,"g_variant_hash");
    }
    public static int g_variant_hash ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.g_variant_hash$MH, "g_variant_hash");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$227.g_variant_equal$MH,"g_variant_equal");
    }
    public static int g_variant_equal ( Addressable one,  Addressable two) {
        var mh$ = RuntimeHelper.requireNonNull(constants$227.g_variant_equal$MH, "g_variant_equal");
        try {
            return (int)mh$.invokeExact(one, two);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_normal_form$MH() {
        return RuntimeHelper.requireNonNull(constants$228.g_variant_get_normal_form$MH,"g_variant_get_normal_form");
    }
    public static MemoryAddress g_variant_get_normal_form ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.g_variant_get_normal_form$MH, "g_variant_get_normal_form");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_is_normal_form$MH() {
        return RuntimeHelper.requireNonNull(constants$228.g_variant_is_normal_form$MH,"g_variant_is_normal_form");
    }
    public static int g_variant_is_normal_form ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.g_variant_is_normal_form$MH, "g_variant_is_normal_form");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_byteswap$MH() {
        return RuntimeHelper.requireNonNull(constants$228.g_variant_byteswap$MH,"g_variant_byteswap");
    }
    public static MemoryAddress g_variant_byteswap ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.g_variant_byteswap$MH, "g_variant_byteswap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_from_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$228.g_variant_new_from_bytes$MH,"g_variant_new_from_bytes");
    }
    public static MemoryAddress g_variant_new_from_bytes ( Addressable type,  Addressable bytes,  int trusted) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.g_variant_new_from_bytes$MH, "g_variant_new_from_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, bytes, trusted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_from_data$MH() {
        return RuntimeHelper.requireNonNull(constants$228.g_variant_new_from_data$MH,"g_variant_new_from_data");
    }
    public static MemoryAddress g_variant_new_from_data ( Addressable type,  Addressable data,  long size,  int trusted,  Addressable notify,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.g_variant_new_from_data$MH, "g_variant_new_from_data");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, data, size, trusted, notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_new$MH() {
        return RuntimeHelper.requireNonNull(constants$228.g_variant_iter_new$MH,"g_variant_iter_new");
    }
    public static MemoryAddress g_variant_iter_new ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$228.g_variant_iter_new$MH, "g_variant_iter_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_init$MH() {
        return RuntimeHelper.requireNonNull(constants$229.g_variant_iter_init$MH,"g_variant_iter_init");
    }
    public static long g_variant_iter_init ( Addressable iter,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.g_variant_iter_init$MH, "g_variant_iter_init");
        try {
            return (long)mh$.invokeExact(iter, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$229.g_variant_iter_copy$MH,"g_variant_iter_copy");
    }
    public static MemoryAddress g_variant_iter_copy ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.g_variant_iter_copy$MH, "g_variant_iter_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_n_children$MH() {
        return RuntimeHelper.requireNonNull(constants$229.g_variant_iter_n_children$MH,"g_variant_iter_n_children");
    }
    public static long g_variant_iter_n_children ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.g_variant_iter_n_children$MH, "g_variant_iter_n_children");
        try {
            return (long)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_free$MH() {
        return RuntimeHelper.requireNonNull(constants$229.g_variant_iter_free$MH,"g_variant_iter_free");
    }
    public static void g_variant_iter_free ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.g_variant_iter_free$MH, "g_variant_iter_free");
        try {
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_next_value$MH() {
        return RuntimeHelper.requireNonNull(constants$229.g_variant_iter_next_value$MH,"g_variant_iter_next_value");
    }
    public static MemoryAddress g_variant_iter_next_value ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.g_variant_iter_next_value$MH, "g_variant_iter_next_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$229.g_variant_iter_next$MH,"g_variant_iter_next");
    }
    public static int g_variant_iter_next ( Addressable iter,  Addressable format_string, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$229.g_variant_iter_next$MH, "g_variant_iter_next");
        try {
            return (int)mh$.invokeExact(iter, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_loop$MH() {
        return RuntimeHelper.requireNonNull(constants$230.g_variant_iter_loop$MH,"g_variant_iter_loop");
    }
    public static int g_variant_iter_loop ( Addressable iter,  Addressable format_string, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.g_variant_iter_loop$MH, "g_variant_iter_loop");
        try {
            return (int)mh$.invokeExact(iter, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_VARIANT_PARSE_ERROR_FAILED() {
        return (int)0L;
    }
    public static int G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED() {
        return (int)1L;
    }
    public static int G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE() {
        return (int)2L;
    }
    public static int G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED() {
        return (int)3L;
    }
    public static int G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END() {
        return (int)4L;
    }
    public static int G_VARIANT_PARSE_ERROR_INVALID_CHARACTER() {
        return (int)5L;
    }
    public static int G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING() {
        return (int)6L;
    }
    public static int G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH() {
        return (int)7L;
    }
    public static int G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE() {
        return (int)8L;
    }
    public static int G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING() {
        return (int)9L;
    }
    public static int G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE() {
        return (int)10L;
    }
    public static int G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE() {
        return (int)11L;
    }
    public static int G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG() {
        return (int)12L;
    }
    public static int G_VARIANT_PARSE_ERROR_TYPE_ERROR() {
        return (int)13L;
    }
    public static int G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN() {
        return (int)14L;
    }
    public static int G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD() {
        return (int)15L;
    }
    public static int G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT() {
        return (int)16L;
    }
    public static int G_VARIANT_PARSE_ERROR_VALUE_EXPECTED() {
        return (int)17L;
    }
    public static int G_VARIANT_PARSE_ERROR_RECURSION() {
        return (int)18L;
    }
    public static MethodHandle g_variant_parser_get_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$230.g_variant_parser_get_error_quark$MH,"g_variant_parser_get_error_quark");
    }
    public static int g_variant_parser_get_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.g_variant_parser_get_error_quark$MH, "g_variant_parser_get_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_parse_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$230.g_variant_parse_error_quark$MH,"g_variant_parse_error_quark");
    }
    public static int g_variant_parse_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.g_variant_parse_error_quark$MH, "g_variant_parse_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$230.g_variant_builder_new$MH,"g_variant_builder_new");
    }
    public static MemoryAddress g_variant_builder_new ( Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.g_variant_builder_new$MH, "g_variant_builder_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$230.g_variant_builder_unref$MH,"g_variant_builder_unref");
    }
    public static void g_variant_builder_unref ( Addressable builder) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.g_variant_builder_unref$MH, "g_variant_builder_unref");
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$230.g_variant_builder_ref$MH,"g_variant_builder_ref");
    }
    public static MemoryAddress g_variant_builder_ref ( Addressable builder) {
        var mh$ = RuntimeHelper.requireNonNull(constants$230.g_variant_builder_ref$MH, "g_variant_builder_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_init$MH() {
        return RuntimeHelper.requireNonNull(constants$231.g_variant_builder_init$MH,"g_variant_builder_init");
    }
    public static void g_variant_builder_init ( Addressable builder,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.g_variant_builder_init$MH, "g_variant_builder_init");
        try {
            mh$.invokeExact(builder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_end$MH() {
        return RuntimeHelper.requireNonNull(constants$231.g_variant_builder_end$MH,"g_variant_builder_end");
    }
    public static MemoryAddress g_variant_builder_end ( Addressable builder) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.g_variant_builder_end$MH, "g_variant_builder_end");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$231.g_variant_builder_clear$MH,"g_variant_builder_clear");
    }
    public static void g_variant_builder_clear ( Addressable builder) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.g_variant_builder_clear$MH, "g_variant_builder_clear");
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_open$MH() {
        return RuntimeHelper.requireNonNull(constants$231.g_variant_builder_open$MH,"g_variant_builder_open");
    }
    public static void g_variant_builder_open ( Addressable builder,  Addressable type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.g_variant_builder_open$MH, "g_variant_builder_open");
        try {
            mh$.invokeExact(builder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_close$MH() {
        return RuntimeHelper.requireNonNull(constants$231.g_variant_builder_close$MH,"g_variant_builder_close");
    }
    public static void g_variant_builder_close ( Addressable builder) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.g_variant_builder_close$MH, "g_variant_builder_close");
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_add_value$MH() {
        return RuntimeHelper.requireNonNull(constants$231.g_variant_builder_add_value$MH,"g_variant_builder_add_value");
    }
    public static void g_variant_builder_add_value ( Addressable builder,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$231.g_variant_builder_add_value$MH, "g_variant_builder_add_value");
        try {
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_add$MH() {
        return RuntimeHelper.requireNonNull(constants$232.g_variant_builder_add$MH,"g_variant_builder_add");
    }
    public static void g_variant_builder_add ( Addressable builder,  Addressable format_string, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.g_variant_builder_add$MH, "g_variant_builder_add");
        try {
            mh$.invokeExact(builder, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_add_parsed$MH() {
        return RuntimeHelper.requireNonNull(constants$232.g_variant_builder_add_parsed$MH,"g_variant_builder_add_parsed");
    }
    public static void g_variant_builder_add_parsed ( Addressable builder,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.g_variant_builder_add_parsed$MH, "g_variant_builder_add_parsed");
        try {
            mh$.invokeExact(builder, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new$MH() {
        return RuntimeHelper.requireNonNull(constants$232.g_variant_new$MH,"g_variant_new");
    }
    public static MemoryAddress g_variant_new ( Addressable format_string, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.g_variant_new$MH, "g_variant_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format_string, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get$MH() {
        return RuntimeHelper.requireNonNull(constants$232.g_variant_get$MH,"g_variant_get");
    }
    public static void g_variant_get ( Addressable value,  Addressable format_string, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.g_variant_get$MH, "g_variant_get");
        try {
            mh$.invokeExact(value, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_va$MH() {
        return RuntimeHelper.requireNonNull(constants$232.g_variant_new_va$MH,"g_variant_new_va");
    }
    public static MemoryAddress g_variant_new_va ( Addressable format_string,  Addressable endptr,  Addressable app) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.g_variant_new_va$MH, "g_variant_new_va");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format_string, endptr, app);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_va$MH() {
        return RuntimeHelper.requireNonNull(constants$232.g_variant_get_va$MH,"g_variant_get_va");
    }
    public static void g_variant_get_va ( Addressable value,  Addressable format_string,  Addressable endptr,  Addressable app) {
        var mh$ = RuntimeHelper.requireNonNull(constants$232.g_variant_get_va$MH, "g_variant_get_va");
        try {
            mh$.invokeExact(value, format_string, endptr, app);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_check_format_string$MH() {
        return RuntimeHelper.requireNonNull(constants$233.g_variant_check_format_string$MH,"g_variant_check_format_string");
    }
    public static int g_variant_check_format_string ( Addressable value,  Addressable format_string,  int copy_only) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.g_variant_check_format_string$MH, "g_variant_check_format_string");
        try {
            return (int)mh$.invokeExact(value, format_string, copy_only);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$233.g_variant_parse$MH,"g_variant_parse");
    }
    public static MemoryAddress g_variant_parse ( Addressable type,  Addressable text,  Addressable limit,  Addressable endptr,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.g_variant_parse$MH, "g_variant_parse");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(type, text, limit, endptr, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_parsed$MH() {
        return RuntimeHelper.requireNonNull(constants$233.g_variant_new_parsed$MH,"g_variant_new_parsed");
    }
    public static MemoryAddress g_variant_new_parsed ( Addressable format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.g_variant_new_parsed$MH, "g_variant_new_parsed");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_parsed_va$MH() {
        return RuntimeHelper.requireNonNull(constants$233.g_variant_new_parsed_va$MH,"g_variant_new_parsed_va");
    }
    public static MemoryAddress g_variant_new_parsed_va ( Addressable format,  Addressable app) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.g_variant_new_parsed_va$MH, "g_variant_new_parsed_va");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(format, app);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_parse_error_print_context$MH() {
        return RuntimeHelper.requireNonNull(constants$233.g_variant_parse_error_print_context$MH,"g_variant_parse_error_print_context");
    }
    public static MemoryAddress g_variant_parse_error_print_context ( Addressable error,  Addressable source_str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.g_variant_parse_error_print_context$MH, "g_variant_parse_error_print_context");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(error, source_str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$233.g_variant_compare$MH,"g_variant_compare");
    }
    public static int g_variant_compare ( Addressable one,  Addressable two) {
        var mh$ = RuntimeHelper.requireNonNull(constants$233.g_variant_compare$MH, "g_variant_compare");
        try {
            return (int)mh$.invokeExact(one, two);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_new$MH() {
        return RuntimeHelper.requireNonNull(constants$234.g_variant_dict_new$MH,"g_variant_dict_new");
    }
    public static MemoryAddress g_variant_dict_new ( Addressable from_asv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.g_variant_dict_new$MH, "g_variant_dict_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(from_asv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_init$MH() {
        return RuntimeHelper.requireNonNull(constants$234.g_variant_dict_init$MH,"g_variant_dict_init");
    }
    public static void g_variant_dict_init ( Addressable dict,  Addressable from_asv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.g_variant_dict_init$MH, "g_variant_dict_init");
        try {
            mh$.invokeExact(dict, from_asv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$234.g_variant_dict_lookup$MH,"g_variant_dict_lookup");
    }
    public static int g_variant_dict_lookup ( Addressable dict,  Addressable key,  Addressable format_string, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.g_variant_dict_lookup$MH, "g_variant_dict_lookup");
        try {
            return (int)mh$.invokeExact(dict, key, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_lookup_value$MH() {
        return RuntimeHelper.requireNonNull(constants$234.g_variant_dict_lookup_value$MH,"g_variant_dict_lookup_value");
    }
    public static MemoryAddress g_variant_dict_lookup_value ( Addressable dict,  Addressable key,  Addressable expected_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.g_variant_dict_lookup_value$MH, "g_variant_dict_lookup_value");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dict, key, expected_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$234.g_variant_dict_contains$MH,"g_variant_dict_contains");
    }
    public static int g_variant_dict_contains ( Addressable dict,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.g_variant_dict_contains$MH, "g_variant_dict_contains");
        try {
            return (int)mh$.invokeExact(dict, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$234.g_variant_dict_insert$MH,"g_variant_dict_insert");
    }
    public static void g_variant_dict_insert ( Addressable dict,  Addressable key,  Addressable format_string, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$234.g_variant_dict_insert$MH, "g_variant_dict_insert");
        try {
            mh$.invokeExact(dict, key, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_insert_value$MH() {
        return RuntimeHelper.requireNonNull(constants$235.g_variant_dict_insert_value$MH,"g_variant_dict_insert_value");
    }
    public static void g_variant_dict_insert_value ( Addressable dict,  Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.g_variant_dict_insert_value$MH, "g_variant_dict_insert_value");
        try {
            mh$.invokeExact(dict, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$235.g_variant_dict_remove$MH,"g_variant_dict_remove");
    }
    public static int g_variant_dict_remove ( Addressable dict,  Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.g_variant_dict_remove$MH, "g_variant_dict_remove");
        try {
            return (int)mh$.invokeExact(dict, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$235.g_variant_dict_clear$MH,"g_variant_dict_clear");
    }
    public static void g_variant_dict_clear ( Addressable dict) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.g_variant_dict_clear$MH, "g_variant_dict_clear");
        try {
            mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_end$MH() {
        return RuntimeHelper.requireNonNull(constants$235.g_variant_dict_end$MH,"g_variant_dict_end");
    }
    public static MemoryAddress g_variant_dict_end ( Addressable dict) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.g_variant_dict_end$MH, "g_variant_dict_end");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$235.g_variant_dict_ref$MH,"g_variant_dict_ref");
    }
    public static MemoryAddress g_variant_dict_ref ( Addressable dict) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.g_variant_dict_ref$MH, "g_variant_dict_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$235.g_variant_dict_unref$MH,"g_variant_dict_unref");
    }
    public static void g_variant_dict_unref ( Addressable dict) {
        var mh$ = RuntimeHelper.requireNonNull(constants$235.g_variant_dict_unref$MH, "g_variant_dict_unref");
        try {
            mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_printf_string_upper_bound$MH() {
        return RuntimeHelper.requireNonNull(constants$236.g_printf_string_upper_bound$MH,"g_printf_string_upper_bound");
    }
    public static long g_printf_string_upper_bound ( Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.g_printf_string_upper_bound$MH, "g_printf_string_upper_bound");
        try {
            return (long)mh$.invokeExact(format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_LOG_FLAG_RECURSION() {
        return (int)1L;
    }
    public static int G_LOG_FLAG_FATAL() {
        return (int)2L;
    }
    public static int G_LOG_LEVEL_ERROR() {
        return (int)4L;
    }
    public static int G_LOG_LEVEL_CRITICAL() {
        return (int)8L;
    }
    public static int G_LOG_LEVEL_WARNING() {
        return (int)16L;
    }
    public static int G_LOG_LEVEL_MESSAGE() {
        return (int)32L;
    }
    public static int G_LOG_LEVEL_INFO() {
        return (int)64L;
    }
    public static int G_LOG_LEVEL_DEBUG() {
        return (int)128L;
    }
    public static int G_LOG_LEVEL_MASK() {
        return (int)-4L;
    }
    public static MethodHandle g_log_set_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$236.g_log_set_handler$MH,"g_log_set_handler");
    }
    public static int g_log_set_handler ( Addressable log_domain,  int log_levels,  Addressable log_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.g_log_set_handler$MH, "g_log_set_handler");
        try {
            return (int)mh$.invokeExact(log_domain, log_levels, log_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_handler_full$MH() {
        return RuntimeHelper.requireNonNull(constants$236.g_log_set_handler_full$MH,"g_log_set_handler_full");
    }
    public static int g_log_set_handler_full ( Addressable log_domain,  int log_levels,  Addressable log_func,  Addressable user_data,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.g_log_set_handler_full$MH, "g_log_set_handler_full");
        try {
            return (int)mh$.invokeExact(log_domain, log_levels, log_func, user_data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_remove_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$236.g_log_remove_handler$MH,"g_log_remove_handler");
    }
    public static void g_log_remove_handler ( Addressable log_domain,  int handler_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$236.g_log_remove_handler$MH, "g_log_remove_handler");
        try {
            mh$.invokeExact(log_domain, handler_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_default_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$237.g_log_default_handler$MH,"g_log_default_handler");
    }
    public static void g_log_default_handler ( Addressable log_domain,  int log_level,  Addressable message,  Addressable unused_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.g_log_default_handler$MH, "g_log_default_handler");
        try {
            mh$.invokeExact(log_domain, log_level, message, unused_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_default_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$237.g_log_set_default_handler$MH,"g_log_set_default_handler");
    }
    public static MemoryAddress g_log_set_default_handler ( Addressable log_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.g_log_set_default_handler$MH, "g_log_set_default_handler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(log_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log$MH() {
        return RuntimeHelper.requireNonNull(constants$237.g_log$MH,"g_log");
    }
    public static void g_log ( Addressable log_domain,  int log_level,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.g_log$MH, "g_log");
        try {
            mh$.invokeExact(log_domain, log_level, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_logv$MH() {
        return RuntimeHelper.requireNonNull(constants$237.g_logv$MH,"g_logv");
    }
    public static void g_logv ( Addressable log_domain,  int log_level,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.g_logv$MH, "g_logv");
        try {
            mh$.invokeExact(log_domain, log_level, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_fatal_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$237.g_log_set_fatal_mask$MH,"g_log_set_fatal_mask");
    }
    public static int g_log_set_fatal_mask ( Addressable log_domain,  int fatal_mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.g_log_set_fatal_mask$MH, "g_log_set_fatal_mask");
        try {
            return (int)mh$.invokeExact(log_domain, fatal_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_always_fatal$MH() {
        return RuntimeHelper.requireNonNull(constants$237.g_log_set_always_fatal$MH,"g_log_set_always_fatal");
    }
    public static int g_log_set_always_fatal ( int fatal_mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$237.g_log_set_always_fatal$MH, "g_log_set_always_fatal");
        try {
            return (int)mh$.invokeExact(fatal_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_LOG_WRITER_HANDLED() {
        return (int)1L;
    }
    public static int G_LOG_WRITER_UNHANDLED() {
        return (int)0L;
    }
    public static MethodHandle g_log_structured$MH() {
        return RuntimeHelper.requireNonNull(constants$238.g_log_structured$MH,"g_log_structured");
    }
    public static void g_log_structured ( Addressable log_domain,  int log_level, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.g_log_structured$MH, "g_log_structured");
        try {
            mh$.invokeExact(log_domain, log_level, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_structured_array$MH() {
        return RuntimeHelper.requireNonNull(constants$238.g_log_structured_array$MH,"g_log_structured_array");
    }
    public static void g_log_structured_array ( int log_level,  Addressable fields,  long n_fields) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.g_log_structured_array$MH, "g_log_structured_array");
        try {
            mh$.invokeExact(log_level, fields, n_fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_variant$MH() {
        return RuntimeHelper.requireNonNull(constants$238.g_log_variant$MH,"g_log_variant");
    }
    public static void g_log_variant ( Addressable log_domain,  int log_level,  Addressable fields) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.g_log_variant$MH, "g_log_variant");
        try {
            mh$.invokeExact(log_domain, log_level, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_writer_func$MH() {
        return RuntimeHelper.requireNonNull(constants$238.g_log_set_writer_func$MH,"g_log_set_writer_func");
    }
    public static void g_log_set_writer_func ( Addressable func,  Addressable user_data,  Addressable user_data_free) {
        var mh$ = RuntimeHelper.requireNonNull(constants$238.g_log_set_writer_func$MH, "g_log_set_writer_func");
        try {
            mh$.invokeExact(func, user_data, user_data_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_supports_color$MH() {
        return RuntimeHelper.requireNonNull(constants$239.g_log_writer_supports_color$MH,"g_log_writer_supports_color");
    }
    public static int g_log_writer_supports_color ( int output_fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.g_log_writer_supports_color$MH, "g_log_writer_supports_color");
        try {
            return (int)mh$.invokeExact(output_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_is_journald$MH() {
        return RuntimeHelper.requireNonNull(constants$239.g_log_writer_is_journald$MH,"g_log_writer_is_journald");
    }
    public static int g_log_writer_is_journald ( int output_fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.g_log_writer_is_journald$MH, "g_log_writer_is_journald");
        try {
            return (int)mh$.invokeExact(output_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_format_fields$MH() {
        return RuntimeHelper.requireNonNull(constants$239.g_log_writer_format_fields$MH,"g_log_writer_format_fields");
    }
    public static MemoryAddress g_log_writer_format_fields ( int log_level,  Addressable fields,  long n_fields,  int use_color) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.g_log_writer_format_fields$MH, "g_log_writer_format_fields");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(log_level, fields, n_fields, use_color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_journald$MH() {
        return RuntimeHelper.requireNonNull(constants$239.g_log_writer_journald$MH,"g_log_writer_journald");
    }
    public static int g_log_writer_journald ( int log_level,  Addressable fields,  long n_fields,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.g_log_writer_journald$MH, "g_log_writer_journald");
        try {
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_standard_streams$MH() {
        return RuntimeHelper.requireNonNull(constants$239.g_log_writer_standard_streams$MH,"g_log_writer_standard_streams");
    }
    public static int g_log_writer_standard_streams ( int log_level,  Addressable fields,  long n_fields,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.g_log_writer_standard_streams$MH, "g_log_writer_standard_streams");
        try {
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_default$MH() {
        return RuntimeHelper.requireNonNull(constants$239.g_log_writer_default$MH,"g_log_writer_default");
    }
    public static int g_log_writer_default ( int log_level,  Addressable fields,  long n_fields,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$239.g_log_writer_default$MH, "g_log_writer_default");
        try {
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_default_set_use_stderr$MH() {
        return RuntimeHelper.requireNonNull(constants$240.g_log_writer_default_set_use_stderr$MH,"g_log_writer_default_set_use_stderr");
    }
    public static void g_log_writer_default_set_use_stderr ( int use_stderr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.g_log_writer_default_set_use_stderr$MH, "g_log_writer_default_set_use_stderr");
        try {
            mh$.invokeExact(use_stderr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_default_would_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$240.g_log_writer_default_would_drop$MH,"g_log_writer_default_would_drop");
    }
    public static int g_log_writer_default_would_drop ( int log_level,  Addressable log_domain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.g_log_writer_default_would_drop$MH, "g_log_writer_default_would_drop");
        try {
            return (int)mh$.invokeExact(log_level, log_domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _g_log_fallback_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$240._g_log_fallback_handler$MH,"_g_log_fallback_handler");
    }
    public static void _g_log_fallback_handler ( Addressable log_domain,  int log_level,  Addressable message,  Addressable unused_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240._g_log_fallback_handler$MH, "_g_log_fallback_handler");
        try {
            mh$.invokeExact(log_domain, log_level, message, unused_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_return_if_fail_warning$MH() {
        return RuntimeHelper.requireNonNull(constants$240.g_return_if_fail_warning$MH,"g_return_if_fail_warning");
    }
    public static void g_return_if_fail_warning ( Addressable log_domain,  Addressable pretty_function,  Addressable expression) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.g_return_if_fail_warning$MH, "g_return_if_fail_warning");
        try {
            mh$.invokeExact(log_domain, pretty_function, expression);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_warn_message$MH() {
        return RuntimeHelper.requireNonNull(constants$240.g_warn_message$MH,"g_warn_message");
    }
    public static void g_warn_message ( Addressable domain,  Addressable file,  int line,  Addressable func,  Addressable warnexpr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.g_warn_message$MH, "g_warn_message");
        try {
            mh$.invokeExact(domain, file, line, func, warnexpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assert_warning$MH() {
        return RuntimeHelper.requireNonNull(constants$240.g_assert_warning$MH,"g_assert_warning");
    }
    public static void g_assert_warning ( Addressable log_domain,  Addressable file,  int line,  Addressable pretty_function,  Addressable expression) {
        var mh$ = RuntimeHelper.requireNonNull(constants$240.g_assert_warning$MH, "g_assert_warning");
        try {
            mh$.invokeExact(log_domain, file, line, pretty_function, expression);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_structured_standard$MH() {
        return RuntimeHelper.requireNonNull(constants$241.g_log_structured_standard$MH,"g_log_structured_standard");
    }
    public static void g_log_structured_standard ( Addressable log_domain,  int log_level,  Addressable file,  Addressable line,  Addressable func,  Addressable message_format, Object... x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.g_log_structured_standard$MH, "g_log_structured_standard");
        try {
            mh$.invokeExact(log_domain, log_level, file, line, func, message_format, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_print$MH() {
        return RuntimeHelper.requireNonNull(constants$241.g_print$MH,"g_print");
    }
    public static void g_print ( Addressable format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.g_print$MH, "g_print");
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_print_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$241.g_set_print_handler$MH,"g_set_print_handler");
    }
    public static MemoryAddress g_set_print_handler ( Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.g_set_print_handler$MH, "g_set_print_handler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_printerr$MH() {
        return RuntimeHelper.requireNonNull(constants$241.g_printerr$MH,"g_printerr");
    }
    public static void g_printerr ( Addressable format, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$241.g_printerr$MH, "g_printerr");
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_printerr_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$242.g_set_printerr_handler$MH,"g_set_printerr_handler");
    }
    public static MemoryAddress g_set_printerr_handler ( Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$242.g_set_printerr_handler$MH, "g_set_printerr_handler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_OPTION_FLAG_NONE() {
        return (int)0L;
    }
    public static int G_OPTION_FLAG_HIDDEN() {
        return (int)1L;
    }
    public static int G_OPTION_FLAG_IN_MAIN() {
        return (int)2L;
    }
    public static int G_OPTION_FLAG_REVERSE() {
        return (int)4L;
    }
    public static int G_OPTION_FLAG_NO_ARG() {
        return (int)8L;
    }
    public static int G_OPTION_FLAG_FILENAME() {
        return (int)16L;
    }
    public static int G_OPTION_FLAG_OPTIONAL_ARG() {
        return (int)32L;
    }
    public static int G_OPTION_FLAG_NOALIAS() {
        return (int)64L;
    }
    public static int G_OPTION_ARG_NONE() {
        return (int)0L;
    }
    public static int G_OPTION_ARG_STRING() {
        return (int)1L;
    }
    public static int G_OPTION_ARG_INT() {
        return (int)2L;
    }
    public static int G_OPTION_ARG_CALLBACK() {
        return (int)3L;
    }
    public static int G_OPTION_ARG_FILENAME() {
        return (int)4L;
    }
    public static int G_OPTION_ARG_STRING_ARRAY() {
        return (int)5L;
    }
    public static int G_OPTION_ARG_FILENAME_ARRAY() {
        return (int)6L;
    }
    public static int G_OPTION_ARG_DOUBLE() {
        return (int)7L;
    }
    public static int G_OPTION_ARG_INT64() {
        return (int)8L;
    }
    public static int G_OPTION_ERROR_UNKNOWN_OPTION() {
        return (int)0L;
    }
    public static int G_OPTION_ERROR_BAD_VALUE() {
        return (int)1L;
    }
    public static int G_OPTION_ERROR_FAILED() {
        return (int)2L;
    }
    public static MethodHandle g_option_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$243.g_option_error_quark$MH,"g_option_error_quark");
    }
    public static int g_option_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.g_option_error_quark$MH, "g_option_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_new$MH() {
        return RuntimeHelper.requireNonNull(constants$243.g_option_context_new$MH,"g_option_context_new");
    }
    public static MemoryAddress g_option_context_new ( Addressable parameter_string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.g_option_context_new$MH, "g_option_context_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(parameter_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_summary$MH() {
        return RuntimeHelper.requireNonNull(constants$243.g_option_context_set_summary$MH,"g_option_context_set_summary");
    }
    public static void g_option_context_set_summary ( Addressable context,  Addressable summary) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.g_option_context_set_summary$MH, "g_option_context_set_summary");
        try {
            mh$.invokeExact(context, summary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_summary$MH() {
        return RuntimeHelper.requireNonNull(constants$243.g_option_context_get_summary$MH,"g_option_context_get_summary");
    }
    public static MemoryAddress g_option_context_get_summary ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.g_option_context_get_summary$MH, "g_option_context_get_summary");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_description$MH() {
        return RuntimeHelper.requireNonNull(constants$243.g_option_context_set_description$MH,"g_option_context_set_description");
    }
    public static void g_option_context_set_description ( Addressable context,  Addressable description) {
        var mh$ = RuntimeHelper.requireNonNull(constants$243.g_option_context_set_description$MH, "g_option_context_set_description");
        try {
            mh$.invokeExact(context, description);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_description$MH() {
        return RuntimeHelper.requireNonNull(constants$244.g_option_context_get_description$MH,"g_option_context_get_description");
    }
    public static MemoryAddress g_option_context_get_description ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.g_option_context_get_description$MH, "g_option_context_get_description");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_free$MH() {
        return RuntimeHelper.requireNonNull(constants$244.g_option_context_free$MH,"g_option_context_free");
    }
    public static void g_option_context_free ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.g_option_context_free$MH, "g_option_context_free");
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_help_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$244.g_option_context_set_help_enabled$MH,"g_option_context_set_help_enabled");
    }
    public static void g_option_context_set_help_enabled ( Addressable context,  int help_enabled) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.g_option_context_set_help_enabled$MH, "g_option_context_set_help_enabled");
        try {
            mh$.invokeExact(context, help_enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_help_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$244.g_option_context_get_help_enabled$MH,"g_option_context_get_help_enabled");
    }
    public static int g_option_context_get_help_enabled ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.g_option_context_get_help_enabled$MH, "g_option_context_get_help_enabled");
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_ignore_unknown_options$MH() {
        return RuntimeHelper.requireNonNull(constants$244.g_option_context_set_ignore_unknown_options$MH,"g_option_context_set_ignore_unknown_options");
    }
    public static void g_option_context_set_ignore_unknown_options ( Addressable context,  int ignore_unknown) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.g_option_context_set_ignore_unknown_options$MH, "g_option_context_set_ignore_unknown_options");
        try {
            mh$.invokeExact(context, ignore_unknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_ignore_unknown_options$MH() {
        return RuntimeHelper.requireNonNull(constants$244.g_option_context_get_ignore_unknown_options$MH,"g_option_context_get_ignore_unknown_options");
    }
    public static int g_option_context_get_ignore_unknown_options ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$244.g_option_context_get_ignore_unknown_options$MH, "g_option_context_get_ignore_unknown_options");
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_strict_posix$MH() {
        return RuntimeHelper.requireNonNull(constants$245.g_option_context_set_strict_posix$MH,"g_option_context_set_strict_posix");
    }
    public static void g_option_context_set_strict_posix ( Addressable context,  int strict_posix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.g_option_context_set_strict_posix$MH, "g_option_context_set_strict_posix");
        try {
            mh$.invokeExact(context, strict_posix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_strict_posix$MH() {
        return RuntimeHelper.requireNonNull(constants$245.g_option_context_get_strict_posix$MH,"g_option_context_get_strict_posix");
    }
    public static int g_option_context_get_strict_posix ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.g_option_context_get_strict_posix$MH, "g_option_context_get_strict_posix");
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_add_main_entries$MH() {
        return RuntimeHelper.requireNonNull(constants$245.g_option_context_add_main_entries$MH,"g_option_context_add_main_entries");
    }
    public static void g_option_context_add_main_entries ( Addressable context,  Addressable entries,  Addressable translation_domain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.g_option_context_add_main_entries$MH, "g_option_context_add_main_entries");
        try {
            mh$.invokeExact(context, entries, translation_domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$245.g_option_context_parse$MH,"g_option_context_parse");
    }
    public static int g_option_context_parse ( Addressable context,  Addressable argc,  Addressable argv,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.g_option_context_parse$MH, "g_option_context_parse");
        try {
            return (int)mh$.invokeExact(context, argc, argv, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_parse_strv$MH() {
        return RuntimeHelper.requireNonNull(constants$245.g_option_context_parse_strv$MH,"g_option_context_parse_strv");
    }
    public static int g_option_context_parse_strv ( Addressable context,  Addressable arguments,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.g_option_context_parse_strv$MH, "g_option_context_parse_strv");
        try {
            return (int)mh$.invokeExact(context, arguments, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_translate_func$MH() {
        return RuntimeHelper.requireNonNull(constants$245.g_option_context_set_translate_func$MH,"g_option_context_set_translate_func");
    }
    public static void g_option_context_set_translate_func ( Addressable context,  Addressable func,  Addressable data,  Addressable destroy_notify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$245.g_option_context_set_translate_func$MH, "g_option_context_set_translate_func");
        try {
            mh$.invokeExact(context, func, data, destroy_notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_translation_domain$MH() {
        return RuntimeHelper.requireNonNull(constants$246.g_option_context_set_translation_domain$MH,"g_option_context_set_translation_domain");
    }
    public static void g_option_context_set_translation_domain ( Addressable context,  Addressable domain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.g_option_context_set_translation_domain$MH, "g_option_context_set_translation_domain");
        try {
            mh$.invokeExact(context, domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_add_group$MH() {
        return RuntimeHelper.requireNonNull(constants$246.g_option_context_add_group$MH,"g_option_context_add_group");
    }
    public static void g_option_context_add_group ( Addressable context,  Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.g_option_context_add_group$MH, "g_option_context_add_group");
        try {
            mh$.invokeExact(context, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_main_group$MH() {
        return RuntimeHelper.requireNonNull(constants$246.g_option_context_set_main_group$MH,"g_option_context_set_main_group");
    }
    public static void g_option_context_set_main_group ( Addressable context,  Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.g_option_context_set_main_group$MH, "g_option_context_set_main_group");
        try {
            mh$.invokeExact(context, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_main_group$MH() {
        return RuntimeHelper.requireNonNull(constants$246.g_option_context_get_main_group$MH,"g_option_context_get_main_group");
    }
    public static MemoryAddress g_option_context_get_main_group ( Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.g_option_context_get_main_group$MH, "g_option_context_get_main_group");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_help$MH() {
        return RuntimeHelper.requireNonNull(constants$246.g_option_context_get_help$MH,"g_option_context_get_help");
    }
    public static MemoryAddress g_option_context_get_help ( Addressable context,  int main_help,  Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.g_option_context_get_help$MH, "g_option_context_get_help");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(context, main_help, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_new$MH() {
        return RuntimeHelper.requireNonNull(constants$246.g_option_group_new$MH,"g_option_group_new");
    }
    public static MemoryAddress g_option_group_new ( Addressable name,  Addressable description,  Addressable help_description,  Addressable user_data,  Addressable destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$246.g_option_group_new$MH, "g_option_group_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, description, help_description, user_data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_parse_hooks$MH() {
        return RuntimeHelper.requireNonNull(constants$247.g_option_group_set_parse_hooks$MH,"g_option_group_set_parse_hooks");
    }
    public static void g_option_group_set_parse_hooks ( Addressable group,  Addressable pre_parse_func,  Addressable post_parse_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.g_option_group_set_parse_hooks$MH, "g_option_group_set_parse_hooks");
        try {
            mh$.invokeExact(group, pre_parse_func, post_parse_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_error_hook$MH() {
        return RuntimeHelper.requireNonNull(constants$247.g_option_group_set_error_hook$MH,"g_option_group_set_error_hook");
    }
    public static void g_option_group_set_error_hook ( Addressable group,  Addressable error_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.g_option_group_set_error_hook$MH, "g_option_group_set_error_hook");
        try {
            mh$.invokeExact(group, error_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_free$MH() {
        return RuntimeHelper.requireNonNull(constants$247.g_option_group_free$MH,"g_option_group_free");
    }
    public static void g_option_group_free ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.g_option_group_free$MH, "g_option_group_free");
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$247.g_option_group_ref$MH,"g_option_group_ref");
    }
    public static MemoryAddress g_option_group_ref ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.g_option_group_ref$MH, "g_option_group_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$247.g_option_group_unref$MH,"g_option_group_unref");
    }
    public static void g_option_group_unref ( Addressable group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.g_option_group_unref$MH, "g_option_group_unref");
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_add_entries$MH() {
        return RuntimeHelper.requireNonNull(constants$247.g_option_group_add_entries$MH,"g_option_group_add_entries");
    }
    public static void g_option_group_add_entries ( Addressable group,  Addressable entries) {
        var mh$ = RuntimeHelper.requireNonNull(constants$247.g_option_group_add_entries$MH, "g_option_group_add_entries");
        try {
            mh$.invokeExact(group, entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_translate_func$MH() {
        return RuntimeHelper.requireNonNull(constants$248.g_option_group_set_translate_func$MH,"g_option_group_set_translate_func");
    }
    public static void g_option_group_set_translate_func ( Addressable group,  Addressable func,  Addressable data,  Addressable destroy_notify) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.g_option_group_set_translate_func$MH, "g_option_group_set_translate_func");
        try {
            mh$.invokeExact(group, func, data, destroy_notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_translation_domain$MH() {
        return RuntimeHelper.requireNonNull(constants$248.g_option_group_set_translation_domain$MH,"g_option_group_set_translation_domain");
    }
    public static void g_option_group_set_translation_domain ( Addressable group,  Addressable domain) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.g_option_group_set_translation_domain$MH, "g_option_group_set_translation_domain");
        try {
            mh$.invokeExact(group, domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_new$MH() {
        return RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_new$MH,"g_pattern_spec_new");
    }
    public static MemoryAddress g_pattern_spec_new ( Addressable pattern) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_new$MH, "g_pattern_spec_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_free$MH() {
        return RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_free$MH,"g_pattern_spec_free");
    }
    public static void g_pattern_spec_free ( Addressable pspec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_free$MH, "g_pattern_spec_free");
        try {
            mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_copy$MH,"g_pattern_spec_copy");
    }
    public static MemoryAddress g_pattern_spec_copy ( Addressable pspec) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_copy$MH, "g_pattern_spec_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_equal$MH,"g_pattern_spec_equal");
    }
    public static int g_pattern_spec_equal ( Addressable pspec1,  Addressable pspec2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$248.g_pattern_spec_equal$MH, "g_pattern_spec_equal");
        try {
            return (int)mh$.invokeExact(pspec1, pspec2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_match$MH() {
        return RuntimeHelper.requireNonNull(constants$249.g_pattern_spec_match$MH,"g_pattern_spec_match");
    }
    public static int g_pattern_spec_match ( Addressable pspec,  long string_length,  Addressable string,  Addressable string_reversed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.g_pattern_spec_match$MH, "g_pattern_spec_match");
        try {
            return (int)mh$.invokeExact(pspec, string_length, string, string_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_match_string$MH() {
        return RuntimeHelper.requireNonNull(constants$249.g_pattern_spec_match_string$MH,"g_pattern_spec_match_string");
    }
    public static int g_pattern_spec_match_string ( Addressable pspec,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.g_pattern_spec_match_string$MH, "g_pattern_spec_match_string");
        try {
            return (int)mh$.invokeExact(pspec, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_match$MH() {
        return RuntimeHelper.requireNonNull(constants$249.g_pattern_match$MH,"g_pattern_match");
    }
    public static int g_pattern_match ( Addressable pspec,  int string_length,  Addressable string,  Addressable string_reversed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.g_pattern_match$MH, "g_pattern_match");
        try {
            return (int)mh$.invokeExact(pspec, string_length, string, string_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_match_string$MH() {
        return RuntimeHelper.requireNonNull(constants$249.g_pattern_match_string$MH,"g_pattern_match_string");
    }
    public static int g_pattern_match_string ( Addressable pspec,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.g_pattern_match_string$MH, "g_pattern_match_string");
        try {
            return (int)mh$.invokeExact(pspec, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_match_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$249.g_pattern_match_simple$MH,"g_pattern_match_simple");
    }
    public static int g_pattern_match_simple ( Addressable pattern,  Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.g_pattern_match_simple$MH, "g_pattern_match_simple");
        try {
            return (int)mh$.invokeExact(pattern, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spaced_primes_closest$MH() {
        return RuntimeHelper.requireNonNull(constants$249.g_spaced_primes_closest$MH,"g_spaced_primes_closest");
    }
    public static int g_spaced_primes_closest ( int num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$249.g_spaced_primes_closest$MH, "g_spaced_primes_closest");
        try {
            return (int)mh$.invokeExact(num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_qsort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$250.g_qsort_with_data$MH,"g_qsort_with_data");
    }
    public static void g_qsort_with_data ( Addressable pbase,  int total_elems,  long size,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.g_qsort_with_data$MH, "g_qsort_with_data");
        try {
            mh$.invokeExact(pbase, total_elems, size, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_new$MH() {
        return RuntimeHelper.requireNonNull(constants$250.g_queue_new$MH,"g_queue_new");
    }
    public static MemoryAddress g_queue_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.g_queue_new$MH, "g_queue_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_free$MH() {
        return RuntimeHelper.requireNonNull(constants$250.g_queue_free$MH,"g_queue_free");
    }
    public static void g_queue_free ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.g_queue_free$MH, "g_queue_free");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_free_full$MH() {
        return RuntimeHelper.requireNonNull(constants$250.g_queue_free_full$MH,"g_queue_free_full");
    }
    public static void g_queue_free_full ( Addressable queue,  Addressable free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.g_queue_free_full$MH, "g_queue_free_full");
        try {
            mh$.invokeExact(queue, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_init$MH() {
        return RuntimeHelper.requireNonNull(constants$250.g_queue_init$MH,"g_queue_init");
    }
    public static void g_queue_init ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.g_queue_init$MH, "g_queue_init");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$250.g_queue_clear$MH,"g_queue_clear");
    }
    public static void g_queue_clear ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$250.g_queue_clear$MH, "g_queue_clear");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$251.g_queue_is_empty$MH,"g_queue_is_empty");
    }
    public static int g_queue_is_empty ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.g_queue_is_empty$MH, "g_queue_is_empty");
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_clear_full$MH() {
        return RuntimeHelper.requireNonNull(constants$251.g_queue_clear_full$MH,"g_queue_clear_full");
    }
    public static void g_queue_clear_full ( Addressable queue,  Addressable free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.g_queue_clear_full$MH, "g_queue_clear_full");
        try {
            mh$.invokeExact(queue, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$251.g_queue_get_length$MH,"g_queue_get_length");
    }
    public static int g_queue_get_length ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.g_queue_get_length$MH, "g_queue_get_length");
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_reverse$MH() {
        return RuntimeHelper.requireNonNull(constants$251.g_queue_reverse$MH,"g_queue_reverse");
    }
    public static void g_queue_reverse ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.g_queue_reverse$MH, "g_queue_reverse");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$251.g_queue_copy$MH,"g_queue_copy");
    }
    public static MemoryAddress g_queue_copy ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.g_queue_copy$MH, "g_queue_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$251.g_queue_foreach$MH,"g_queue_foreach");
    }
    public static void g_queue_foreach ( Addressable queue,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$251.g_queue_foreach$MH, "g_queue_foreach");
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_find$MH() {
        return RuntimeHelper.requireNonNull(constants$252.g_queue_find$MH,"g_queue_find");
    }
    public static MemoryAddress g_queue_find ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.g_queue_find$MH, "g_queue_find");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_find_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$252.g_queue_find_custom$MH,"g_queue_find_custom");
    }
    public static MemoryAddress g_queue_find_custom ( Addressable queue,  Addressable data,  Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.g_queue_find_custom$MH, "g_queue_find_custom");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, data, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$252.g_queue_sort$MH,"g_queue_sort");
    }
    public static void g_queue_sort ( Addressable queue,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.g_queue_sort$MH, "g_queue_sort");
        try {
            mh$.invokeExact(queue, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_head$MH() {
        return RuntimeHelper.requireNonNull(constants$252.g_queue_push_head$MH,"g_queue_push_head");
    }
    public static void g_queue_push_head ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.g_queue_push_head$MH, "g_queue_push_head");
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_tail$MH() {
        return RuntimeHelper.requireNonNull(constants$252.g_queue_push_tail$MH,"g_queue_push_tail");
    }
    public static void g_queue_push_tail ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.g_queue_push_tail$MH, "g_queue_push_tail");
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$252.g_queue_push_nth$MH,"g_queue_push_nth");
    }
    public static void g_queue_push_nth ( Addressable queue,  Addressable data,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$252.g_queue_push_nth$MH, "g_queue_push_nth");
        try {
            mh$.invokeExact(queue, data, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_head$MH() {
        return RuntimeHelper.requireNonNull(constants$253.g_queue_pop_head$MH,"g_queue_pop_head");
    }
    public static MemoryAddress g_queue_pop_head ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.g_queue_pop_head$MH, "g_queue_pop_head");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_tail$MH() {
        return RuntimeHelper.requireNonNull(constants$253.g_queue_pop_tail$MH,"g_queue_pop_tail");
    }
    public static MemoryAddress g_queue_pop_tail ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.g_queue_pop_tail$MH, "g_queue_pop_tail");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$253.g_queue_pop_nth$MH,"g_queue_pop_nth");
    }
    public static MemoryAddress g_queue_pop_nth ( Addressable queue,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.g_queue_pop_nth$MH, "g_queue_pop_nth");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_head$MH() {
        return RuntimeHelper.requireNonNull(constants$253.g_queue_peek_head$MH,"g_queue_peek_head");
    }
    public static MemoryAddress g_queue_peek_head ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.g_queue_peek_head$MH, "g_queue_peek_head");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_tail$MH() {
        return RuntimeHelper.requireNonNull(constants$253.g_queue_peek_tail$MH,"g_queue_peek_tail");
    }
    public static MemoryAddress g_queue_peek_tail ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.g_queue_peek_tail$MH, "g_queue_peek_tail");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$253.g_queue_peek_nth$MH,"g_queue_peek_nth");
    }
    public static MemoryAddress g_queue_peek_nth ( Addressable queue,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$253.g_queue_peek_nth$MH, "g_queue_peek_nth");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_index$MH() {
        return RuntimeHelper.requireNonNull(constants$254.g_queue_index$MH,"g_queue_index");
    }
    public static int g_queue_index ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.g_queue_index$MH, "g_queue_index");
        try {
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$254.g_queue_remove$MH,"g_queue_remove");
    }
    public static int g_queue_remove ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.g_queue_remove$MH, "g_queue_remove");
        try {
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_remove_all$MH() {
        return RuntimeHelper.requireNonNull(constants$254.g_queue_remove_all$MH,"g_queue_remove_all");
    }
    public static int g_queue_remove_all ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.g_queue_remove_all$MH, "g_queue_remove_all");
        try {
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$254.g_queue_insert_before$MH,"g_queue_insert_before");
    }
    public static void g_queue_insert_before ( Addressable queue,  Addressable sibling,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.g_queue_insert_before$MH, "g_queue_insert_before");
        try {
            mh$.invokeExact(queue, sibling, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_before_link$MH() {
        return RuntimeHelper.requireNonNull(constants$254.g_queue_insert_before_link$MH,"g_queue_insert_before_link");
    }
    public static void g_queue_insert_before_link ( Addressable queue,  Addressable sibling,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.g_queue_insert_before_link$MH, "g_queue_insert_before_link");
        try {
            mh$.invokeExact(queue, sibling, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_after$MH() {
        return RuntimeHelper.requireNonNull(constants$254.g_queue_insert_after$MH,"g_queue_insert_after");
    }
    public static void g_queue_insert_after ( Addressable queue,  Addressable sibling,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$254.g_queue_insert_after$MH, "g_queue_insert_after");
        try {
            mh$.invokeExact(queue, sibling, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_after_link$MH() {
        return RuntimeHelper.requireNonNull(constants$255.g_queue_insert_after_link$MH,"g_queue_insert_after_link");
    }
    public static void g_queue_insert_after_link ( Addressable queue,  Addressable sibling,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.g_queue_insert_after_link$MH, "g_queue_insert_after_link");
        try {
            mh$.invokeExact(queue, sibling, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$255.g_queue_insert_sorted$MH,"g_queue_insert_sorted");
    }
    public static void g_queue_insert_sorted ( Addressable queue,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.g_queue_insert_sorted$MH, "g_queue_insert_sorted");
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_head_link$MH() {
        return RuntimeHelper.requireNonNull(constants$255.g_queue_push_head_link$MH,"g_queue_push_head_link");
    }
    public static void g_queue_push_head_link ( Addressable queue,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.g_queue_push_head_link$MH, "g_queue_push_head_link");
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_tail_link$MH() {
        return RuntimeHelper.requireNonNull(constants$255.g_queue_push_tail_link$MH,"g_queue_push_tail_link");
    }
    public static void g_queue_push_tail_link ( Addressable queue,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.g_queue_push_tail_link$MH, "g_queue_push_tail_link");
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_nth_link$MH() {
        return RuntimeHelper.requireNonNull(constants$255.g_queue_push_nth_link$MH,"g_queue_push_nth_link");
    }
    public static void g_queue_push_nth_link ( Addressable queue,  int n,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.g_queue_push_nth_link$MH, "g_queue_push_nth_link");
        try {
            mh$.invokeExact(queue, n, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_head_link$MH() {
        return RuntimeHelper.requireNonNull(constants$255.g_queue_pop_head_link$MH,"g_queue_pop_head_link");
    }
    public static MemoryAddress g_queue_pop_head_link ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$255.g_queue_pop_head_link$MH, "g_queue_pop_head_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_tail_link$MH() {
        return RuntimeHelper.requireNonNull(constants$256.g_queue_pop_tail_link$MH,"g_queue_pop_tail_link");
    }
    public static MemoryAddress g_queue_pop_tail_link ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.g_queue_pop_tail_link$MH, "g_queue_pop_tail_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_nth_link$MH() {
        return RuntimeHelper.requireNonNull(constants$256.g_queue_pop_nth_link$MH,"g_queue_pop_nth_link");
    }
    public static MemoryAddress g_queue_pop_nth_link ( Addressable queue,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.g_queue_pop_nth_link$MH, "g_queue_pop_nth_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_head_link$MH() {
        return RuntimeHelper.requireNonNull(constants$256.g_queue_peek_head_link$MH,"g_queue_peek_head_link");
    }
    public static MemoryAddress g_queue_peek_head_link ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.g_queue_peek_head_link$MH, "g_queue_peek_head_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_tail_link$MH() {
        return RuntimeHelper.requireNonNull(constants$256.g_queue_peek_tail_link$MH,"g_queue_peek_tail_link");
    }
    public static MemoryAddress g_queue_peek_tail_link ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.g_queue_peek_tail_link$MH, "g_queue_peek_tail_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_nth_link$MH() {
        return RuntimeHelper.requireNonNull(constants$256.g_queue_peek_nth_link$MH,"g_queue_peek_nth_link");
    }
    public static MemoryAddress g_queue_peek_nth_link ( Addressable queue,  int n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.g_queue_peek_nth_link$MH, "g_queue_peek_nth_link");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_link_index$MH() {
        return RuntimeHelper.requireNonNull(constants$256.g_queue_link_index$MH,"g_queue_link_index");
    }
    public static int g_queue_link_index ( Addressable queue,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$256.g_queue_link_index$MH, "g_queue_link_index");
        try {
            return (int)mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$257.g_queue_unlink$MH,"g_queue_unlink");
    }
    public static void g_queue_unlink ( Addressable queue,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.g_queue_unlink$MH, "g_queue_unlink");
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_delete_link$MH() {
        return RuntimeHelper.requireNonNull(constants$257.g_queue_delete_link$MH,"g_queue_delete_link");
    }
    public static void g_queue_delete_link ( Addressable queue,  Addressable link_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.g_queue_delete_link$MH, "g_queue_delete_link");
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_new_with_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$257.g_rand_new_with_seed$MH,"g_rand_new_with_seed");
    }
    public static MemoryAddress g_rand_new_with_seed ( int seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.g_rand_new_with_seed$MH, "g_rand_new_with_seed");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_new_with_seed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$257.g_rand_new_with_seed_array$MH,"g_rand_new_with_seed_array");
    }
    public static MemoryAddress g_rand_new_with_seed_array ( Addressable seed,  int seed_length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.g_rand_new_with_seed_array$MH, "g_rand_new_with_seed_array");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seed, seed_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_new$MH() {
        return RuntimeHelper.requireNonNull(constants$257.g_rand_new$MH,"g_rand_new");
    }
    public static MemoryAddress g_rand_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.g_rand_new$MH, "g_rand_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_free$MH() {
        return RuntimeHelper.requireNonNull(constants$257.g_rand_free$MH,"g_rand_free");
    }
    public static void g_rand_free ( Addressable rand_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$257.g_rand_free$MH, "g_rand_free");
        try {
            mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$258.g_rand_copy$MH,"g_rand_copy");
    }
    public static MemoryAddress g_rand_copy ( Addressable rand_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.g_rand_copy$MH, "g_rand_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_set_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$258.g_rand_set_seed$MH,"g_rand_set_seed");
    }
    public static void g_rand_set_seed ( Addressable rand_,  int seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.g_rand_set_seed$MH, "g_rand_set_seed");
        try {
            mh$.invokeExact(rand_, seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_set_seed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$258.g_rand_set_seed_array$MH,"g_rand_set_seed_array");
    }
    public static void g_rand_set_seed_array ( Addressable rand_,  Addressable seed,  int seed_length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.g_rand_set_seed_array$MH, "g_rand_set_seed_array");
        try {
            mh$.invokeExact(rand_, seed, seed_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_int$MH() {
        return RuntimeHelper.requireNonNull(constants$258.g_rand_int$MH,"g_rand_int");
    }
    public static int g_rand_int ( Addressable rand_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.g_rand_int$MH, "g_rand_int");
        try {
            return (int)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$258.g_rand_int_range$MH,"g_rand_int_range");
    }
    public static int g_rand_int_range ( Addressable rand_,  int begin,  int end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.g_rand_int_range$MH, "g_rand_int_range");
        try {
            return (int)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_double$MH() {
        return RuntimeHelper.requireNonNull(constants$258.g_rand_double$MH,"g_rand_double");
    }
    public static double g_rand_double ( Addressable rand_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$258.g_rand_double$MH, "g_rand_double");
        try {
            return (double)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$259.g_rand_double_range$MH,"g_rand_double_range");
    }
    public static double g_rand_double_range ( Addressable rand_,  double begin,  double end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.g_rand_double_range$MH, "g_rand_double_range");
        try {
            return (double)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_set_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$259.g_random_set_seed$MH,"g_random_set_seed");
    }
    public static void g_random_set_seed ( int seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.g_random_set_seed$MH, "g_random_set_seed");
        try {
            mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_int$MH() {
        return RuntimeHelper.requireNonNull(constants$259.g_random_int$MH,"g_random_int");
    }
    public static int g_random_int () {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.g_random_int$MH, "g_random_int");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$259.g_random_int_range$MH,"g_random_int_range");
    }
    public static int g_random_int_range ( int begin,  int end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.g_random_int_range$MH, "g_random_int_range");
        try {
            return (int)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_double$MH() {
        return RuntimeHelper.requireNonNull(constants$259.g_random_double$MH,"g_random_double");
    }
    public static double g_random_double () {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.g_random_double$MH, "g_random_double");
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$259.g_random_double_range$MH,"g_random_double_range");
    }
    public static double g_random_double_range ( double begin,  double end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$259.g_random_double_range$MH, "g_random_double_range");
        try {
            return (double)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$260.g_rc_box_alloc$MH,"g_rc_box_alloc");
    }
    public static MemoryAddress g_rc_box_alloc ( long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.g_rc_box_alloc$MH, "g_rc_box_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$260.g_rc_box_alloc0$MH,"g_rc_box_alloc0");
    }
    public static MemoryAddress g_rc_box_alloc0 ( long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.g_rc_box_alloc0$MH, "g_rc_box_alloc0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$260.g_rc_box_dup$MH,"g_rc_box_dup");
    }
    public static MemoryAddress g_rc_box_dup ( long block_size,  Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.g_rc_box_dup$MH, "g_rc_box_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$260.g_rc_box_acquire$MH,"g_rc_box_acquire");
    }
    public static MemoryAddress g_rc_box_acquire ( Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.g_rc_box_acquire$MH, "g_rc_box_acquire");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_release$MH() {
        return RuntimeHelper.requireNonNull(constants$260.g_rc_box_release$MH,"g_rc_box_release");
    }
    public static void g_rc_box_release ( Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.g_rc_box_release$MH, "g_rc_box_release");
        try {
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_release_full$MH() {
        return RuntimeHelper.requireNonNull(constants$260.g_rc_box_release_full$MH,"g_rc_box_release_full");
    }
    public static void g_rc_box_release_full ( Addressable mem_block,  Addressable clear_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$260.g_rc_box_release_full$MH, "g_rc_box_release_full");
        try {
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$261.g_rc_box_get_size$MH,"g_rc_box_get_size");
    }
    public static long g_rc_box_get_size ( Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.g_rc_box_get_size$MH, "g_rc_box_get_size");
        try {
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_alloc$MH,"g_atomic_rc_box_alloc");
    }
    public static MemoryAddress g_atomic_rc_box_alloc ( long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_alloc$MH, "g_atomic_rc_box_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_alloc0$MH,"g_atomic_rc_box_alloc0");
    }
    public static MemoryAddress g_atomic_rc_box_alloc0 ( long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_alloc0$MH, "g_atomic_rc_box_alloc0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_dup$MH,"g_atomic_rc_box_dup");
    }
    public static MemoryAddress g_atomic_rc_box_dup ( long block_size,  Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_dup$MH, "g_atomic_rc_box_dup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_acquire$MH,"g_atomic_rc_box_acquire");
    }
    public static MemoryAddress g_atomic_rc_box_acquire ( Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_acquire$MH, "g_atomic_rc_box_acquire");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_release$MH() {
        return RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_release$MH,"g_atomic_rc_box_release");
    }
    public static void g_atomic_rc_box_release ( Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$261.g_atomic_rc_box_release$MH, "g_atomic_rc_box_release");
        try {
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_release_full$MH() {
        return RuntimeHelper.requireNonNull(constants$262.g_atomic_rc_box_release_full$MH,"g_atomic_rc_box_release_full");
    }
    public static void g_atomic_rc_box_release_full ( Addressable mem_block,  Addressable clear_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.g_atomic_rc_box_release_full$MH, "g_atomic_rc_box_release_full");
        try {
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$262.g_atomic_rc_box_get_size$MH,"g_atomic_rc_box_get_size");
    }
    public static long g_atomic_rc_box_get_size ( Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.g_atomic_rc_box_get_size$MH, "g_atomic_rc_box_get_size");
        try {
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_init$MH() {
        return RuntimeHelper.requireNonNull(constants$262.g_ref_count_init$MH,"g_ref_count_init");
    }
    public static void g_ref_count_init ( Addressable rc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.g_ref_count_init$MH, "g_ref_count_init");
        try {
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$262.g_ref_count_inc$MH,"g_ref_count_inc");
    }
    public static void g_ref_count_inc ( Addressable rc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.g_ref_count_inc$MH, "g_ref_count_inc");
        try {
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_dec$MH() {
        return RuntimeHelper.requireNonNull(constants$262.g_ref_count_dec$MH,"g_ref_count_dec");
    }
    public static int g_ref_count_dec ( Addressable rc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.g_ref_count_dec$MH, "g_ref_count_dec");
        try {
            return (int)mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$262.g_ref_count_compare$MH,"g_ref_count_compare");
    }
    public static int g_ref_count_compare ( Addressable rc,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$262.g_ref_count_compare$MH, "g_ref_count_compare");
        try {
            return (int)mh$.invokeExact(rc, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_init$MH() {
        return RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_init$MH,"g_atomic_ref_count_init");
    }
    public static void g_atomic_ref_count_init ( Addressable arc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_init$MH, "g_atomic_ref_count_init");
        try {
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_inc$MH,"g_atomic_ref_count_inc");
    }
    public static void g_atomic_ref_count_inc ( Addressable arc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_inc$MH, "g_atomic_ref_count_inc");
        try {
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_dec$MH() {
        return RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_dec$MH,"g_atomic_ref_count_dec");
    }
    public static int g_atomic_ref_count_dec ( Addressable arc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_dec$MH, "g_atomic_ref_count_dec");
        try {
            return (int)mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_compare$MH,"g_atomic_ref_count_compare");
    }
    public static int g_atomic_ref_count_compare ( Addressable arc,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.g_atomic_ref_count_compare$MH, "g_atomic_ref_count_compare");
        try {
            return (int)mh$.invokeExact(arc, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new$MH() {
        return RuntimeHelper.requireNonNull(constants$263.g_ref_string_new$MH,"g_ref_string_new");
    }
    public static MemoryAddress g_ref_string_new ( Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.g_ref_string_new$MH, "g_ref_string_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new_len$MH() {
        return RuntimeHelper.requireNonNull(constants$263.g_ref_string_new_len$MH,"g_ref_string_new_len");
    }
    public static MemoryAddress g_ref_string_new_len ( Addressable str,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$263.g_ref_string_new_len$MH, "g_ref_string_new_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new_intern$MH() {
        return RuntimeHelper.requireNonNull(constants$264.g_ref_string_new_intern$MH,"g_ref_string_new_intern");
    }
    public static MemoryAddress g_ref_string_new_intern ( Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.g_ref_string_new_intern$MH, "g_ref_string_new_intern");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$264.g_ref_string_acquire$MH,"g_ref_string_acquire");
    }
    public static MemoryAddress g_ref_string_acquire ( Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.g_ref_string_acquire$MH, "g_ref_string_acquire");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_release$MH() {
        return RuntimeHelper.requireNonNull(constants$264.g_ref_string_release$MH,"g_ref_string_release");
    }
    public static void g_ref_string_release ( Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.g_ref_string_release$MH, "g_ref_string_release");
        try {
            mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_length$MH() {
        return RuntimeHelper.requireNonNull(constants$264.g_ref_string_length$MH,"g_ref_string_length");
    }
    public static long g_ref_string_length ( Addressable str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.g_ref_string_length$MH, "g_ref_string_length");
        try {
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfByte GRefString = Constants$root.C_CHAR$LAYOUT;
    public static int G_REGEX_ERROR_COMPILE() {
        return (int)0L;
    }
    public static int G_REGEX_ERROR_OPTIMIZE() {
        return (int)1L;
    }
    public static int G_REGEX_ERROR_REPLACE() {
        return (int)2L;
    }
    public static int G_REGEX_ERROR_MATCH() {
        return (int)3L;
    }
    public static int G_REGEX_ERROR_INTERNAL() {
        return (int)4L;
    }
    public static int G_REGEX_ERROR_STRAY_BACKSLASH() {
        return (int)101L;
    }
    public static int G_REGEX_ERROR_MISSING_CONTROL_CHAR() {
        return (int)102L;
    }
    public static int G_REGEX_ERROR_UNRECOGNIZED_ESCAPE() {
        return (int)103L;
    }
    public static int G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER() {
        return (int)104L;
    }
    public static int G_REGEX_ERROR_QUANTIFIER_TOO_BIG() {
        return (int)105L;
    }
    public static int G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS() {
        return (int)106L;
    }
    public static int G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS() {
        return (int)107L;
    }
    public static int G_REGEX_ERROR_RANGE_OUT_OF_ORDER() {
        return (int)108L;
    }
    public static int G_REGEX_ERROR_NOTHING_TO_REPEAT() {
        return (int)109L;
    }
    public static int G_REGEX_ERROR_UNRECOGNIZED_CHARACTER() {
        return (int)112L;
    }
    public static int G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS() {
        return (int)113L;
    }
    public static int G_REGEX_ERROR_UNMATCHED_PARENTHESIS() {
        return (int)114L;
    }
    public static int G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE() {
        return (int)115L;
    }
    public static int G_REGEX_ERROR_UNTERMINATED_COMMENT() {
        return (int)118L;
    }
    public static int G_REGEX_ERROR_EXPRESSION_TOO_LARGE() {
        return (int)120L;
    }
    public static int G_REGEX_ERROR_MEMORY_ERROR() {
        return (int)121L;
    }
    public static int G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND() {
        return (int)125L;
    }
    public static int G_REGEX_ERROR_MALFORMED_CONDITION() {
        return (int)126L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES() {
        return (int)127L;
    }
    public static int G_REGEX_ERROR_ASSERTION_EXPECTED() {
        return (int)128L;
    }
    public static int G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME() {
        return (int)130L;
    }
    public static int G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED() {
        return (int)131L;
    }
    public static int G_REGEX_ERROR_HEX_CODE_TOO_LARGE() {
        return (int)134L;
    }
    public static int G_REGEX_ERROR_INVALID_CONDITION() {
        return (int)135L;
    }
    public static int G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND() {
        return (int)136L;
    }
    public static int G_REGEX_ERROR_INFINITE_LOOP() {
        return (int)140L;
    }
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR() {
        return (int)142L;
    }
    public static int G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME() {
        return (int)143L;
    }
    public static int G_REGEX_ERROR_MALFORMED_PROPERTY() {
        return (int)146L;
    }
    public static int G_REGEX_ERROR_UNKNOWN_PROPERTY() {
        return (int)147L;
    }
    public static int G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG() {
        return (int)148L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_SUBPATTERNS() {
        return (int)149L;
    }
    public static int G_REGEX_ERROR_INVALID_OCTAL_VALUE() {
        return (int)151L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE() {
        return (int)154L;
    }
    public static int G_REGEX_ERROR_DEFINE_REPETION() {
        return (int)155L;
    }
    public static int G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS() {
        return (int)156L;
    }
    public static int G_REGEX_ERROR_MISSING_BACK_REFERENCE() {
        return (int)157L;
    }
    public static int G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE() {
        return (int)158L;
    }
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN() {
        return (int)159L;
    }
    public static int G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB() {
        return (int)160L;
    }
    public static int G_REGEX_ERROR_NUMBER_TOO_BIG() {
        return (int)161L;
    }
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME() {
        return (int)162L;
    }
    public static int G_REGEX_ERROR_MISSING_DIGIT() {
        return (int)163L;
    }
    public static int G_REGEX_ERROR_INVALID_DATA_CHARACTER() {
        return (int)164L;
    }
    public static int G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME() {
        return (int)165L;
    }
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED() {
        return (int)166L;
    }
    public static int G_REGEX_ERROR_INVALID_CONTROL_CHAR() {
        return (int)168L;
    }
    public static int G_REGEX_ERROR_MISSING_NAME() {
        return (int)169L;
    }
    public static int G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS() {
        return (int)171L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES() {
        return (int)172L;
    }
    public static int G_REGEX_ERROR_NAME_TOO_LONG() {
        return (int)175L;
    }
    public static int G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE() {
        return (int)176L;
    }
    public static MethodHandle g_regex_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$264.g_regex_error_quark$MH,"g_regex_error_quark");
    }
    public static int g_regex_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$264.g_regex_error_quark$MH, "g_regex_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_REGEX_CASELESS() {
        return (int)1L;
    }
    public static int G_REGEX_MULTILINE() {
        return (int)2L;
    }
    public static int G_REGEX_DOTALL() {
        return (int)4L;
    }
    public static int G_REGEX_EXTENDED() {
        return (int)8L;
    }
    public static int G_REGEX_ANCHORED() {
        return (int)16L;
    }
    public static int G_REGEX_DOLLAR_ENDONLY() {
        return (int)32L;
    }
    public static int G_REGEX_UNGREEDY() {
        return (int)512L;
    }
    public static int G_REGEX_RAW() {
        return (int)2048L;
    }
    public static int G_REGEX_NO_AUTO_CAPTURE() {
        return (int)4096L;
    }
    public static int G_REGEX_OPTIMIZE() {
        return (int)8192L;
    }
    public static int G_REGEX_FIRSTLINE() {
        return (int)262144L;
    }
    public static int G_REGEX_DUPNAMES() {
        return (int)524288L;
    }
    public static int G_REGEX_NEWLINE_CR() {
        return (int)1048576L;
    }
    public static int G_REGEX_NEWLINE_LF() {
        return (int)2097152L;
    }
    public static int G_REGEX_NEWLINE_CRLF() {
        return (int)3145728L;
    }
    public static int G_REGEX_NEWLINE_ANYCRLF() {
        return (int)5242880L;
    }
    public static int G_REGEX_BSR_ANYCRLF() {
        return (int)8388608L;
    }
    public static int G_REGEX_JAVASCRIPT_COMPAT() {
        return (int)33554432L;
    }
    public static int G_REGEX_MATCH_ANCHORED() {
        return (int)16L;
    }
    public static int G_REGEX_MATCH_NOTBOL() {
        return (int)128L;
    }
    public static int G_REGEX_MATCH_NOTEOL() {
        return (int)256L;
    }
    public static int G_REGEX_MATCH_NOTEMPTY() {
        return (int)1024L;
    }
    public static int G_REGEX_MATCH_PARTIAL() {
        return (int)32768L;
    }
    public static int G_REGEX_MATCH_NEWLINE_CR() {
        return (int)1048576L;
    }
    public static int G_REGEX_MATCH_NEWLINE_LF() {
        return (int)2097152L;
    }
    public static int G_REGEX_MATCH_NEWLINE_CRLF() {
        return (int)3145728L;
    }
    public static int G_REGEX_MATCH_NEWLINE_ANY() {
        return (int)4194304L;
    }
    public static int G_REGEX_MATCH_NEWLINE_ANYCRLF() {
        return (int)5242880L;
    }
    public static int G_REGEX_MATCH_BSR_ANYCRLF() {
        return (int)8388608L;
    }
    public static int G_REGEX_MATCH_BSR_ANY() {
        return (int)16777216L;
    }
    public static int G_REGEX_MATCH_PARTIAL_SOFT() {
        return (int)32768L;
    }
    public static int G_REGEX_MATCH_PARTIAL_HARD() {
        return (int)134217728L;
    }
    public static int G_REGEX_MATCH_NOTEMPTY_ATSTART() {
        return (int)268435456L;
    }
    public static MethodHandle g_regex_new$MH() {
        return RuntimeHelper.requireNonNull(constants$265.g_regex_new$MH,"g_regex_new");
    }
    public static MemoryAddress g_regex_new ( Addressable pattern,  int compile_options,  int match_options,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.g_regex_new$MH, "g_regex_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pattern, compile_options, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$265.g_regex_ref$MH,"g_regex_ref");
    }
    public static MemoryAddress g_regex_ref ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.g_regex_ref$MH, "g_regex_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$265.g_regex_unref$MH,"g_regex_unref");
    }
    public static void g_regex_unref ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.g_regex_unref$MH, "g_regex_unref");
        try {
            mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_pattern$MH() {
        return RuntimeHelper.requireNonNull(constants$265.g_regex_get_pattern$MH,"g_regex_get_pattern");
    }
    public static MemoryAddress g_regex_get_pattern ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.g_regex_get_pattern$MH, "g_regex_get_pattern");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_max_backref$MH() {
        return RuntimeHelper.requireNonNull(constants$265.g_regex_get_max_backref$MH,"g_regex_get_max_backref");
    }
    public static int g_regex_get_max_backref ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$265.g_regex_get_max_backref$MH, "g_regex_get_max_backref");
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_capture_count$MH() {
        return RuntimeHelper.requireNonNull(constants$266.g_regex_get_capture_count$MH,"g_regex_get_capture_count");
    }
    public static int g_regex_get_capture_count ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.g_regex_get_capture_count$MH, "g_regex_get_capture_count");
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_has_cr_or_lf$MH() {
        return RuntimeHelper.requireNonNull(constants$266.g_regex_get_has_cr_or_lf$MH,"g_regex_get_has_cr_or_lf");
    }
    public static int g_regex_get_has_cr_or_lf ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.g_regex_get_has_cr_or_lf$MH, "g_regex_get_has_cr_or_lf");
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_max_lookbehind$MH() {
        return RuntimeHelper.requireNonNull(constants$266.g_regex_get_max_lookbehind$MH,"g_regex_get_max_lookbehind");
    }
    public static int g_regex_get_max_lookbehind ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.g_regex_get_max_lookbehind$MH, "g_regex_get_max_lookbehind");
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_string_number$MH() {
        return RuntimeHelper.requireNonNull(constants$266.g_regex_get_string_number$MH,"g_regex_get_string_number");
    }
    public static int g_regex_get_string_number ( Addressable regex,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.g_regex_get_string_number$MH, "g_regex_get_string_number");
        try {
            return (int)mh$.invokeExact(regex, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_escape_string$MH() {
        return RuntimeHelper.requireNonNull(constants$266.g_regex_escape_string$MH,"g_regex_escape_string");
    }
    public static MemoryAddress g_regex_escape_string ( Addressable string,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.g_regex_escape_string$MH, "g_regex_escape_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_escape_nul$MH() {
        return RuntimeHelper.requireNonNull(constants$266.g_regex_escape_nul$MH,"g_regex_escape_nul");
    }
    public static MemoryAddress g_regex_escape_nul ( Addressable string,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$266.g_regex_escape_nul$MH, "g_regex_escape_nul");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_compile_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_regex_get_compile_flags$MH,"g_regex_get_compile_flags");
    }
    public static int g_regex_get_compile_flags ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.g_regex_get_compile_flags$MH, "g_regex_get_compile_flags");
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_match_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_regex_get_match_flags$MH,"g_regex_get_match_flags");
    }
    public static int g_regex_get_match_flags ( Addressable regex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.g_regex_get_match_flags$MH, "g_regex_get_match_flags");
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_regex_match_simple$MH,"g_regex_match_simple");
    }
    public static int g_regex_match_simple ( Addressable pattern,  Addressable string,  int compile_options,  int match_options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.g_regex_match_simple$MH, "g_regex_match_simple");
        try {
            return (int)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_regex_match$MH,"g_regex_match");
    }
    public static int g_regex_match ( Addressable regex,  Addressable string,  int match_options,  Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.g_regex_match$MH, "g_regex_match");
        try {
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_full$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_regex_match_full$MH,"g_regex_match_full");
    }
    public static int g_regex_match_full ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  Addressable match_info,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.g_regex_match_full$MH, "g_regex_match_full");
        try {
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_all$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_regex_match_all$MH,"g_regex_match_all");
    }
    public static int g_regex_match_all ( Addressable regex,  Addressable string,  int match_options,  Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$267.g_regex_match_all$MH, "g_regex_match_all");
        try {
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_all_full$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_regex_match_all_full$MH,"g_regex_match_all_full");
    }
    public static int g_regex_match_all_full ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  Addressable match_info,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.g_regex_match_all_full$MH, "g_regex_match_all_full");
        try {
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_regex_split_simple$MH,"g_regex_split_simple");
    }
    public static MemoryAddress g_regex_split_simple ( Addressable pattern,  Addressable string,  int compile_options,  int match_options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.g_regex_split_simple$MH, "g_regex_split_simple");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_regex_split$MH,"g_regex_split");
    }
    public static MemoryAddress g_regex_split ( Addressable regex,  Addressable string,  int match_options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.g_regex_split$MH, "g_regex_split");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(regex, string, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split_full$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_regex_split_full$MH,"g_regex_split_full");
    }
    public static MemoryAddress g_regex_split_full ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  int max_tokens,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.g_regex_split_full$MH, "g_regex_split_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, match_options, max_tokens, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_regex_replace$MH,"g_regex_replace");
    }
    public static MemoryAddress g_regex_replace ( Addressable regex,  Addressable string,  long string_len,  int start_position,  Addressable replacement,  int match_options,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.g_regex_replace$MH, "g_regex_replace");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_regex_replace_literal$MH,"g_regex_replace_literal");
    }
    public static MemoryAddress g_regex_replace_literal ( Addressable regex,  Addressable string,  long string_len,  int start_position,  Addressable replacement,  int match_options,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$268.g_regex_replace_literal$MH, "g_regex_replace_literal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace_eval$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_regex_replace_eval$MH,"g_regex_replace_eval");
    }
    public static MemoryAddress g_regex_replace_eval ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  Addressable eval,  Addressable user_data,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.g_regex_replace_eval$MH, "g_regex_replace_eval");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, match_options, eval, user_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_check_replacement$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_regex_check_replacement$MH,"g_regex_check_replacement");
    }
    public static int g_regex_check_replacement ( Addressable replacement,  Addressable has_references,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.g_regex_check_replacement$MH, "g_regex_check_replacement");
        try {
            return (int)mh$.invokeExact(replacement, has_references, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_regex$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_match_info_get_regex$MH,"g_match_info_get_regex");
    }
    public static MemoryAddress g_match_info_get_regex ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.g_match_info_get_regex$MH, "g_match_info_get_regex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_match_info_get_string$MH,"g_match_info_get_string");
    }
    public static MemoryAddress g_match_info_get_string ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.g_match_info_get_string$MH, "g_match_info_get_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_match_info_ref$MH,"g_match_info_ref");
    }
    public static MemoryAddress g_match_info_ref ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.g_match_info_ref$MH, "g_match_info_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_match_info_unref$MH,"g_match_info_unref");
    }
    public static void g_match_info_unref ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$269.g_match_info_unref$MH, "g_match_info_unref");
        try {
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_free$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_match_info_free$MH,"g_match_info_free");
    }
    public static void g_match_info_free ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.g_match_info_free$MH, "g_match_info_free");
        try {
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_next$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_match_info_next$MH,"g_match_info_next");
    }
    public static int g_match_info_next ( Addressable match_info,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.g_match_info_next$MH, "g_match_info_next");
        try {
            return (int)mh$.invokeExact(match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_match_info_matches$MH,"g_match_info_matches");
    }
    public static int g_match_info_matches ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.g_match_info_matches$MH, "g_match_info_matches");
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_match_count$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_match_info_get_match_count$MH,"g_match_info_get_match_count");
    }
    public static int g_match_info_get_match_count ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.g_match_info_get_match_count$MH, "g_match_info_get_match_count");
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_is_partial_match$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_match_info_is_partial_match$MH,"g_match_info_is_partial_match");
    }
    public static int g_match_info_is_partial_match ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.g_match_info_is_partial_match$MH, "g_match_info_is_partial_match");
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_expand_references$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_match_info_expand_references$MH,"g_match_info_expand_references");
    }
    public static MemoryAddress g_match_info_expand_references ( Addressable match_info,  Addressable string_to_expand,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$270.g_match_info_expand_references$MH, "g_match_info_expand_references");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(match_info, string_to_expand, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch$MH,"g_match_info_fetch");
    }
    public static MemoryAddress g_match_info_fetch ( Addressable match_info,  int match_num) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch$MH, "g_match_info_fetch");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(match_info, match_num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_pos$MH,"g_match_info_fetch_pos");
    }
    public static int g_match_info_fetch_pos ( Addressable match_info,  int match_num,  Addressable start_pos,  Addressable end_pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_pos$MH, "g_match_info_fetch_pos");
        try {
            return (int)mh$.invokeExact(match_info, match_num, start_pos, end_pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_named$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_named$MH,"g_match_info_fetch_named");
    }
    public static MemoryAddress g_match_info_fetch_named ( Addressable match_info,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_named$MH, "g_match_info_fetch_named");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(match_info, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_named_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_named_pos$MH,"g_match_info_fetch_named_pos");
    }
    public static int g_match_info_fetch_named_pos ( Addressable match_info,  Addressable name,  Addressable start_pos,  Addressable end_pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_named_pos$MH, "g_match_info_fetch_named_pos");
        try {
            return (int)mh$.invokeExact(match_info, name, start_pos, end_pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_all$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_all$MH,"g_match_info_fetch_all");
    }
    public static MemoryAddress g_match_info_fetch_all ( Addressable match_info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$271.g_match_info_fetch_all$MH, "g_match_info_fetch_all");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_ERR_UNKNOWN() {
        return (int)0L;
    }
    public static int G_ERR_UNEXP_EOF() {
        return (int)1L;
    }
    public static int G_ERR_UNEXP_EOF_IN_STRING() {
        return (int)2L;
    }
    public static int G_ERR_UNEXP_EOF_IN_COMMENT() {
        return (int)3L;
    }
    public static int G_ERR_NON_DIGIT_IN_CONST() {
        return (int)4L;
    }
    public static int G_ERR_DIGIT_RADIX() {
        return (int)5L;
    }
    public static int G_ERR_FLOAT_RADIX() {
        return (int)6L;
    }
    public static int G_ERR_FLOAT_MALFORMED() {
        return (int)7L;
    }
    public static int G_TOKEN_EOF() {
        return (int)0L;
    }
    public static int G_TOKEN_LEFT_PAREN() {
        return (int)40L;
    }
    public static int G_TOKEN_RIGHT_PAREN() {
        return (int)41L;
    }
    public static int G_TOKEN_LEFT_CURLY() {
        return (int)123L;
    }
    public static int G_TOKEN_RIGHT_CURLY() {
        return (int)125L;
    }
    public static int G_TOKEN_LEFT_BRACE() {
        return (int)91L;
    }
    public static int G_TOKEN_RIGHT_BRACE() {
        return (int)93L;
    }
    public static int G_TOKEN_EQUAL_SIGN() {
        return (int)61L;
    }
    public static int G_TOKEN_COMMA() {
        return (int)44L;
    }
    public static int G_TOKEN_NONE() {
        return (int)256L;
    }
    public static int G_TOKEN_ERROR() {
        return (int)257L;
    }
    public static int G_TOKEN_CHAR() {
        return (int)258L;
    }
    public static int G_TOKEN_BINARY() {
        return (int)259L;
    }
    public static int G_TOKEN_OCTAL() {
        return (int)260L;
    }
    public static int G_TOKEN_INT() {
        return (int)261L;
    }
    public static int G_TOKEN_HEX() {
        return (int)262L;
    }
    public static int G_TOKEN_FLOAT() {
        return (int)263L;
    }
    public static int G_TOKEN_STRING() {
        return (int)264L;
    }
    public static int G_TOKEN_SYMBOL() {
        return (int)265L;
    }
    public static int G_TOKEN_IDENTIFIER() {
        return (int)266L;
    }
    public static int G_TOKEN_IDENTIFIER_NULL() {
        return (int)267L;
    }
    public static int G_TOKEN_COMMENT_SINGLE() {
        return (int)268L;
    }
    public static int G_TOKEN_COMMENT_MULTI() {
        return (int)269L;
    }
    public static int G_TOKEN_LAST() {
        return (int)270L;
    }
    public static MethodHandle g_scanner_new$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_scanner_new$MH,"g_scanner_new");
    }
    public static MemoryAddress g_scanner_new ( Addressable config_templ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.g_scanner_new$MH, "g_scanner_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(config_templ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_scanner_destroy$MH,"g_scanner_destroy");
    }
    public static void g_scanner_destroy ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.g_scanner_destroy$MH, "g_scanner_destroy");
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_input_file$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_scanner_input_file$MH,"g_scanner_input_file");
    }
    public static void g_scanner_input_file ( Addressable scanner,  int input_fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.g_scanner_input_file$MH, "g_scanner_input_file");
        try {
            mh$.invokeExact(scanner, input_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_sync_file_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_scanner_sync_file_offset$MH,"g_scanner_sync_file_offset");
    }
    public static void g_scanner_sync_file_offset ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.g_scanner_sync_file_offset$MH, "g_scanner_sync_file_offset");
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_input_text$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_scanner_input_text$MH,"g_scanner_input_text");
    }
    public static void g_scanner_input_text ( Addressable scanner,  Addressable text,  int text_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$272.g_scanner_input_text$MH, "g_scanner_input_text");
        try {
            mh$.invokeExact(scanner, text, text_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_get_next_token$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_scanner_get_next_token$MH,"g_scanner_get_next_token");
    }
    public static int g_scanner_get_next_token ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.g_scanner_get_next_token$MH, "g_scanner_get_next_token");
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_peek_next_token$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_scanner_peek_next_token$MH,"g_scanner_peek_next_token");
    }
    public static int g_scanner_peek_next_token ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.g_scanner_peek_next_token$MH, "g_scanner_peek_next_token");
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_token$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_token$MH,"g_scanner_cur_token");
    }
    public static int g_scanner_cur_token ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_token$MH, "g_scanner_cur_token");
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_value$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_value$MH,"g_scanner_cur_value");
    }
    public static MemorySegment g_scanner_cur_value ( SegmentAllocator allocator,  Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_value$MH, "g_scanner_cur_value");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment g_scanner_cur_value ( ResourceScope scope,  Addressable scanner) {
        return g_scanner_cur_value(SegmentAllocator.nativeAllocator(scope), scanner);
    }
    public static MethodHandle g_scanner_cur_line$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_line$MH,"g_scanner_cur_line");
    }
    public static int g_scanner_cur_line ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_line$MH, "g_scanner_cur_line");
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_position$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_position$MH,"g_scanner_cur_position");
    }
    public static int g_scanner_cur_position ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$273.g_scanner_cur_position$MH, "g_scanner_cur_position");
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_eof$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_scanner_eof$MH,"g_scanner_eof");
    }
    public static int g_scanner_eof ( Addressable scanner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.g_scanner_eof$MH, "g_scanner_eof");
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_set_scope$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_scanner_set_scope$MH,"g_scanner_set_scope");
    }
    public static int g_scanner_set_scope ( Addressable scanner,  int scope_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.g_scanner_set_scope$MH, "g_scanner_set_scope");
        try {
            return (int)mh$.invokeExact(scanner, scope_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_add_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_add_symbol$MH,"g_scanner_scope_add_symbol");
    }
    public static void g_scanner_scope_add_symbol ( Addressable scanner,  int scope_id,  Addressable symbol,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_add_symbol$MH, "g_scanner_scope_add_symbol");
        try {
            mh$.invokeExact(scanner, scope_id, symbol, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_remove_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_remove_symbol$MH,"g_scanner_scope_remove_symbol");
    }
    public static void g_scanner_scope_remove_symbol ( Addressable scanner,  int scope_id,  Addressable symbol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_remove_symbol$MH, "g_scanner_scope_remove_symbol");
        try {
            mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_lookup_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_lookup_symbol$MH,"g_scanner_scope_lookup_symbol");
    }
    public static MemoryAddress g_scanner_scope_lookup_symbol ( Addressable scanner,  int scope_id,  Addressable symbol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_lookup_symbol$MH, "g_scanner_scope_lookup_symbol");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_foreach_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_foreach_symbol$MH,"g_scanner_scope_foreach_symbol");
    }
    public static void g_scanner_scope_foreach_symbol ( Addressable scanner,  int scope_id,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$274.g_scanner_scope_foreach_symbol$MH, "g_scanner_scope_foreach_symbol");
        try {
            mh$.invokeExact(scanner, scope_id, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_lookup_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_scanner_lookup_symbol$MH,"g_scanner_lookup_symbol");
    }
    public static MemoryAddress g_scanner_lookup_symbol ( Addressable scanner,  Addressable symbol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.g_scanner_lookup_symbol$MH, "g_scanner_lookup_symbol");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(scanner, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_unexp_token$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_scanner_unexp_token$MH,"g_scanner_unexp_token");
    }
    public static void g_scanner_unexp_token ( Addressable scanner,  int expected_token,  Addressable identifier_spec,  Addressable symbol_spec,  Addressable symbol_name,  Addressable message,  int is_error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.g_scanner_unexp_token$MH, "g_scanner_unexp_token");
        try {
            mh$.invokeExact(scanner, expected_token, identifier_spec, symbol_spec, symbol_name, message, is_error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_error$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_scanner_error$MH,"g_scanner_error");
    }
    public static void g_scanner_error ( Addressable scanner,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.g_scanner_error$MH, "g_scanner_error");
        try {
            mh$.invokeExact(scanner, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_warn$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_scanner_warn$MH,"g_scanner_warn");
    }
    public static void g_scanner_warn ( Addressable scanner,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$275.g_scanner_warn$MH, "g_scanner_warn");
        try {
            mh$.invokeExact(scanner, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_new$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_sequence_new$MH,"g_sequence_new");
    }
    public static MemoryAddress g_sequence_new ( Addressable data_destroy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.g_sequence_new$MH, "g_sequence_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data_destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_free$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_sequence_free$MH,"g_sequence_free");
    }
    public static void g_sequence_free ( Addressable seq) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.g_sequence_free$MH, "g_sequence_free");
        try {
            mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_sequence_get_length$MH,"g_sequence_get_length");
    }
    public static int g_sequence_get_length ( Addressable seq) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.g_sequence_get_length$MH, "g_sequence_get_length");
        try {
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_sequence_foreach$MH,"g_sequence_foreach");
    }
    public static void g_sequence_foreach ( Addressable seq,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.g_sequence_foreach$MH, "g_sequence_foreach");
        try {
            mh$.invokeExact(seq, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_foreach_range$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_sequence_foreach_range$MH,"g_sequence_foreach_range");
    }
    public static void g_sequence_foreach_range ( Addressable begin,  Addressable end,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.g_sequence_foreach_range$MH, "g_sequence_foreach_range");
        try {
            mh$.invokeExact(begin, end, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_sequence_sort$MH,"g_sequence_sort");
    }
    public static void g_sequence_sort ( Addressable seq,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$276.g_sequence_sort$MH, "g_sequence_sort");
        try {
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_sequence_sort_iter$MH,"g_sequence_sort_iter");
    }
    public static void g_sequence_sort_iter ( Addressable seq,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.g_sequence_sort_iter$MH, "g_sequence_sort_iter");
        try {
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_sequence_is_empty$MH,"g_sequence_is_empty");
    }
    public static int g_sequence_is_empty ( Addressable seq) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.g_sequence_is_empty$MH, "g_sequence_is_empty");
        try {
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_begin_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_sequence_get_begin_iter$MH,"g_sequence_get_begin_iter");
    }
    public static MemoryAddress g_sequence_get_begin_iter ( Addressable seq) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.g_sequence_get_begin_iter$MH, "g_sequence_get_begin_iter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_end_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_sequence_get_end_iter$MH,"g_sequence_get_end_iter");
    }
    public static MemoryAddress g_sequence_get_end_iter ( Addressable seq) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.g_sequence_get_end_iter$MH, "g_sequence_get_end_iter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_iter_at_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_sequence_get_iter_at_pos$MH,"g_sequence_get_iter_at_pos");
    }
    public static MemoryAddress g_sequence_get_iter_at_pos ( Addressable seq,  int pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.g_sequence_get_iter_at_pos$MH, "g_sequence_get_iter_at_pos");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_append$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_sequence_append$MH,"g_sequence_append");
    }
    public static MemoryAddress g_sequence_append ( Addressable seq,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$277.g_sequence_append$MH, "g_sequence_append");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_sequence_prepend$MH,"g_sequence_prepend");
    }
    public static MemoryAddress g_sequence_prepend ( Addressable seq,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.g_sequence_prepend$MH, "g_sequence_prepend");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_sequence_insert_before$MH,"g_sequence_insert_before");
    }
    public static MemoryAddress g_sequence_insert_before ( Addressable iter,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.g_sequence_insert_before$MH, "g_sequence_insert_before");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_move$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_sequence_move$MH,"g_sequence_move");
    }
    public static void g_sequence_move ( Addressable src,  Addressable dest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.g_sequence_move$MH, "g_sequence_move");
        try {
            mh$.invokeExact(src, dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_swap$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_sequence_swap$MH,"g_sequence_swap");
    }
    public static void g_sequence_swap ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.g_sequence_swap$MH, "g_sequence_swap");
        try {
            mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_sequence_insert_sorted$MH,"g_sequence_insert_sorted");
    }
    public static MemoryAddress g_sequence_insert_sorted ( Addressable seq,  Addressable data,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.g_sequence_insert_sorted$MH, "g_sequence_insert_sorted");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_sorted_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_sequence_insert_sorted_iter$MH,"g_sequence_insert_sorted_iter");
    }
    public static MemoryAddress g_sequence_insert_sorted_iter ( Addressable seq,  Addressable data,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$278.g_sequence_insert_sorted_iter$MH, "g_sequence_insert_sorted_iter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_changed$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_sequence_sort_changed$MH,"g_sequence_sort_changed");
    }
    public static void g_sequence_sort_changed ( Addressable iter,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.g_sequence_sort_changed$MH, "g_sequence_sort_changed");
        try {
            mh$.invokeExact(iter, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_changed_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_sequence_sort_changed_iter$MH,"g_sequence_sort_changed_iter");
    }
    public static void g_sequence_sort_changed_iter ( Addressable iter,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.g_sequence_sort_changed_iter$MH, "g_sequence_sort_changed_iter");
        try {
            mh$.invokeExact(iter, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_sequence_remove$MH,"g_sequence_remove");
    }
    public static void g_sequence_remove ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.g_sequence_remove$MH, "g_sequence_remove");
        try {
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_sequence_remove_range$MH,"g_sequence_remove_range");
    }
    public static void g_sequence_remove_range ( Addressable begin,  Addressable end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.g_sequence_remove_range$MH, "g_sequence_remove_range");
        try {
            mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_move_range$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_sequence_move_range$MH,"g_sequence_move_range");
    }
    public static void g_sequence_move_range ( Addressable dest,  Addressable begin,  Addressable end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.g_sequence_move_range$MH, "g_sequence_move_range");
        try {
            mh$.invokeExact(dest, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_search$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_sequence_search$MH,"g_sequence_search");
    }
    public static MemoryAddress g_sequence_search ( Addressable seq,  Addressable data,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$279.g_sequence_search$MH, "g_sequence_search");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_search_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_sequence_search_iter$MH,"g_sequence_search_iter");
    }
    public static MemoryAddress g_sequence_search_iter ( Addressable seq,  Addressable data,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.g_sequence_search_iter$MH, "g_sequence_search_iter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_sequence_lookup$MH,"g_sequence_lookup");
    }
    public static MemoryAddress g_sequence_lookup ( Addressable seq,  Addressable data,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.g_sequence_lookup$MH, "g_sequence_lookup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_lookup_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_sequence_lookup_iter$MH,"g_sequence_lookup_iter");
    }
    public static MemoryAddress g_sequence_lookup_iter ( Addressable seq,  Addressable data,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.g_sequence_lookup_iter$MH, "g_sequence_lookup_iter");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_sequence_get$MH,"g_sequence_get");
    }
    public static MemoryAddress g_sequence_get ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.g_sequence_get$MH, "g_sequence_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_set$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_sequence_set$MH,"g_sequence_set");
    }
    public static void g_sequence_set ( Addressable iter,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.g_sequence_set$MH, "g_sequence_set");
        try {
            mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_is_begin$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_sequence_iter_is_begin$MH,"g_sequence_iter_is_begin");
    }
    public static int g_sequence_iter_is_begin ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$280.g_sequence_iter_is_begin$MH, "g_sequence_iter_is_begin");
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_is_end$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_is_end$MH,"g_sequence_iter_is_end");
    }
    public static int g_sequence_iter_is_end ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_is_end$MH, "g_sequence_iter_is_end");
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_next$MH,"g_sequence_iter_next");
    }
    public static MemoryAddress g_sequence_iter_next ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_next$MH, "g_sequence_iter_next");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_prev$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_prev$MH,"g_sequence_iter_prev");
    }
    public static MemoryAddress g_sequence_iter_prev ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_prev$MH, "g_sequence_iter_prev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_get_position$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_get_position$MH,"g_sequence_iter_get_position");
    }
    public static int g_sequence_iter_get_position ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_get_position$MH, "g_sequence_iter_get_position");
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_move$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_move$MH,"g_sequence_iter_move");
    }
    public static MemoryAddress g_sequence_iter_move ( Addressable iter,  int delta) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_move$MH, "g_sequence_iter_move");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_get_sequence$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_get_sequence$MH,"g_sequence_iter_get_sequence");
    }
    public static MemoryAddress g_sequence_iter_get_sequence ( Addressable iter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$281.g_sequence_iter_get_sequence$MH, "g_sequence_iter_get_sequence");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_sequence_iter_compare$MH,"g_sequence_iter_compare");
    }
    public static int g_sequence_iter_compare ( Addressable a,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.g_sequence_iter_compare$MH, "g_sequence_iter_compare");
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_range_get_midpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_sequence_range_get_midpoint$MH,"g_sequence_range_get_midpoint");
    }
    public static MemoryAddress g_sequence_range_get_midpoint ( Addressable begin,  Addressable end) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.g_sequence_range_get_midpoint$MH, "g_sequence_range_get_midpoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_SHELL_ERROR_BAD_QUOTING() {
        return (int)0L;
    }
    public static int G_SHELL_ERROR_EMPTY_STRING() {
        return (int)1L;
    }
    public static int G_SHELL_ERROR_FAILED() {
        return (int)2L;
    }
    public static MethodHandle g_shell_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_shell_error_quark$MH,"g_shell_error_quark");
    }
    public static int g_shell_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.g_shell_error_quark$MH, "g_shell_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_quote$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_shell_quote$MH,"g_shell_quote");
    }
    public static MemoryAddress g_shell_quote ( Addressable unquoted_string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.g_shell_quote$MH, "g_shell_quote");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(unquoted_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_unquote$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_shell_unquote$MH,"g_shell_unquote");
    }
    public static MemoryAddress g_shell_unquote ( Addressable quoted_string,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.g_shell_unquote$MH, "g_shell_unquote");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(quoted_string, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_parse_argv$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_shell_parse_argv$MH,"g_shell_parse_argv");
    }
    public static int g_shell_parse_argv ( Addressable command_line,  Addressable argcp,  Addressable argvp,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$282.g_shell_parse_argv$MH, "g_shell_parse_argv");
        try {
            return (int)mh$.invokeExact(command_line, argcp, argvp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$283.memcpy$MH,"memcpy");
    }
    public static MemoryAddress memcpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.memcpy$MH, "memcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$283.memmove$MH,"memmove");
    }
    public static MemoryAddress memmove ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.memmove$MH, "memmove");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$283.memccpy$MH,"memccpy");
    }
    public static MemoryAddress memccpy ( Addressable __dest,  Addressable __src,  int __c,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.memccpy$MH, "memccpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$283.memset$MH,"memset");
    }
    public static MemoryAddress memset ( Addressable __s,  int __c,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.memset$MH, "memset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$283.memcmp$MH,"memcmp");
    }
    public static int memcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.memcmp$MH, "memcmp");
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$283.memchr$MH,"memchr");
    }
    public static MemoryAddress memchr ( Addressable __s,  int __c,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$283.memchr$MH, "memchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$284.strcpy$MH,"strcpy");
    }
    public static MemoryAddress strcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.strcpy$MH, "strcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$284.strncpy$MH,"strncpy");
    }
    public static MemoryAddress strncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.strncpy$MH, "strncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$284.strcat$MH,"strcat");
    }
    public static MemoryAddress strcat ( Addressable __dest,  Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.strcat$MH, "strcat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$284.strncat$MH,"strncat");
    }
    public static MemoryAddress strncat ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.strncat$MH, "strncat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$284.strcmp$MH,"strcmp");
    }
    public static int strcmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.strcmp$MH, "strcmp");
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$284.strncmp$MH,"strncmp");
    }
    public static int strncmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$284.strncmp$MH, "strncmp");
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$285.strcoll$MH,"strcoll");
    }
    public static int strcoll ( Addressable __s1,  Addressable __s2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.strcoll$MH, "strcoll");
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$285.strxfrm$MH,"strxfrm");
    }
    public static long strxfrm ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.strxfrm$MH, "strxfrm");
        try {
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$285.strcoll_l$MH,"strcoll_l");
    }
    public static int strcoll_l ( Addressable __s1,  Addressable __s2,  Addressable __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.strcoll_l$MH, "strcoll_l");
        try {
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$285.strxfrm_l$MH,"strxfrm_l");
    }
    public static long strxfrm_l ( Addressable __dest,  Addressable __src,  long __n,  Addressable __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.strxfrm_l$MH, "strxfrm_l");
        try {
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$285.strdup$MH,"strdup");
    }
    public static MemoryAddress strdup ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.strdup$MH, "strdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$285.strndup$MH,"strndup");
    }
    public static MemoryAddress strndup ( Addressable __string,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$285.strndup$MH, "strndup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$286.strchr$MH,"strchr");
    }
    public static MemoryAddress strchr ( Addressable __s,  int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.strchr$MH, "strchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$286.strrchr$MH,"strrchr");
    }
    public static MemoryAddress strrchr ( Addressable __s,  int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.strrchr$MH, "strrchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$286.strcspn$MH,"strcspn");
    }
    public static long strcspn ( Addressable __s,  Addressable __reject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.strcspn$MH, "strcspn");
        try {
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$286.strspn$MH,"strspn");
    }
    public static long strspn ( Addressable __s,  Addressable __accept) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.strspn$MH, "strspn");
        try {
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$286.strpbrk$MH,"strpbrk");
    }
    public static MemoryAddress strpbrk ( Addressable __s,  Addressable __accept) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.strpbrk$MH, "strpbrk");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$286.strstr$MH,"strstr");
    }
    public static MemoryAddress strstr ( Addressable __haystack,  Addressable __needle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$286.strstr$MH, "strstr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$287.strtok$MH,"strtok");
    }
    public static MemoryAddress strtok ( Addressable __s,  Addressable __delim) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.strtok$MH, "strtok");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$287.__strtok_r$MH,"__strtok_r");
    }
    public static MemoryAddress __strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.__strtok_r$MH, "__strtok_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$287.strtok_r$MH,"strtok_r");
    }
    public static MemoryAddress strtok_r ( Addressable __s,  Addressable __delim,  Addressable __save_ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.strtok_r$MH, "strtok_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$287.strlen$MH,"strlen");
    }
    public static long strlen ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.strlen$MH, "strlen");
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$287.strnlen$MH,"strnlen");
    }
    public static long strnlen ( Addressable __string,  long __maxlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.strnlen$MH, "strnlen");
        try {
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$287.strerror$MH,"strerror");
    }
    public static MemoryAddress strerror ( int __errnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$287.strerror$MH, "strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$288.strerror_r$MH,"strerror_r");
    }
    public static int strerror_r ( int __errnum,  Addressable __buf,  long __buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.strerror_r$MH, "strerror_r");
        try {
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$288.strerror_l$MH,"strerror_l");
    }
    public static MemoryAddress strerror_l ( int __errnum,  Addressable __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.strerror_l$MH, "strerror_l");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$288.bcmp$MH,"bcmp");
    }
    public static int bcmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.bcmp$MH, "bcmp");
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$288.bcopy$MH,"bcopy");
    }
    public static void bcopy ( Addressable __src,  Addressable __dest,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.bcopy$MH, "bcopy");
        try {
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$288.bzero$MH,"bzero");
    }
    public static void bzero ( Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.bzero$MH, "bzero");
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$288.index$MH,"index");
    }
    public static MemoryAddress index ( Addressable __s,  int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$288.index$MH, "index");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$289.rindex$MH,"rindex");
    }
    public static MemoryAddress rindex ( Addressable __s,  int __c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.rindex$MH, "rindex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$289.ffs$MH,"ffs");
    }
    public static int ffs ( int __i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.ffs$MH, "ffs");
        try {
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$289.ffsl$MH,"ffsl");
    }
    public static int ffsl ( long __l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.ffsl$MH, "ffsl");
        try {
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$289.ffsll$MH,"ffsll");
    }
    public static int ffsll ( long __ll) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.ffsll$MH, "ffsll");
        try {
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$289.strcasecmp$MH,"strcasecmp");
    }
    public static int strcasecmp ( Addressable __s1,  Addressable __s2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.strcasecmp$MH, "strcasecmp");
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$289.strncasecmp$MH,"strncasecmp");
    }
    public static int strncasecmp ( Addressable __s1,  Addressable __s2,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$289.strncasecmp$MH, "strncasecmp");
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$290.strcasecmp_l$MH,"strcasecmp_l");
    }
    public static int strcasecmp_l ( Addressable __s1,  Addressable __s2,  Addressable __loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.strcasecmp_l$MH, "strcasecmp_l");
        try {
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$290.strncasecmp_l$MH,"strncasecmp_l");
    }
    public static int strncasecmp_l ( Addressable __s1,  Addressable __s2,  long __n,  Addressable __loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.strncasecmp_l$MH, "strncasecmp_l");
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$290.explicit_bzero$MH,"explicit_bzero");
    }
    public static void explicit_bzero ( Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.explicit_bzero$MH, "explicit_bzero");
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$290.strsep$MH,"strsep");
    }
    public static MemoryAddress strsep ( Addressable __stringp,  Addressable __delim) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.strsep$MH, "strsep");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$290.strsignal$MH,"strsignal");
    }
    public static MemoryAddress strsignal ( int __sig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.strsignal$MH, "strsignal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$290.__stpcpy$MH,"__stpcpy");
    }
    public static MemoryAddress __stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$290.__stpcpy$MH, "__stpcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$291.stpcpy$MH,"stpcpy");
    }
    public static MemoryAddress stpcpy ( Addressable __dest,  Addressable __src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.stpcpy$MH, "stpcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$291.__stpncpy$MH,"__stpncpy");
    }
    public static MemoryAddress __stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.__stpncpy$MH, "__stpncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$291.stpncpy$MH,"stpncpy");
    }
    public static MemoryAddress stpncpy ( Addressable __dest,  Addressable __src,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.stpncpy$MH, "stpncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_slice_alloc$MH,"g_slice_alloc");
    }
    public static MemoryAddress g_slice_alloc ( long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.g_slice_alloc$MH, "g_slice_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_slice_alloc0$MH,"g_slice_alloc0");
    }
    public static MemoryAddress g_slice_alloc0 ( long block_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.g_slice_alloc0$MH, "g_slice_alloc0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_slice_copy$MH,"g_slice_copy");
    }
    public static MemoryAddress g_slice_copy ( long block_size,  Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$291.g_slice_copy$MH, "g_slice_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_free1$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_free1$MH,"g_slice_free1");
    }
    public static void g_slice_free1 ( long block_size,  Addressable mem_block) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.g_slice_free1$MH, "g_slice_free1");
        try {
            mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_free_chain_with_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_free_chain_with_offset$MH,"g_slice_free_chain_with_offset");
    }
    public static void g_slice_free_chain_with_offset ( long block_size,  Addressable mem_chain,  long next_offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.g_slice_free_chain_with_offset$MH, "g_slice_free_chain_with_offset");
        try {
            mh$.invokeExact(block_size, mem_chain, next_offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_SLICE_CONFIG_ALWAYS_MALLOC() {
        return (int)1L;
    }
    public static int G_SLICE_CONFIG_BYPASS_MAGAZINES() {
        return (int)2L;
    }
    public static int G_SLICE_CONFIG_WORKING_SET_MSECS() {
        return (int)3L;
    }
    public static int G_SLICE_CONFIG_COLOR_INCREMENT() {
        return (int)4L;
    }
    public static int G_SLICE_CONFIG_CHUNK_SIZES() {
        return (int)5L;
    }
    public static int G_SLICE_CONFIG_CONTENTION_COUNTER() {
        return (int)6L;
    }
    public static MethodHandle g_slice_set_config$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_set_config$MH,"g_slice_set_config");
    }
    public static void g_slice_set_config ( int ckey,  long value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.g_slice_set_config$MH, "g_slice_set_config");
        try {
            mh$.invokeExact(ckey, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_get_config$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_get_config$MH,"g_slice_get_config");
    }
    public static long g_slice_get_config ( int ckey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.g_slice_get_config$MH, "g_slice_get_config");
        try {
            return (long)mh$.invokeExact(ckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_get_config_state$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_get_config_state$MH,"g_slice_get_config_state");
    }
    public static MemoryAddress g_slice_get_config_state ( int ckey,  long address,  Addressable n_values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$292.g_slice_get_config_state$MH, "g_slice_get_config_state");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ckey, address, n_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_SPAWN_ERROR_FORK() {
        return (int)0L;
    }
    public static int G_SPAWN_ERROR_READ() {
        return (int)1L;
    }
    public static int G_SPAWN_ERROR_CHDIR() {
        return (int)2L;
    }
    public static int G_SPAWN_ERROR_ACCES() {
        return (int)3L;
    }
    public static int G_SPAWN_ERROR_PERM() {
        return (int)4L;
    }
    public static int G_SPAWN_ERROR_TOO_BIG() {
        return (int)5L;
    }
    public static int G_SPAWN_ERROR_2BIG() {
        return (int)5L;
    }
    public static int G_SPAWN_ERROR_NOEXEC() {
        return (int)6L;
    }
    public static int G_SPAWN_ERROR_NAMETOOLONG() {
        return (int)7L;
    }
    public static int G_SPAWN_ERROR_NOENT() {
        return (int)8L;
    }
    public static int G_SPAWN_ERROR_NOMEM() {
        return (int)9L;
    }
    public static int G_SPAWN_ERROR_NOTDIR() {
        return (int)10L;
    }
    public static int G_SPAWN_ERROR_LOOP() {
        return (int)11L;
    }
    public static int G_SPAWN_ERROR_TXTBUSY() {
        return (int)12L;
    }
    public static int G_SPAWN_ERROR_IO() {
        return (int)13L;
    }
    public static int G_SPAWN_ERROR_NFILE() {
        return (int)14L;
    }
    public static int G_SPAWN_ERROR_MFILE() {
        return (int)15L;
    }
    public static int G_SPAWN_ERROR_INVAL() {
        return (int)16L;
    }
    public static int G_SPAWN_ERROR_ISDIR() {
        return (int)17L;
    }
    public static int G_SPAWN_ERROR_LIBBAD() {
        return (int)18L;
    }
    public static int G_SPAWN_ERROR_FAILED() {
        return (int)19L;
    }
    public static int G_SPAWN_DEFAULT() {
        return (int)0L;
    }
    public static int G_SPAWN_LEAVE_DESCRIPTORS_OPEN() {
        return (int)1L;
    }
    public static int G_SPAWN_DO_NOT_REAP_CHILD() {
        return (int)2L;
    }
    public static int G_SPAWN_SEARCH_PATH() {
        return (int)4L;
    }
    public static int G_SPAWN_STDOUT_TO_DEV_NULL() {
        return (int)8L;
    }
    public static int G_SPAWN_STDERR_TO_DEV_NULL() {
        return (int)16L;
    }
    public static int G_SPAWN_CHILD_INHERITS_STDIN() {
        return (int)32L;
    }
    public static int G_SPAWN_FILE_AND_ARGV_ZERO() {
        return (int)64L;
    }
    public static int G_SPAWN_SEARCH_PATH_FROM_ENVP() {
        return (int)128L;
    }
    public static int G_SPAWN_CLOEXEC_PIPES() {
        return (int)256L;
    }
    public static MethodHandle g_spawn_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_spawn_error_quark$MH,"g_spawn_error_quark");
    }
    public static int g_spawn_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.g_spawn_error_quark$MH, "g_spawn_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_exit_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_spawn_exit_error_quark$MH,"g_spawn_exit_error_quark");
    }
    public static int g_spawn_exit_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.g_spawn_exit_error_quark$MH, "g_spawn_exit_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_spawn_async$MH,"g_spawn_async");
    }
    public static int g_spawn_async ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable child_pid,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.g_spawn_async$MH, "g_spawn_async");
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_pipes$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_spawn_async_with_pipes$MH,"g_spawn_async_with_pipes");
    }
    public static int g_spawn_async_with_pipes ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable child_pid,  Addressable standard_input,  Addressable standard_output,  Addressable standard_error,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.g_spawn_async_with_pipes$MH, "g_spawn_async_with_pipes");
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_pipes_and_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_spawn_async_with_pipes_and_fds$MH,"g_spawn_async_with_pipes_and_fds");
    }
    public static int g_spawn_async_with_pipes_and_fds ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  int stdin_fd,  int stdout_fd,  int stderr_fd,  Addressable source_fds,  Addressable target_fds,  long n_fds,  Addressable child_pid_out,  Addressable stdin_pipe_out,  Addressable stdout_pipe_out,  Addressable stderr_pipe_out,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$293.g_spawn_async_with_pipes_and_fds$MH, "g_spawn_async_with_pipes_and_fds");
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, stdin_fd, stdout_fd, stderr_fd, source_fds, target_fds, n_fds, child_pid_out, stdin_pipe_out, stdout_pipe_out, stderr_pipe_out, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_async_with_fds$MH,"g_spawn_async_with_fds");
    }
    public static int g_spawn_async_with_fds ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable child_pid,  int stdin_fd,  int stdout_fd,  int stderr_fd,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.g_spawn_async_with_fds$MH, "g_spawn_async_with_fds");
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, stdin_fd, stdout_fd, stderr_fd, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_sync$MH,"g_spawn_sync");
    }
    public static int g_spawn_sync ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable standard_output,  Addressable standard_error,  Addressable wait_status,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.g_spawn_sync$MH, "g_spawn_sync");
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_command_line_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_command_line_sync$MH,"g_spawn_command_line_sync");
    }
    public static int g_spawn_command_line_sync ( Addressable command_line,  Addressable standard_output,  Addressable standard_error,  Addressable wait_status,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.g_spawn_command_line_sync$MH, "g_spawn_command_line_sync");
        try {
            return (int)mh$.invokeExact(command_line, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_command_line_async$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_command_line_async$MH,"g_spawn_command_line_async");
    }
    public static int g_spawn_command_line_async ( Addressable command_line,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.g_spawn_command_line_async$MH, "g_spawn_command_line_async");
        try {
            return (int)mh$.invokeExact(command_line, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_check_wait_status$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_check_wait_status$MH,"g_spawn_check_wait_status");
    }
    public static int g_spawn_check_wait_status ( int wait_status,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.g_spawn_check_wait_status$MH, "g_spawn_check_wait_status");
        try {
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_check_exit_status$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_check_exit_status$MH,"g_spawn_check_exit_status");
    }
    public static int g_spawn_check_exit_status ( int wait_status,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$294.g_spawn_check_exit_status$MH, "g_spawn_check_exit_status");
        try {
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_close_pid$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_spawn_close_pid$MH,"g_spawn_close_pid");
    }
    public static void g_spawn_close_pid ( int pid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.g_spawn_close_pid$MH, "g_spawn_close_pid");
        try {
            mh$.invokeExact(pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_ASCII_ALNUM() {
        return (int)1L;
    }
    public static int G_ASCII_ALPHA() {
        return (int)2L;
    }
    public static int G_ASCII_CNTRL() {
        return (int)4L;
    }
    public static int G_ASCII_DIGIT() {
        return (int)8L;
    }
    public static int G_ASCII_GRAPH() {
        return (int)16L;
    }
    public static int G_ASCII_LOWER() {
        return (int)32L;
    }
    public static int G_ASCII_PRINT() {
        return (int)64L;
    }
    public static int G_ASCII_PUNCT() {
        return (int)128L;
    }
    public static int G_ASCII_SPACE() {
        return (int)256L;
    }
    public static int G_ASCII_UPPER() {
        return (int)512L;
    }
    public static int G_ASCII_XDIGIT() {
        return (int)1024L;
    }
    public static MemoryLayout g_ascii_table$LAYOUT() {
        return constants$295.g_ascii_table$LAYOUT;
    }
    public static VarHandle g_ascii_table$VH() {
        return constants$295.g_ascii_table$VH;
    }
    public static MemorySegment g_ascii_table$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$295.g_ascii_table$SEGMENT,"g_ascii_table");
    }
    public static MemoryAddress g_ascii_table$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$295.g_ascii_table$VH.get(RuntimeHelper.requireNonNull(constants$295.g_ascii_table$SEGMENT, "g_ascii_table"));
    }
    public static void g_ascii_table$set( MemoryAddress x) {
        constants$295.g_ascii_table$VH.set(RuntimeHelper.requireNonNull(constants$295.g_ascii_table$SEGMENT, "g_ascii_table"), x);
    }
    public static MethodHandle g_ascii_tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_ascii_tolower$MH,"g_ascii_tolower");
    }
    public static byte g_ascii_tolower ( byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.g_ascii_tolower$MH, "g_ascii_tolower");
        try {
            return (byte)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_ascii_toupper$MH,"g_ascii_toupper");
    }
    public static byte g_ascii_toupper ( byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.g_ascii_toupper$MH, "g_ascii_toupper");
        try {
            return (byte)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_digit_value$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_ascii_digit_value$MH,"g_ascii_digit_value");
    }
    public static int g_ascii_digit_value ( byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.g_ascii_digit_value$MH, "g_ascii_digit_value");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_xdigit_value$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_ascii_xdigit_value$MH,"g_ascii_xdigit_value");
    }
    public static int g_ascii_xdigit_value ( byte c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$295.g_ascii_xdigit_value$MH, "g_ascii_xdigit_value");
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strdelimit$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_strdelimit$MH,"g_strdelimit");
    }
    public static MemoryAddress g_strdelimit ( Addressable string,  Addressable delimiters,  byte new_delimiter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.g_strdelimit$MH, "g_strdelimit");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, delimiters, new_delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strcanon$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_strcanon$MH,"g_strcanon");
    }
    public static MemoryAddress g_strcanon ( Addressable string,  Addressable valid_chars,  byte substitutor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.g_strcanon$MH, "g_strcanon");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string, valid_chars, substitutor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_strerror$MH,"g_strerror");
    }
    public static MemoryAddress g_strerror ( int errnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.g_strerror$MH, "g_strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_strsignal$MH,"g_strsignal");
    }
    public static MemoryAddress g_strsignal ( int signum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.g_strsignal$MH, "g_strsignal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(signum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strreverse$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_strreverse$MH,"g_strreverse");
    }
    public static MemoryAddress g_strreverse ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.g_strreverse$MH, "g_strreverse");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_strlcpy$MH,"g_strlcpy");
    }
    public static long g_strlcpy ( Addressable dest,  Addressable src,  long dest_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$296.g_strlcpy$MH, "g_strlcpy");
        try {
            return (long)mh$.invokeExact(dest, src, dest_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strlcat$MH,"g_strlcat");
    }
    public static long g_strlcat ( Addressable dest,  Addressable src,  long dest_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.g_strlcat$MH, "g_strlcat");
        try {
            return (long)mh$.invokeExact(dest, src, dest_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strstr_len$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strstr_len$MH,"g_strstr_len");
    }
    public static MemoryAddress g_strstr_len ( Addressable haystack,  long haystack_len,  Addressable needle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.g_strstr_len$MH, "g_strstr_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(haystack, haystack_len, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strrstr$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strrstr$MH,"g_strrstr");
    }
    public static MemoryAddress g_strrstr ( Addressable haystack,  Addressable needle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.g_strrstr$MH, "g_strrstr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strrstr_len$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strrstr_len$MH,"g_strrstr_len");
    }
    public static MemoryAddress g_strrstr_len ( Addressable haystack,  long haystack_len,  Addressable needle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$297.g_strrstr_len$MH, "g_strrstr_len");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(haystack, haystack_len, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


