// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GAsyncResultIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_user_data"),
        Constants$root.C_POINTER$LAYOUT.withName("get_source_object"),
        Constants$root.C_POINTER$LAYOUT.withName("is_tagged")
    ).withName("_GAsyncResultIface");
    public static MemoryLayout $LAYOUT() {
        return _GAsyncResultIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_user_data$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_user_data$MH = RuntimeHelper.downcallHandle(
        _GAsyncResultIface.get_user_data$FUNC, false
    );
    public interface get_user_data {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_user_data fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_user_data.class, fi, _GAsyncResultIface.get_user_data$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_user_data ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_user_data::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.get_user_data$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_user_data"));
    public static VarHandle get_user_data$VH() {
        return _GAsyncResultIface.get_user_data$VH;
    }
    public static MemoryAddress get_user_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.get_user_data$VH.get(seg);
    }
    public static void get_user_data$set( MemorySegment seg, MemoryAddress x) {
        _GAsyncResultIface.get_user_data$VH.set(seg, x);
    }
    public static MemoryAddress get_user_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.get_user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _GAsyncResultIface.get_user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_user_data get_user_data (MemorySegment segment, ResourceScope scope) {
        return get_user_data.ofAddress(get_user_data$get(segment), scope);
    }
    static final FunctionDescriptor get_source_object$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_source_object$MH = RuntimeHelper.downcallHandle(
        _GAsyncResultIface.get_source_object$FUNC, false
    );
    public interface get_source_object {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_source_object fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_source_object.class, fi, _GAsyncResultIface.get_source_object$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_source_object ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_source_object::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.get_source_object$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_source_object$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_source_object"));
    public static VarHandle get_source_object$VH() {
        return _GAsyncResultIface.get_source_object$VH;
    }
    public static MemoryAddress get_source_object$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.get_source_object$VH.get(seg);
    }
    public static void get_source_object$set( MemorySegment seg, MemoryAddress x) {
        _GAsyncResultIface.get_source_object$VH.set(seg, x);
    }
    public static MemoryAddress get_source_object$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.get_source_object$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_source_object$set(MemorySegment seg, long index, MemoryAddress x) {
        _GAsyncResultIface.get_source_object$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_source_object get_source_object (MemorySegment segment, ResourceScope scope) {
        return get_source_object.ofAddress(get_source_object$get(segment), scope);
    }
    static final FunctionDescriptor is_tagged$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_tagged$MH = RuntimeHelper.downcallHandle(
        _GAsyncResultIface.is_tagged$FUNC, false
    );
    public interface is_tagged {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(is_tagged fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_tagged.class, fi, _GAsyncResultIface.is_tagged$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_tagged ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_tagged::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (int)_GAsyncResultIface.is_tagged$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_tagged$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_tagged"));
    public static VarHandle is_tagged$VH() {
        return _GAsyncResultIface.is_tagged$VH;
    }
    public static MemoryAddress is_tagged$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.is_tagged$VH.get(seg);
    }
    public static void is_tagged$set( MemorySegment seg, MemoryAddress x) {
        _GAsyncResultIface.is_tagged$VH.set(seg, x);
    }
    public static MemoryAddress is_tagged$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GAsyncResultIface.is_tagged$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_tagged$set(MemorySegment seg, long index, MemoryAddress x) {
        _GAsyncResultIface.is_tagged$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_tagged is_tagged (MemorySegment segment, ResourceScope scope) {
        return is_tagged.ofAddress(is_tagged$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


