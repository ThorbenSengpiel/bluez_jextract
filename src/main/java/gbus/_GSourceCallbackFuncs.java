// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GSourceCallbackFuncs {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ref"),
        Constants$root.C_POINTER$LAYOUT.withName("unref"),
        Constants$root.C_POINTER$LAYOUT.withName("get")
    ).withName("_GSourceCallbackFuncs");
    public static MemoryLayout $LAYOUT() {
        return _GSourceCallbackFuncs.$struct$LAYOUT;
    }
    static final FunctionDescriptor ref$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref$MH = RuntimeHelper.downcallHandle(
        _GSourceCallbackFuncs.ref$FUNC, false
    );
    public interface ref {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(ref fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(ref.class, fi, _GSourceCallbackFuncs.ref$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static ref ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("ref::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _GSourceCallbackFuncs.ref$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref"));
    public static VarHandle ref$VH() {
        return _GSourceCallbackFuncs.ref$VH;
    }
    public static MemoryAddress ref$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GSourceCallbackFuncs.ref$VH.get(seg);
    }
    public static void ref$set( MemorySegment seg, MemoryAddress x) {
        _GSourceCallbackFuncs.ref$VH.set(seg, x);
    }
    public static MemoryAddress ref$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GSourceCallbackFuncs.ref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref$set(MemorySegment seg, long index, MemoryAddress x) {
        _GSourceCallbackFuncs.ref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref ref (MemorySegment segment, ResourceScope scope) {
        return ref.ofAddress(ref$get(segment), scope);
    }
    static final FunctionDescriptor unref$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unref$MH = RuntimeHelper.downcallHandle(
        _GSourceCallbackFuncs.unref$FUNC, false
    );
    public interface unref {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(unref fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(unref.class, fi, _GSourceCallbackFuncs.unref$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static unref ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("unref::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _GSourceCallbackFuncs.unref$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unref$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unref"));
    public static VarHandle unref$VH() {
        return _GSourceCallbackFuncs.unref$VH;
    }
    public static MemoryAddress unref$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GSourceCallbackFuncs.unref$VH.get(seg);
    }
    public static void unref$set( MemorySegment seg, MemoryAddress x) {
        _GSourceCallbackFuncs.unref$VH.set(seg, x);
    }
    public static MemoryAddress unref$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GSourceCallbackFuncs.unref$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unref$set(MemorySegment seg, long index, MemoryAddress x) {
        _GSourceCallbackFuncs.unref$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unref unref (MemorySegment segment, ResourceScope scope) {
        return unref.ofAddress(unref$get(segment), scope);
    }
    static final FunctionDescriptor get$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get$MH = RuntimeHelper.downcallHandle(
        _GSourceCallbackFuncs.get$FUNC, false
    );
    public interface get {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static NativeSymbol allocate(get fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get.class, fi, _GSourceCallbackFuncs.get$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    _GSourceCallbackFuncs.get$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get"));
    public static VarHandle get$VH() {
        return _GSourceCallbackFuncs.get$VH;
    }
    public static MemoryAddress get$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GSourceCallbackFuncs.get$VH.get(seg);
    }
    public static void get$set( MemorySegment seg, MemoryAddress x) {
        _GSourceCallbackFuncs.get$VH.set(seg, x);
    }
    public static MemoryAddress get$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GSourceCallbackFuncs.get$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get$set(MemorySegment seg, long index, MemoryAddress x) {
        _GSourceCallbackFuncs.get$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get get (MemorySegment segment, ResourceScope scope) {
        return get.ofAddress(get$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


