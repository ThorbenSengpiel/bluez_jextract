// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GObjectClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
        ).withName("g_type_class"),
        Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
        Constants$root.C_POINTER$LAYOUT.withName("constructor"),
        Constants$root.C_POINTER$LAYOUT.withName("set_property"),
        Constants$root.C_POINTER$LAYOUT.withName("get_property"),
        Constants$root.C_POINTER$LAYOUT.withName("dispose"),
        Constants$root.C_POINTER$LAYOUT.withName("finalize"),
        Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("notify"),
        Constants$root.C_POINTER$LAYOUT.withName("constructed"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
    ).withName("_GObjectClass");
    public static MemoryLayout $LAYOUT() {
        return _GObjectClass.$struct$LAYOUT;
    }
    public static MemorySegment g_type_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle construct_properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("construct_properties"));
    public static VarHandle construct_properties$VH() {
        return _GObjectClass.construct_properties$VH;
    }
    public static MemoryAddress construct_properties$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.construct_properties$VH.get(seg);
    }
    public static void construct_properties$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.construct_properties$VH.set(seg, x);
    }
    public static MemoryAddress construct_properties$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.construct_properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void construct_properties$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.construct_properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor constructor$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle constructor$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.constructor$FUNC, false
    );
    public interface constructor {

        jdk.incubator.foreign.Addressable apply(long x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static NativeSymbol allocate(constructor fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(constructor.class, fi, _GObjectClass.constructor$FUNC, "(JILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static constructor ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("constructor::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (long x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GObjectClass.constructor$MH.invokeExact(symbol, x0, x1, (jdk.incubator.foreign.Addressable)x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle constructor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("constructor"));
    public static VarHandle constructor$VH() {
        return _GObjectClass.constructor$VH;
    }
    public static MemoryAddress constructor$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.constructor$VH.get(seg);
    }
    public static void constructor$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.constructor$VH.set(seg, x);
    }
    public static MemoryAddress constructor$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.constructor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void constructor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.constructor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static constructor constructor (MemorySegment segment, ResourceScope scope) {
        return constructor.ofAddress(constructor$get(segment), scope);
    }
    static final FunctionDescriptor set_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_property$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.set_property$FUNC, false
    );
    public interface set_property {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static NativeSymbol allocate(set_property fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_property.class, fi, _GObjectClass.set_property$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_property ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_property::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    _GObjectClass.set_property$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_property"));
    public static VarHandle set_property$VH() {
        return _GObjectClass.set_property$VH;
    }
    public static MemoryAddress set_property$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.set_property$VH.get(seg);
    }
    public static void set_property$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.set_property$VH.set(seg, x);
    }
    public static MemoryAddress set_property$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.set_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.set_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_property set_property (MemorySegment segment, ResourceScope scope) {
        return set_property.ofAddress(set_property$get(segment), scope);
    }
    static final FunctionDescriptor get_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_property$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.get_property$FUNC, false
    );
    public interface get_property {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3);
        static NativeSymbol allocate(get_property fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_property.class, fi, _GObjectClass.get_property$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_property ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_property::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    _GObjectClass.get_property$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_property"));
    public static VarHandle get_property$VH() {
        return _GObjectClass.get_property$VH;
    }
    public static MemoryAddress get_property$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.get_property$VH.get(seg);
    }
    public static void get_property$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.get_property$VH.set(seg, x);
    }
    public static MemoryAddress get_property$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.get_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.get_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_property get_property (MemorySegment segment, ResourceScope scope) {
        return get_property.ofAddress(get_property$get(segment), scope);
    }
    static final FunctionDescriptor dispose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle dispose$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.dispose$FUNC, false
    );
    public interface dispose {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(dispose fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(dispose.class, fi, _GObjectClass.dispose$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static dispose ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("dispose::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _GObjectClass.dispose$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle dispose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dispose"));
    public static VarHandle dispose$VH() {
        return _GObjectClass.dispose$VH;
    }
    public static MemoryAddress dispose$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.dispose$VH.get(seg);
    }
    public static void dispose$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.dispose$VH.set(seg, x);
    }
    public static MemoryAddress dispose$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.dispose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dispose$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.dispose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static dispose dispose (MemorySegment segment, ResourceScope scope) {
        return dispose.ofAddress(dispose$get(segment), scope);
    }
    static final FunctionDescriptor finalize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle finalize$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.finalize$FUNC, false
    );
    public interface finalize {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(finalize fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(finalize.class, fi, _GObjectClass.finalize$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static finalize ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("finalize::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _GObjectClass.finalize$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle finalize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("finalize"));
    public static VarHandle finalize$VH() {
        return _GObjectClass.finalize$VH;
    }
    public static MemoryAddress finalize$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.finalize$VH.get(seg);
    }
    public static void finalize$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.finalize$VH.set(seg, x);
    }
    public static MemoryAddress finalize$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.finalize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void finalize$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.finalize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static finalize finalize (MemorySegment segment, ResourceScope scope) {
        return finalize.ofAddress(finalize$get(segment), scope);
    }
    static final FunctionDescriptor dispatch_properties_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle dispatch_properties_changed$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.dispatch_properties_changed$FUNC, false
    );
    public interface dispatch_properties_changed {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static NativeSymbol allocate(dispatch_properties_changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(dispatch_properties_changed.class, fi, _GObjectClass.dispatch_properties_changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static dispatch_properties_changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("dispatch_properties_changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    _GObjectClass.dispatch_properties_changed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1, (jdk.incubator.foreign.Addressable)x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle dispatch_properties_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dispatch_properties_changed"));
    public static VarHandle dispatch_properties_changed$VH() {
        return _GObjectClass.dispatch_properties_changed$VH;
    }
    public static MemoryAddress dispatch_properties_changed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.dispatch_properties_changed$VH.get(seg);
    }
    public static void dispatch_properties_changed$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.dispatch_properties_changed$VH.set(seg, x);
    }
    public static MemoryAddress dispatch_properties_changed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.dispatch_properties_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dispatch_properties_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.dispatch_properties_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static dispatch_properties_changed dispatch_properties_changed (MemorySegment segment, ResourceScope scope) {
        return dispatch_properties_changed.ofAddress(dispatch_properties_changed$get(segment), scope);
    }
    static final FunctionDescriptor notify$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle notify$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.notify$FUNC, false
    );
    public interface notify {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(notify fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(notify.class, fi, _GObjectClass.notify$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static notify ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("notify::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    _GObjectClass.notify$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle notify$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("notify"));
    public static VarHandle notify$VH() {
        return _GObjectClass.notify$VH;
    }
    public static MemoryAddress notify$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.notify$VH.get(seg);
    }
    public static void notify$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.notify$VH.set(seg, x);
    }
    public static MemoryAddress notify$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.notify$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void notify$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.notify$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static notify notify (MemorySegment segment, ResourceScope scope) {
        return notify.ofAddress(notify$get(segment), scope);
    }
    static final FunctionDescriptor constructed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle constructed$MH = RuntimeHelper.downcallHandle(
        _GObjectClass.constructed$FUNC, false
    );
    public interface constructed {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(constructed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(constructed.class, fi, _GObjectClass.constructed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static constructed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("constructed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _GObjectClass.constructed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle constructed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("constructed"));
    public static VarHandle constructed$VH() {
        return _GObjectClass.constructed$VH;
    }
    public static MemoryAddress constructed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.constructed$VH.get(seg);
    }
    public static void constructed$set( MemorySegment seg, MemoryAddress x) {
        _GObjectClass.constructed$VH.set(seg, x);
    }
    public static MemoryAddress constructed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GObjectClass.constructed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void constructed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GObjectClass.constructed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static constructed constructed (MemorySegment segment, ResourceScope scope) {
        return constructed.ofAddress(constructed$get(segment), scope);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return _GObjectClass.flags$VH;
    }
    public static long flags$get(MemorySegment seg) {
        return (long)_GObjectClass.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, long x) {
        _GObjectClass.flags$VH.set(seg, x);
    }
    public static long flags$get(MemorySegment seg, long index) {
        return (long)_GObjectClass.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, long x) {
        _GObjectClass.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pdummy$slice(MemorySegment seg) {
        return seg.asSlice(88, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


