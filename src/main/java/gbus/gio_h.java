// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class gio_h extends gio_h_9 {

    /* package-private */ gio_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int G_ANALYZER_ANALYZING() {
        return (int)0L;
    }
    public static int _LIBC_LIMITS_H_() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)34L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int MB_LEN_MAX() {
        return (int)16L;
    }
    public static int _BITS_POSIX1_LIM_H() {
        return (int)1L;
    }
    public static int _POSIX_AIO_LISTIO_MAX() {
        return (int)2L;
    }
    public static int _POSIX_AIO_MAX() {
        return (int)1L;
    }
    public static int _POSIX_ARG_MAX() {
        return (int)4096L;
    }
    public static int _POSIX_CHILD_MAX() {
        return (int)25L;
    }
    public static int _POSIX_DELAYTIMER_MAX() {
        return (int)32L;
    }
    public static int _POSIX_HOST_NAME_MAX() {
        return (int)255L;
    }
    public static int _POSIX_LINK_MAX() {
        return (int)8L;
    }
    public static int _POSIX_LOGIN_NAME_MAX() {
        return (int)9L;
    }
    public static int _POSIX_MAX_CANON() {
        return (int)255L;
    }
    public static int _POSIX_MAX_INPUT() {
        return (int)255L;
    }
    public static int _POSIX_MQ_OPEN_MAX() {
        return (int)8L;
    }
    public static int _POSIX_MQ_PRIO_MAX() {
        return (int)32L;
    }
    public static int _POSIX_NAME_MAX() {
        return (int)14L;
    }
    public static int _POSIX_NGROUPS_MAX() {
        return (int)8L;
    }
    public static int _POSIX_OPEN_MAX() {
        return (int)20L;
    }
    public static int _POSIX_PATH_MAX() {
        return (int)256L;
    }
    public static int _POSIX_PIPE_BUF() {
        return (int)512L;
    }
    public static int _POSIX_RE_DUP_MAX() {
        return (int)255L;
    }
    public static int _POSIX_RTSIG_MAX() {
        return (int)8L;
    }
    public static int _POSIX_SEM_NSEMS_MAX() {
        return (int)256L;
    }
    public static int _POSIX_SEM_VALUE_MAX() {
        return (int)32767L;
    }
    public static int _POSIX_SIGQUEUE_MAX() {
        return (int)32L;
    }
    public static int _POSIX_SSIZE_MAX() {
        return (int)32767L;
    }
    public static int _POSIX_STREAM_MAX() {
        return (int)8L;
    }
    public static int _POSIX_SYMLINK_MAX() {
        return (int)255L;
    }
    public static int _POSIX_SYMLOOP_MAX() {
        return (int)8L;
    }
    public static int _POSIX_TIMER_MAX() {
        return (int)32L;
    }
    public static int _POSIX_TTY_NAME_MAX() {
        return (int)9L;
    }
    public static int _POSIX_TZNAME_MAX() {
        return (int)6L;
    }
    public static int _POSIX_CLOCKRES_MIN() {
        return (int)20000000L;
    }
    public static int NR_OPEN() {
        return (int)1024L;
    }
    public static int NGROUPS_MAX() {
        return (int)65536L;
    }
    public static int ARG_MAX() {
        return (int)131072L;
    }
    public static int LINK_MAX() {
        return (int)127L;
    }
    public static int MAX_CANON() {
        return (int)255L;
    }
    public static int MAX_INPUT() {
        return (int)255L;
    }
    public static int NAME_MAX() {
        return (int)255L;
    }
    public static int PATH_MAX() {
        return (int)4096L;
    }
    public static int PIPE_BUF() {
        return (int)4096L;
    }
    public static int XATTR_NAME_MAX() {
        return (int)255L;
    }
    public static int XATTR_SIZE_MAX() {
        return (int)65536L;
    }
    public static int XATTR_LIST_MAX() {
        return (int)65536L;
    }
    public static int RTSIG_MAX() {
        return (int)32L;
    }
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    public static int PTHREAD_KEYS_MAX() {
        return (int)1024L;
    }
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    public static int _POSIX_THREAD_THREADS_MAX() {
        return (int)64L;
    }
    public static int AIO_PRIO_DELTA_MAX() {
        return (int)20L;
    }
    public static int PTHREAD_STACK_MIN() {
        return (int)16384L;
    }
    public static int DELAYTIMER_MAX() {
        return (int)2147483647L;
    }
    public static int TTY_NAME_MAX() {
        return (int)32L;
    }
    public static int LOGIN_NAME_MAX() {
        return (int)256L;
    }
    public static int HOST_NAME_MAX() {
        return (int)64L;
    }
    public static int MQ_PRIO_MAX() {
        return (int)32768L;
    }
    public static int _BITS_POSIX2_LIM_H() {
        return (int)1L;
    }
    public static int _POSIX2_BC_BASE_MAX() {
        return (int)99L;
    }
    public static int _POSIX2_BC_DIM_MAX() {
        return (int)2048L;
    }
    public static int _POSIX2_BC_SCALE_MAX() {
        return (int)99L;
    }
    public static int _POSIX2_BC_STRING_MAX() {
        return (int)1000L;
    }
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return (int)2L;
    }
    public static int _POSIX2_EXPR_NEST_MAX() {
        return (int)32L;
    }
    public static int _POSIX2_LINE_MAX() {
        return (int)2048L;
    }
    public static int _POSIX2_RE_DUP_MAX() {
        return (int)255L;
    }
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return (int)14L;
    }
    public static int COLL_WEIGHTS_MAX() {
        return (int)255L;
    }
    public static int CHARCLASS_NAME_MAX() {
        return (int)2048L;
    }
    public static int G_HAVE_GINT64() {
        return (int)1L;
    }
    public static int GLIB_SIZEOF_VOID_P() {
        return (int)8L;
    }
    public static int GLIB_SIZEOF_LONG() {
        return (int)8L;
    }
    public static int GLIB_SIZEOF_SIZE_T() {
        return (int)8L;
    }
    public static int GLIB_SIZEOF_SSIZE_T() {
        return (int)8L;
    }
    public static int GLIB_MAJOR_VERSION() {
        return (int)2L;
    }
    public static int GLIB_MINOR_VERSION() {
        return (int)70L;
    }
    public static int GLIB_MICRO_VERSION() {
        return (int)3L;
    }
    public static int G_VA_COPY_AS_ARRAY() {
        return (int)1L;
    }
    public static int G_HAVE_ISO_VARARGS() {
        return (int)1L;
    }
    public static int G_HAVE_GROWING_STACK() {
        return (int)0L;
    }
    public static int G_HAVE_GNUC_VISIBILITY() {
        return (int)1L;
    }
    public static int G_HAVE_GNUC_VARARGS() {
        return (int)1L;
    }
    public static int GLIB_SYSDEF_AF_UNIX() {
        return (int)1L;
    }
    public static int GLIB_SYSDEF_AF_INET() {
        return (int)2L;
    }
    public static int GLIB_SYSDEF_AF_INET6() {
        return (int)10L;
    }
    public static int GLIB_SYSDEF_MSG_OOB() {
        return (int)1L;
    }
    public static int GLIB_SYSDEF_MSG_PEEK() {
        return (int)2L;
    }
    public static int GLIB_SYSDEF_MSG_DONTROUTE() {
        return (int)4L;
    }
    public static int _TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static int G_LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int G_BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int G_PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    public static int _STDLIB_H() {
        return (int)1L;
    }
    public static int WNOHANG() {
        return (int)1L;
    }
    public static int WUNTRACED() {
        return (int)2L;
    }
    public static int WSTOPPED() {
        return (int)2L;
    }
    public static int WEXITED() {
        return (int)4L;
    }
    public static int WCONTINUED() {
        return (int)8L;
    }
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    public static int __WALL() {
        return (int)1073741824L;
    }
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    public static int _BITS_SIGNUM_GENERIC_H() {
        return (int)1L;
    }
    public static int SIGINT() {
        return (int)2L;
    }
    public static int SIGILL() {
        return (int)4L;
    }
    public static int SIGABRT() {
        return (int)6L;
    }
    public static int SIGFPE() {
        return (int)8L;
    }
    public static int SIGSEGV() {
        return (int)11L;
    }
    public static int SIGTERM() {
        return (int)15L;
    }
    public static int SIGHUP() {
        return (int)1L;
    }
    public static int SIGQUIT() {
        return (int)3L;
    }
    public static int SIGTRAP() {
        return (int)5L;
    }
    public static int SIGKILL() {
        return (int)9L;
    }
    public static int SIGPIPE() {
        return (int)13L;
    }
    public static int SIGALRM() {
        return (int)14L;
    }
    public static int _BITS_SIGNUM_ARCH_H() {
        return (int)1L;
    }
    public static int SIGSTKFLT() {
        return (int)16L;
    }
    public static int SIGPWR() {
        return (int)30L;
    }
    public static int SIGBUS() {
        return (int)7L;
    }
    public static int SIGSYS() {
        return (int)31L;
    }
    public static int SIGURG() {
        return (int)23L;
    }
    public static int SIGSTOP() {
        return (int)19L;
    }
    public static int SIGTSTP() {
        return (int)20L;
    }
    public static int SIGCONT() {
        return (int)18L;
    }
    public static int SIGCHLD() {
        return (int)17L;
    }
    public static int SIGTTIN() {
        return (int)21L;
    }
    public static int SIGTTOU() {
        return (int)22L;
    }
    public static int SIGPOLL() {
        return (int)29L;
    }
    public static int SIGXFSZ() {
        return (int)25L;
    }
    public static int SIGXCPU() {
        return (int)24L;
    }
    public static int SIGVTALRM() {
        return (int)26L;
    }
    public static int SIGPROF() {
        return (int)27L;
    }
    public static int SIGUSR1() {
        return (int)10L;
    }
    public static int SIGUSR2() {
        return (int)12L;
    }
    public static int SIGWINCH() {
        return (int)28L;
    }
    public static int __SIGRTMIN() {
        return (int)32L;
    }
    public static int __SIGRTMAX() {
        return (int)64L;
    }
    public static int __sig_atomic_t_defined() {
        return (int)1L;
    }
    public static int __siginfo_t_defined() {
        return (int)1L;
    }
    public static int __SI_MAX_SIZE() {
        return (int)128L;
    }
    public static int _BITS_SIGINFO_ARCH_H() {
        return (int)1L;
    }
    public static int __SI_ERRNO_THEN_CODE() {
        return (int)1L;
    }
    public static int __SI_HAVE_SIGSYS() {
        return (int)1L;
    }
    public static int _BITS_SIGINFO_CONSTS_H() {
        return (int)1L;
    }
    public static int __SI_ASYNCIO_AFTER_SIGIO() {
        return (int)1L;
    }
    public static int __sigevent_t_defined() {
        return (int)1L;
    }
    public static int __SIGEV_MAX_SIZE() {
        return (int)64L;
    }
    public static int _BITS_SIGEVENT_CONSTS_H() {
        return (int)1L;
    }
    public static int _BITS_SIGACTION_H() {
        return (int)1L;
    }
    public static int SA_NOCLDSTOP() {
        return (int)1L;
    }
    public static int SA_NOCLDWAIT() {
        return (int)2L;
    }
    public static int SA_SIGINFO() {
        return (int)4L;
    }
    public static int SA_ONSTACK() {
        return (int)134217728L;
    }
    public static int SA_RESTART() {
        return (int)268435456L;
    }
    public static int SA_NODEFER() {
        return (int)1073741824L;
    }
    public static int SA_INTERRUPT() {
        return (int)536870912L;
    }
    public static int SIG_BLOCK() {
        return (int)0L;
    }
    public static int SIG_UNBLOCK() {
        return (int)1L;
    }
    public static int SIG_SETMASK() {
        return (int)2L;
    }
    public static int _BITS_SIGCONTEXT_H() {
        return (int)1L;
    }
    public static int __stack_t_defined() {
        return (int)1L;
    }
    public static int _SYS_UCONTEXT_H() {
        return (int)1L;
    }
    public static int __NGREG() {
        return (int)23L;
    }
    public static int _BITS_SIGSTACK_H() {
        return (int)1L;
    }
    public static int MINSIGSTKSZ() {
        return (int)2048L;
    }
    public static int SIGSTKSZ() {
        return (int)8192L;
    }
    public static int _BITS_SS_FLAGS_H() {
        return (int)1L;
    }
    public static int __sigstack_defined() {
        return (int)1L;
    }
    public static int _BITS_SIGTHREAD_H() {
        return (int)1L;
    }
    public static int G_DATALIST_FLAGS_MASK() {
        return (int)3L;
    }
    public static int _DIRENT_H() {
        return (int)1L;
    }
    public static int _DIRENT_MATCHES_DIRENT64() {
        return (int)1L;
    }
    public static int G_PRIORITY_DEFAULT() {
        return (int)0L;
    }
    public static int G_PRIORITY_HIGH_IDLE() {
        return (int)100L;
    }
    public static int G_PRIORITY_DEFAULT_IDLE() {
        return (int)200L;
    }
    public static int G_PRIORITY_LOW() {
        return (int)300L;
    }
    public static int G_UNICHAR_MAX_DECOMPOSITION_LENGTH() {
        return (int)18L;
    }
    public static int _STRING_H() {
        return (int)1L;
    }
    public static int _STRINGS_H() {
        return (int)1L;
    }
    public static int _ERRNO_H() {
        return (int)1L;
    }
    public static int _BITS_ERRNO_H() {
        return (int)1L;
    }
    public static int EPERM() {
        return (int)1L;
    }
    public static int ENOENT() {
        return (int)2L;
    }
    public static int ESRCH() {
        return (int)3L;
    }
    public static int EINTR() {
        return (int)4L;
    }
    public static int EIO() {
        return (int)5L;
    }
    public static int ENXIO() {
        return (int)6L;
    }
    public static int E2BIG() {
        return (int)7L;
    }
    public static int ENOEXEC() {
        return (int)8L;
    }
    public static int EBADF() {
        return (int)9L;
    }
    public static int ECHILD() {
        return (int)10L;
    }
    public static int EAGAIN() {
        return (int)11L;
    }
    public static int ENOMEM() {
        return (int)12L;
    }
    public static int EACCES() {
        return (int)13L;
    }
    public static int EFAULT() {
        return (int)14L;
    }
    public static int ENOTBLK() {
        return (int)15L;
    }
    public static int EBUSY() {
        return (int)16L;
    }
    public static int EEXIST() {
        return (int)17L;
    }
    public static int EXDEV() {
        return (int)18L;
    }
    public static int ENODEV() {
        return (int)19L;
    }
    public static int ENOTDIR() {
        return (int)20L;
    }
    public static int EISDIR() {
        return (int)21L;
    }
    public static int EINVAL() {
        return (int)22L;
    }
    public static int ENFILE() {
        return (int)23L;
    }
    public static int EMFILE() {
        return (int)24L;
    }
    public static int ENOTTY() {
        return (int)25L;
    }
    public static int ETXTBSY() {
        return (int)26L;
    }
    public static int EFBIG() {
        return (int)27L;
    }
    public static int ENOSPC() {
        return (int)28L;
    }
    public static int ESPIPE() {
        return (int)29L;
    }
    public static int EROFS() {
        return (int)30L;
    }
    public static int EMLINK() {
        return (int)31L;
    }
    public static int EPIPE() {
        return (int)32L;
    }
    public static int EDOM() {
        return (int)33L;
    }
    public static int ERANGE() {
        return (int)34L;
    }
    public static int EDEADLK() {
        return (int)35L;
    }
    public static int ENAMETOOLONG() {
        return (int)36L;
    }
    public static int ENOLCK() {
        return (int)37L;
    }
    public static int ENOSYS() {
        return (int)38L;
    }
    public static int ENOTEMPTY() {
        return (int)39L;
    }
    public static int ELOOP() {
        return (int)40L;
    }
    public static int ENOMSG() {
        return (int)42L;
    }
    public static int EIDRM() {
        return (int)43L;
    }
    public static int ECHRNG() {
        return (int)44L;
    }
    public static int EL2NSYNC() {
        return (int)45L;
    }
    public static int EL3HLT() {
        return (int)46L;
    }
    public static int EL3RST() {
        return (int)47L;
    }
    public static int ELNRNG() {
        return (int)48L;
    }
    public static int EUNATCH() {
        return (int)49L;
    }
    public static int ENOCSI() {
        return (int)50L;
    }
    public static int EL2HLT() {
        return (int)51L;
    }
    public static int EBADE() {
        return (int)52L;
    }
    public static int EBADR() {
        return (int)53L;
    }
    public static int EXFULL() {
        return (int)54L;
    }
    public static int ENOANO() {
        return (int)55L;
    }
    public static int EBADRQC() {
        return (int)56L;
    }
    public static int EBADSLT() {
        return (int)57L;
    }
    public static int EBFONT() {
        return (int)59L;
    }
    public static int ENOSTR() {
        return (int)60L;
    }
    public static int ENODATA() {
        return (int)61L;
    }
    public static int ETIME() {
        return (int)62L;
    }
    public static int ENOSR() {
        return (int)63L;
    }
    public static int ENONET() {
        return (int)64L;
    }
    public static int ENOPKG() {
        return (int)65L;
    }
    public static int EREMOTE() {
        return (int)66L;
    }
    public static int ENOLINK() {
        return (int)67L;
    }
    public static int EADV() {
        return (int)68L;
    }
    public static int ESRMNT() {
        return (int)69L;
    }
    public static int ECOMM() {
        return (int)70L;
    }
    public static int EPROTO() {
        return (int)71L;
    }
    public static int EMULTIHOP() {
        return (int)72L;
    }
    public static int EDOTDOT() {
        return (int)73L;
    }
    public static int EBADMSG() {
        return (int)74L;
    }
    public static int EOVERFLOW() {
        return (int)75L;
    }
    public static int ENOTUNIQ() {
        return (int)76L;
    }
    public static int EBADFD() {
        return (int)77L;
    }
    public static int EREMCHG() {
        return (int)78L;
    }
    public static int ELIBACC() {
        return (int)79L;
    }
    public static int ELIBBAD() {
        return (int)80L;
    }
    public static int ELIBSCN() {
        return (int)81L;
    }
    public static int ELIBMAX() {
        return (int)82L;
    }
    public static int ELIBEXEC() {
        return (int)83L;
    }
    public static int EILSEQ() {
        return (int)84L;
    }
    public static int ERESTART() {
        return (int)85L;
    }
    public static int ESTRPIPE() {
        return (int)86L;
    }
    public static int EUSERS() {
        return (int)87L;
    }
    public static int ENOTSOCK() {
        return (int)88L;
    }
    public static int EDESTADDRREQ() {
        return (int)89L;
    }
    public static int EMSGSIZE() {
        return (int)90L;
    }
    public static int EPROTOTYPE() {
        return (int)91L;
    }
    public static int ENOPROTOOPT() {
        return (int)92L;
    }
    public static int EPROTONOSUPPORT() {
        return (int)93L;
    }
    public static int ESOCKTNOSUPPORT() {
        return (int)94L;
    }
    public static int EOPNOTSUPP() {
        return (int)95L;
    }
    public static int EPFNOSUPPORT() {
        return (int)96L;
    }
    public static int EAFNOSUPPORT() {
        return (int)97L;
    }
    public static int EADDRINUSE() {
        return (int)98L;
    }
    public static int EADDRNOTAVAIL() {
        return (int)99L;
    }
    public static int ENETDOWN() {
        return (int)100L;
    }
    public static int ENETUNREACH() {
        return (int)101L;
    }
    public static int ENETRESET() {
        return (int)102L;
    }
    public static int ECONNABORTED() {
        return (int)103L;
    }
    public static int ECONNRESET() {
        return (int)104L;
    }
    public static int ENOBUFS() {
        return (int)105L;
    }
    public static int EISCONN() {
        return (int)106L;
    }
    public static int ENOTCONN() {
        return (int)107L;
    }
    public static int ESHUTDOWN() {
        return (int)108L;
    }
    public static int ETOOMANYREFS() {
        return (int)109L;
    }
    public static int ETIMEDOUT() {
        return (int)110L;
    }
    public static int ECONNREFUSED() {
        return (int)111L;
    }
    public static int EHOSTDOWN() {
        return (int)112L;
    }
    public static int EHOSTUNREACH() {
        return (int)113L;
    }
    public static int EALREADY() {
        return (int)114L;
    }
    public static int EINPROGRESS() {
        return (int)115L;
    }
    public static int ESTALE() {
        return (int)116L;
    }
    public static int EUCLEAN() {
        return (int)117L;
    }
    public static int ENOTNAM() {
        return (int)118L;
    }
    public static int ENAVAIL() {
        return (int)119L;
    }
    public static int EISNAM() {
        return (int)120L;
    }
    public static int EREMOTEIO() {
        return (int)121L;
    }
    public static int EDQUOT() {
        return (int)122L;
    }
    public static int ENOMEDIUM() {
        return (int)123L;
    }
    public static int EMEDIUMTYPE() {
        return (int)124L;
    }
    public static int ECANCELED() {
        return (int)125L;
    }
    public static int ENOKEY() {
        return (int)126L;
    }
    public static int EKEYEXPIRED() {
        return (int)127L;
    }
    public static int EKEYREVOKED() {
        return (int)128L;
    }
    public static int EKEYREJECTED() {
        return (int)129L;
    }
    public static int EOWNERDEAD() {
        return (int)130L;
    }
    public static int ENOTRECOVERABLE() {
        return (int)131L;
    }
    public static int ERFKILL() {
        return (int)132L;
    }
    public static int EHWPOISON() {
        return (int)133L;
    }
    public static int G_USEC_PER_SEC() {
        return (int)1000000L;
    }
    public static int G_ALLOC_ONLY() {
        return (int)1L;
    }
    public static int G_ALLOC_AND_FREE() {
        return (int)2L;
    }
    public static int G_ALLOCATOR_LIST() {
        return (int)1L;
    }
    public static int G_ALLOCATOR_SLIST() {
        return (int)2L;
    }
    public static int G_ALLOCATOR_NODE() {
        return (int)3L;
    }
    public static int _PTHREAD_H() {
        return (int)1L;
    }
    public static int _SCHED_H() {
        return (int)1L;
    }
    public static int _BITS_SCHED_H() {
        return (int)1L;
    }
    public static int SCHED_OTHER() {
        return (int)0L;
    }
    public static int SCHED_FIFO() {
        return (int)1L;
    }
    public static int SCHED_RR() {
        return (int)2L;
    }
    public static int _BITS_TYPES_STRUCT_SCHED_PARAM() {
        return (int)1L;
    }
    public static int _BITS_CPU_SET_H() {
        return (int)1L;
    }
    public static int __CPU_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_SETJMP_H() {
        return (int)1L;
    }
    public static int __jmp_buf_tag_defined() {
        return (int)1L;
    }
    public static int PTHREAD_ONCE_INIT() {
        return (int)0L;
    }
    public static int G_SIGNAL_FLAGS_MASK() {
        return (int)511L;
    }
    public static int G_SIGNAL_MATCH_MASK() {
        return (int)63L;
    }
    public static int _UNISTD_H() {
        return (int)1L;
    }
    public static int _XOPEN_VERSION() {
        return (int)700L;
    }
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    public static int _XOPEN_XPG2() {
        return (int)1L;
    }
    public static int _XOPEN_XPG3() {
        return (int)1L;
    }
    public static int _XOPEN_XPG4() {
        return (int)1L;
    }
    public static int _XOPEN_UNIX() {
        return (int)1L;
    }
    public static int _XOPEN_ENH_I18N() {
        return (int)1L;
    }
    public static int _XOPEN_LEGACY() {
        return (int)1L;
    }
    public static int _BITS_POSIX_OPT_H() {
        return (int)1L;
    }
    public static int _POSIX_JOB_CONTROL() {
        return (int)1L;
    }
    public static int _POSIX_SAVED_IDS() {
        return (int)1L;
    }
    public static int _POSIX_CHOWN_RESTRICTED() {
        return (int)0L;
    }
    public static int _POSIX_NO_TRUNC() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME_THREADS() {
        return (int)1L;
    }
    public static int _XOPEN_SHM() {
        return (int)1L;
    }
    public static int _POSIX_REENTRANT_FUNCTIONS() {
        return (int)1L;
    }
    public static int _POSIX_ASYNC_IO() {
        return (int)1L;
    }
    public static int _LFS_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS64_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_STDIO() {
        return (int)1L;
    }
    public static int _POSIX_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_THREAD_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_REGEXP() {
        return (int)1L;
    }
    public static int _POSIX_SHELL() {
        return (int)1L;
    }
    public static int _POSIX_MONOTONIC_CLOCK() {
        return (int)0L;
    }
    public static int _POSIX_V7_LP64_OFF64() {
        return (int)1L;
    }
    public static int _POSIX_V6_LP64_OFF64() {
        return (int)1L;
    }
    public static int _XBS5_LP64_OFF64() {
        return (int)1L;
    }
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    public static int R_OK() {
        return (int)4L;
    }
    public static int W_OK() {
        return (int)2L;
    }
    public static int X_OK() {
        return (int)1L;
    }
    public static int F_OK() {
        return (int)0L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int _GETOPT_POSIX_H() {
        return (int)1L;
    }
    public static int _GETOPT_CORE_H() {
        return (int)1L;
    }
    public static int F_ULOCK() {
        return (int)0L;
    }
    public static int F_LOCK() {
        return (int)1L;
    }
    public static int F_TLOCK() {
        return (int)2L;
    }
    public static int F_TEST() {
        return (int)3L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfShort gint16 = Constants$root.C_SHORT$LAYOUT;
    public static OfInt gint32 = Constants$root.C_INT$LAYOUT;
    public static OfLong gint64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong gssize = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong goffset = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong gintptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt GPid = Constants$root.C_INT$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.clock$MH, "clock");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$0.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.time$MH, "time");
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.difftime$MH, "difftime");
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.mktime$MH, "mktime");
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.strftime$MH, "strftime");
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.strftime_l$MH, "strftime_l");
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.gmtime$MH, "gmtime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.localtime$MH, "localtime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.gmtime_r$MH, "gmtime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.localtime_r$MH, "localtime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.asctime$MH, "asctime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.ctime$MH, "ctime");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.asctime_r$MH, "asctime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.ctime_r$MH, "ctime_r");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$2.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$2.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$2.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$2.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$2.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$2.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$2.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$2.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$3.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.tzset$MH, "tzset");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$3.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$3.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$3.daylight$VH.get(RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$3.daylight$VH.set(RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$3.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$3.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$3.timezone$VH.get(RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$3.timezone$VH.set(RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$3.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.timegm$MH, "timegm");
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$3.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.timelocal$MH, "timelocal");
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$3.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.dysize$MH, "dysize");
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.nanosleep$MH, "nanosleep");
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.clock_getres$MH, "clock_getres");
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.clock_gettime$MH, "clock_gettime");
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.clock_settime$MH, "clock_settime");
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.clock_nanosleep$MH, "clock_nanosleep");
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.clock_getcpuclockid$MH, "clock_getcpuclockid");
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.timer_create$MH, "timer_create");
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.timer_delete$MH, "timer_delete");
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.timer_settime$MH, "timer_settime");
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.timer_gettime$MH, "timer_gettime");
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.timer_getoverrun$MH, "timer_getoverrun");
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.timespec_get$MH, "timespec_get");
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfByte gchar = Constants$root.C_CHAR$LAYOUT;
    public static OfShort gshort = Constants$root.C_SHORT$LAYOUT;
    public static OfLong glong = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt gint = Constants$root.C_INT$LAYOUT;
    public static OfInt gboolean = Constants$root.C_INT$LAYOUT;
    public static OfFloat gfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble gdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress gpointer = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress gconstpointer = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _GLIB_CHECKED_ADD_U32$MH() {
        return RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_ADD_U32$MH,"_GLIB_CHECKED_ADD_U32");
    }
    public static int _GLIB_CHECKED_ADD_U32 ( Addressable dest,  int a,  int b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_ADD_U32$MH, "_GLIB_CHECKED_ADD_U32");
        try {
            return (int)mh$.invokeExact(dest, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _GLIB_CHECKED_MUL_U32$MH() {
        return RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_MUL_U32$MH,"_GLIB_CHECKED_MUL_U32");
    }
    public static int _GLIB_CHECKED_MUL_U32 ( Addressable dest,  int a,  int b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_MUL_U32$MH, "_GLIB_CHECKED_MUL_U32");
        try {
            return (int)mh$.invokeExact(dest, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _GLIB_CHECKED_ADD_U64$MH() {
        return RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_ADD_U64$MH,"_GLIB_CHECKED_ADD_U64");
    }
    public static int _GLIB_CHECKED_ADD_U64 ( Addressable dest,  long a,  long b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_ADD_U64$MH, "_GLIB_CHECKED_ADD_U64");
        try {
            return (int)mh$.invokeExact(dest, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _GLIB_CHECKED_MUL_U64$MH() {
        return RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_MUL_U64$MH,"_GLIB_CHECKED_MUL_U64");
    }
    public static int _GLIB_CHECKED_MUL_U64 ( Addressable dest,  long a,  long b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9._GLIB_CHECKED_MUL_U64$MH, "_GLIB_CHECKED_MUL_U64");
        try {
            return (int)mh$.invokeExact(dest, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt grefcount = Constants$root.C_INT$LAYOUT;
    public static OfInt gatomicrefcount = Constants$root.C_INT$LAYOUT;
    public static MethodHandle g_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$10.g_array_new$MH,"g_array_new");
    }
    public static MemoryAddress g_array_new ( int zero_terminated,  int clear_,  int element_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.g_array_new$MH, "g_array_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(zero_terminated, clear_, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$10.g_array_steal$MH,"g_array_steal");
    }
    public static MemoryAddress g_array_steal ( Addressable array,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.g_array_steal$MH, "g_array_steal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$10.g_array_sized_new$MH,"g_array_sized_new");
    }
    public static MemoryAddress g_array_sized_new ( int zero_terminated,  int clear_,  int element_size,  int reserved_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.g_array_sized_new$MH, "g_array_sized_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(zero_terminated, clear_, element_size, reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$10.g_array_copy$MH,"g_array_copy");
    }
    public static MemoryAddress g_array_copy ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.g_array_copy$MH, "g_array_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$10.g_array_free$MH,"g_array_free");
    }
    public static MemoryAddress g_array_free ( Addressable array,  int free_segment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.g_array_free$MH, "g_array_free");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$10.g_array_ref$MH,"g_array_ref");
    }
    public static MemoryAddress g_array_ref ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.g_array_ref$MH, "g_array_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$11.g_array_unref$MH,"g_array_unref");
    }
    public static void g_array_unref ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.g_array_unref$MH, "g_array_unref");
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_get_element_size$MH() {
        return RuntimeHelper.requireNonNull(constants$11.g_array_get_element_size$MH,"g_array_get_element_size");
    }
    public static int g_array_get_element_size ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.g_array_get_element_size$MH, "g_array_get_element_size");
        try {
            return (int)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_append_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$11.g_array_append_vals$MH,"g_array_append_vals");
    }
    public static MemoryAddress g_array_append_vals ( Addressable array,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.g_array_append_vals$MH, "g_array_append_vals");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_prepend_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$11.g_array_prepend_vals$MH,"g_array_prepend_vals");
    }
    public static MemoryAddress g_array_prepend_vals ( Addressable array,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.g_array_prepend_vals$MH, "g_array_prepend_vals");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_insert_vals$MH() {
        return RuntimeHelper.requireNonNull(constants$11.g_array_insert_vals$MH,"g_array_insert_vals");
    }
    public static MemoryAddress g_array_insert_vals ( Addressable array,  int index_,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.g_array_insert_vals$MH, "g_array_insert_vals");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$11.g_array_set_size$MH,"g_array_set_size");
    }
    public static MemoryAddress g_array_set_size ( Addressable array,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.g_array_set_size$MH, "g_array_set_size");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$12.g_array_remove_index$MH,"g_array_remove_index");
    }
    public static MemoryAddress g_array_remove_index ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.g_array_remove_index$MH, "g_array_remove_index");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$12.g_array_remove_index_fast$MH,"g_array_remove_index_fast");
    }
    public static MemoryAddress g_array_remove_index_fast ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.g_array_remove_index_fast$MH, "g_array_remove_index_fast");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$12.g_array_remove_range$MH,"g_array_remove_range");
    }
    public static MemoryAddress g_array_remove_range ( Addressable array,  int index_,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.g_array_remove_range$MH, "g_array_remove_range");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$12.g_array_sort$MH,"g_array_sort");
    }
    public static void g_array_sort ( Addressable array,  Addressable compare_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.g_array_sort$MH, "g_array_sort");
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$12.g_array_sort_with_data$MH,"g_array_sort_with_data");
    }
    public static void g_array_sort_with_data ( Addressable array,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.g_array_sort_with_data$MH, "g_array_sort_with_data");
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_binary_search$MH() {
        return RuntimeHelper.requireNonNull(constants$12.g_array_binary_search$MH,"g_array_binary_search");
    }
    public static int g_array_binary_search ( Addressable array,  Addressable target,  Addressable compare_func,  Addressable out_match_index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.g_array_binary_search$MH, "g_array_binary_search");
        try {
            return (int)mh$.invokeExact(array, target, compare_func, out_match_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_array_set_clear_func$MH() {
        return RuntimeHelper.requireNonNull(constants$13.g_array_set_clear_func$MH,"g_array_set_clear_func");
    }
    public static void g_array_set_clear_func ( Addressable array,  Addressable clear_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.g_array_set_clear_func$MH, "g_array_set_clear_func");
        try {
            mh$.invokeExact(array, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$13.g_ptr_array_new$MH,"g_ptr_array_new");
    }
    public static MemoryAddress g_ptr_array_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.g_ptr_array_new$MH, "g_ptr_array_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_with_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$13.g_ptr_array_new_with_free_func$MH,"g_ptr_array_new_with_free_func");
    }
    public static MemoryAddress g_ptr_array_new_with_free_func ( Addressable element_free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.g_ptr_array_new_with_free_func$MH, "g_ptr_array_new_with_free_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$13.g_ptr_array_steal$MH,"g_ptr_array_steal");
    }
    public static MemoryAddress g_ptr_array_steal ( Addressable array,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.g_ptr_array_steal$MH, "g_ptr_array_steal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$13.g_ptr_array_copy$MH,"g_ptr_array_copy");
    }
    public static MemoryAddress g_ptr_array_copy ( Addressable array,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.g_ptr_array_copy$MH, "g_ptr_array_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$13.g_ptr_array_sized_new$MH,"g_ptr_array_sized_new");
    }
    public static MemoryAddress g_ptr_array_sized_new ( int reserved_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.g_ptr_array_sized_new$MH, "g_ptr_array_sized_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$14.g_ptr_array_new_full$MH,"g_ptr_array_new_full");
    }
    public static MemoryAddress g_ptr_array_new_full ( int reserved_size,  Addressable element_free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.g_ptr_array_new_full$MH, "g_ptr_array_new_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(reserved_size, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$14.g_ptr_array_free$MH,"g_ptr_array_free");
    }
    public static MemoryAddress g_ptr_array_free ( Addressable array,  int free_seg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.g_ptr_array_free$MH, "g_ptr_array_free");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, free_seg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$14.g_ptr_array_ref$MH,"g_ptr_array_ref");
    }
    public static MemoryAddress g_ptr_array_ref ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.g_ptr_array_ref$MH, "g_ptr_array_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$14.g_ptr_array_unref$MH,"g_ptr_array_unref");
    }
    public static void g_ptr_array_unref ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.g_ptr_array_unref$MH, "g_ptr_array_unref");
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_set_free_func$MH() {
        return RuntimeHelper.requireNonNull(constants$14.g_ptr_array_set_free_func$MH,"g_ptr_array_set_free_func");
    }
    public static void g_ptr_array_set_free_func ( Addressable array,  Addressable element_free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.g_ptr_array_set_free_func$MH, "g_ptr_array_set_free_func");
        try {
            mh$.invokeExact(array, element_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$14.g_ptr_array_set_size$MH,"g_ptr_array_set_size");
    }
    public static void g_ptr_array_set_size ( Addressable array,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.g_ptr_array_set_size$MH, "g_ptr_array_set_size");
        try {
            mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove_index$MH,"g_ptr_array_remove_index");
    }
    public static MemoryAddress g_ptr_array_remove_index ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove_index$MH, "g_ptr_array_remove_index");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove_index_fast$MH,"g_ptr_array_remove_index_fast");
    }
    public static MemoryAddress g_ptr_array_remove_index_fast ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove_index_fast$MH, "g_ptr_array_remove_index_fast");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal_index$MH() {
        return RuntimeHelper.requireNonNull(constants$15.g_ptr_array_steal_index$MH,"g_ptr_array_steal_index");
    }
    public static MemoryAddress g_ptr_array_steal_index ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.g_ptr_array_steal_index$MH, "g_ptr_array_steal_index");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_steal_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$15.g_ptr_array_steal_index_fast$MH,"g_ptr_array_steal_index_fast");
    }
    public static MemoryAddress g_ptr_array_steal_index_fast ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.g_ptr_array_steal_index_fast$MH, "g_ptr_array_steal_index_fast");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove$MH,"g_ptr_array_remove");
    }
    public static int g_ptr_array_remove ( Addressable array,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove$MH, "g_ptr_array_remove");
        try {
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove_fast$MH,"g_ptr_array_remove_fast");
    }
    public static int g_ptr_array_remove_fast ( Addressable array,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.g_ptr_array_remove_fast$MH, "g_ptr_array_remove_fast");
        try {
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$16.g_ptr_array_remove_range$MH,"g_ptr_array_remove_range");
    }
    public static MemoryAddress g_ptr_array_remove_range ( Addressable array,  int index_,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.g_ptr_array_remove_range$MH, "g_ptr_array_remove_range");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_add$MH() {
        return RuntimeHelper.requireNonNull(constants$16.g_ptr_array_add$MH,"g_ptr_array_add");
    }
    public static void g_ptr_array_add ( Addressable array,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.g_ptr_array_add$MH, "g_ptr_array_add");
        try {
            mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_extend$MH() {
        return RuntimeHelper.requireNonNull(constants$16.g_ptr_array_extend$MH,"g_ptr_array_extend");
    }
    public static void g_ptr_array_extend ( Addressable array_to_extend,  Addressable array,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.g_ptr_array_extend$MH, "g_ptr_array_extend");
        try {
            mh$.invokeExact(array_to_extend, array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_extend_and_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$16.g_ptr_array_extend_and_steal$MH,"g_ptr_array_extend_and_steal");
    }
    public static void g_ptr_array_extend_and_steal ( Addressable array_to_extend,  Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.g_ptr_array_extend_and_steal$MH, "g_ptr_array_extend_and_steal");
        try {
            mh$.invokeExact(array_to_extend, array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$16.g_ptr_array_insert$MH,"g_ptr_array_insert");
    }
    public static void g_ptr_array_insert ( Addressable array,  int index_,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.g_ptr_array_insert$MH, "g_ptr_array_insert");
        try {
            mh$.invokeExact(array, index_, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$16.g_ptr_array_sort$MH,"g_ptr_array_sort");
    }
    public static void g_ptr_array_sort ( Addressable array,  Addressable compare_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.g_ptr_array_sort$MH, "g_ptr_array_sort");
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$17.g_ptr_array_sort_with_data$MH,"g_ptr_array_sort_with_data");
    }
    public static void g_ptr_array_sort_with_data ( Addressable array,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.g_ptr_array_sort_with_data$MH, "g_ptr_array_sort_with_data");
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$17.g_ptr_array_foreach$MH,"g_ptr_array_foreach");
    }
    public static void g_ptr_array_foreach ( Addressable array,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.g_ptr_array_foreach$MH, "g_ptr_array_foreach");
        try {
            mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_find$MH() {
        return RuntimeHelper.requireNonNull(constants$17.g_ptr_array_find$MH,"g_ptr_array_find");
    }
    public static int g_ptr_array_find ( Addressable haystack,  Addressable needle,  Addressable index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.g_ptr_array_find$MH, "g_ptr_array_find");
        try {
            return (int)mh$.invokeExact(haystack, needle, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ptr_array_find_with_equal_func$MH() {
        return RuntimeHelper.requireNonNull(constants$17.g_ptr_array_find_with_equal_func$MH,"g_ptr_array_find_with_equal_func");
    }
    public static int g_ptr_array_find_with_equal_func ( Addressable haystack,  Addressable needle,  Addressable equal_func,  Addressable index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.g_ptr_array_find_with_equal_func$MH, "g_ptr_array_find_with_equal_func");
        try {
            return (int)mh$.invokeExact(haystack, needle, equal_func, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_new$MH() {
        return RuntimeHelper.requireNonNull(constants$17.g_byte_array_new$MH,"g_byte_array_new");
    }
    public static MemoryAddress g_byte_array_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.g_byte_array_new$MH, "g_byte_array_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_new_take$MH() {
        return RuntimeHelper.requireNonNull(constants$17.g_byte_array_new_take$MH,"g_byte_array_new_take");
    }
    public static MemoryAddress g_byte_array_new_take ( Addressable data,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.g_byte_array_new_take$MH, "g_byte_array_new_take");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_byte_array_steal$MH,"g_byte_array_steal");
    }
    public static MemoryAddress g_byte_array_steal ( Addressable array,  Addressable len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.g_byte_array_steal$MH, "g_byte_array_steal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sized_new$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_byte_array_sized_new$MH,"g_byte_array_sized_new");
    }
    public static MemoryAddress g_byte_array_sized_new ( int reserved_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.g_byte_array_sized_new$MH, "g_byte_array_sized_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_free$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_byte_array_free$MH,"g_byte_array_free");
    }
    public static MemoryAddress g_byte_array_free ( Addressable array,  int free_segment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.g_byte_array_free$MH, "g_byte_array_free");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_free_to_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_byte_array_free_to_bytes$MH,"g_byte_array_free_to_bytes");
    }
    public static MemoryAddress g_byte_array_free_to_bytes ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.g_byte_array_free_to_bytes$MH, "g_byte_array_free_to_bytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_byte_array_ref$MH,"g_byte_array_ref");
    }
    public static MemoryAddress g_byte_array_ref ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.g_byte_array_ref$MH, "g_byte_array_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$18.g_byte_array_unref$MH,"g_byte_array_unref");
    }
    public static void g_byte_array_unref ( Addressable array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.g_byte_array_unref$MH, "g_byte_array_unref");
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_append$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_byte_array_append$MH,"g_byte_array_append");
    }
    public static MemoryAddress g_byte_array_append ( Addressable array,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.g_byte_array_append$MH, "g_byte_array_append");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_byte_array_prepend$MH,"g_byte_array_prepend");
    }
    public static MemoryAddress g_byte_array_prepend ( Addressable array,  Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.g_byte_array_prepend$MH, "g_byte_array_prepend");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_set_size$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_byte_array_set_size$MH,"g_byte_array_set_size");
    }
    public static MemoryAddress g_byte_array_set_size ( Addressable array,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.g_byte_array_set_size$MH, "g_byte_array_set_size");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_index$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_byte_array_remove_index$MH,"g_byte_array_remove_index");
    }
    public static MemoryAddress g_byte_array_remove_index ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.g_byte_array_remove_index$MH, "g_byte_array_remove_index");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_index_fast$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_byte_array_remove_index_fast$MH,"g_byte_array_remove_index_fast");
    }
    public static MemoryAddress g_byte_array_remove_index_fast ( Addressable array,  int index_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.g_byte_array_remove_index_fast$MH, "g_byte_array_remove_index_fast");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$19.g_byte_array_remove_range$MH,"g_byte_array_remove_range");
    }
    public static MemoryAddress g_byte_array_remove_range ( Addressable array,  int index_,  int length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.g_byte_array_remove_range$MH, "g_byte_array_remove_range");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort$MH,"g_byte_array_sort");
    }
    public static void g_byte_array_sort ( Addressable array,  Addressable compare_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort$MH, "g_byte_array_sort");
        try {
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_byte_array_sort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort_with_data$MH,"g_byte_array_sort_with_data");
    }
    public static void g_byte_array_sort_with_data ( Addressable array,  Addressable compare_func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_byte_array_sort_with_data$MH, "g_byte_array_sort_with_data");
        try {
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_get$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_get$MH,"g_atomic_int_get");
    }
    public static int g_atomic_int_get ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_get$MH, "g_atomic_int_get");
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_set$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_set$MH,"g_atomic_int_set");
    }
    public static void g_atomic_int_set ( Addressable atomic,  int newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_set$MH, "g_atomic_int_set");
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_inc$MH,"g_atomic_int_inc");
    }
    public static void g_atomic_int_inc ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_inc$MH, "g_atomic_int_inc");
        try {
            mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_dec_and_test$MH() {
        return RuntimeHelper.requireNonNull(constants$20.g_atomic_int_dec_and_test$MH,"g_atomic_int_dec_and_test");
    }
    public static int g_atomic_int_dec_and_test ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.g_atomic_int_dec_and_test$MH, "g_atomic_int_dec_and_test");
        try {
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_compare_and_exchange$MH,"g_atomic_int_compare_and_exchange");
    }
    public static int g_atomic_int_compare_and_exchange ( Addressable atomic,  int oldval,  int newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_compare_and_exchange$MH, "g_atomic_int_compare_and_exchange");
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_add$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_add$MH,"g_atomic_int_add");
    }
    public static int g_atomic_int_add ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_add$MH, "g_atomic_int_add");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_and$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_and$MH,"g_atomic_int_and");
    }
    public static int g_atomic_int_and ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_and$MH, "g_atomic_int_and");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_or$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_or$MH,"g_atomic_int_or");
    }
    public static int g_atomic_int_or ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_or$MH, "g_atomic_int_or");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_int_xor$MH,"g_atomic_int_xor");
    }
    public static int g_atomic_int_xor ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_int_xor$MH, "g_atomic_int_xor");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_get$MH() {
        return RuntimeHelper.requireNonNull(constants$21.g_atomic_pointer_get$MH,"g_atomic_pointer_get");
    }
    public static MemoryAddress g_atomic_pointer_get ( Addressable atomic) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.g_atomic_pointer_get$MH, "g_atomic_pointer_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_set$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_set$MH,"g_atomic_pointer_set");
    }
    public static void g_atomic_pointer_set ( Addressable atomic,  Addressable newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_set$MH, "g_atomic_pointer_set");
        try {
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_compare_and_exchange$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_compare_and_exchange$MH,"g_atomic_pointer_compare_and_exchange");
    }
    public static int g_atomic_pointer_compare_and_exchange ( Addressable atomic,  Addressable oldval,  Addressable newval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_compare_and_exchange$MH, "g_atomic_pointer_compare_and_exchange");
        try {
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_add$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_add$MH,"g_atomic_pointer_add");
    }
    public static long g_atomic_pointer_add ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_add$MH, "g_atomic_pointer_add");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_and$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_and$MH,"g_atomic_pointer_and");
    }
    public static long g_atomic_pointer_and ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_and$MH, "g_atomic_pointer_and");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_or$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_or$MH,"g_atomic_pointer_or");
    }
    public static long g_atomic_pointer_or ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_or$MH, "g_atomic_pointer_or");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_pointer_xor$MH() {
        return RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_xor$MH,"g_atomic_pointer_xor");
    }
    public static long g_atomic_pointer_xor ( Addressable atomic,  long val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.g_atomic_pointer_xor$MH, "g_atomic_pointer_xor");
        try {
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_int_exchange_and_add$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_atomic_int_exchange_and_add$MH,"g_atomic_int_exchange_and_add");
    }
    public static int g_atomic_int_exchange_and_add ( Addressable atomic,  int val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_atomic_int_exchange_and_add$MH, "g_atomic_int_exchange_and_add");
        try {
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_try_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_try_string$MH,"g_quark_try_string");
    }
    public static int g_quark_try_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_try_string$MH, "g_quark_try_string");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_from_static_string$MH,"g_quark_from_static_string");
    }
    public static int g_quark_from_static_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_from_static_string$MH, "g_quark_from_static_string");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_from_string$MH,"g_quark_from_string");
    }
    public static int g_quark_from_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_from_string$MH, "g_quark_from_string");
        try {
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_quark_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_quark_to_string$MH,"g_quark_to_string");
    }
    public static MemoryAddress g_quark_to_string ( int quark) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_quark_to_string$MH, "g_quark_to_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(quark);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_string$MH() {
        return RuntimeHelper.requireNonNull(constants$23.g_intern_string$MH,"g_intern_string");
    }
    public static MemoryAddress g_intern_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.g_intern_string$MH, "g_intern_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_intern_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$24.g_intern_static_string$MH,"g_intern_static_string");
    }
    public static MemoryAddress g_intern_static_string ( Addressable string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.g_intern_static_string$MH, "g_intern_static_string");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register_static$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_domain_register_static$MH,"g_error_domain_register_static");
    }
    public static int g_error_domain_register_static ( Addressable error_type_name,  long error_type_private_size,  Addressable error_type_init,  Addressable error_type_copy,  Addressable error_type_clear) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_domain_register_static$MH, "g_error_domain_register_static");
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_domain_register$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_domain_register$MH,"g_error_domain_register");
    }
    public static int g_error_domain_register ( Addressable error_type_name,  long error_type_private_size,  Addressable error_type_init,  Addressable error_type_copy,  Addressable error_type_clear) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_domain_register$MH, "g_error_domain_register");
        try {
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_new$MH,"g_error_new");
    }
    public static MemoryAddress g_error_new ( int domain,  int code,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_new$MH, "g_error_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, code, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_new_literal$MH,"g_error_new_literal");
    }
    public static MemoryAddress g_error_new_literal ( int domain,  int code,  Addressable message) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_new_literal$MH, "g_error_new_literal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_new_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$25.g_error_new_valist$MH,"g_error_new_valist");
    }
    public static MemoryAddress g_error_new_valist ( int domain,  int code,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.g_error_new_valist$MH, "g_error_new_valist");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(domain, code, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_free$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_error_free$MH,"g_error_free");
    }
    public static void g_error_free ( Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_error_free$MH, "g_error_free");
        try {
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_error_copy$MH,"g_error_copy");
    }
    public static MemoryAddress g_error_copy ( Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_error_copy$MH, "g_error_copy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_error_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_error_matches$MH,"g_error_matches");
    }
    public static int g_error_matches ( Addressable error,  int domain,  int code) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_error_matches$MH, "g_error_matches");
        try {
            return (int)mh$.invokeExact(error, domain, code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_set_error$MH,"g_set_error");
    }
    public static void g_set_error ( Addressable err,  int domain,  int code,  Addressable format, Object... x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_set_error$MH, "g_set_error");
        try {
            mh$.invokeExact(err, domain, code, format, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_error_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_set_error_literal$MH,"g_set_error_literal");
    }
    public static void g_set_error_literal ( Addressable err,  int domain,  int code,  Addressable message) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_set_error_literal$MH, "g_set_error_literal");
        try {
            mh$.invokeExact(err, domain, code, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_error$MH() {
        return RuntimeHelper.requireNonNull(constants$26.g_propagate_error$MH,"g_propagate_error");
    }
    public static void g_propagate_error ( Addressable dest,  Addressable src) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.g_propagate_error$MH, "g_propagate_error");
        try {
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_clear_error$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_clear_error$MH,"g_clear_error");
    }
    public static void g_clear_error ( Addressable err) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_clear_error$MH, "g_clear_error");
        try {
            mh$.invokeExact(err);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_prefix_error$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_prefix_error$MH,"g_prefix_error");
    }
    public static void g_prefix_error ( Addressable err,  Addressable format, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_prefix_error$MH, "g_prefix_error");
        try {
            mh$.invokeExact(err, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_prefix_error_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_prefix_error_literal$MH,"g_prefix_error_literal");
    }
    public static void g_prefix_error_literal ( Addressable err,  Addressable prefix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_prefix_error_literal$MH, "g_prefix_error_literal");
        try {
            mh$.invokeExact(err, prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_propagate_prefixed_error$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_propagate_prefixed_error$MH,"g_propagate_prefixed_error");
    }
    public static void g_propagate_prefixed_error ( Addressable dest,  Addressable src,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_propagate_prefixed_error$MH, "g_propagate_prefixed_error");
        try {
            mh$.invokeExact(dest, src, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_name$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_get_user_name$MH,"g_get_user_name");
    }
    public static MemoryAddress g_get_user_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_get_user_name$MH, "g_get_user_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_real_name$MH() {
        return RuntimeHelper.requireNonNull(constants$27.g_get_real_name$MH,"g_get_real_name");
    }
    public static MemoryAddress g_get_real_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.g_get_real_name$MH, "g_get_real_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_home_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_home_dir$MH,"g_get_home_dir");
    }
    public static MemoryAddress g_get_home_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_home_dir$MH, "g_get_home_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_tmp_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_tmp_dir$MH,"g_get_tmp_dir");
    }
    public static MemoryAddress g_get_tmp_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_tmp_dir$MH, "g_get_tmp_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_host_name$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_host_name$MH,"g_get_host_name");
    }
    public static MemoryAddress g_get_host_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_host_name$MH, "g_get_host_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_prgname$MH,"g_get_prgname");
    }
    public static MemoryAddress g_get_prgname () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_prgname$MH, "g_get_prgname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_prgname$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_set_prgname$MH,"g_set_prgname");
    }
    public static void g_set_prgname ( Addressable prgname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_set_prgname$MH, "g_set_prgname");
        try {
            mh$.invokeExact(prgname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$28.g_get_application_name$MH,"g_get_application_name");
    }
    public static MemoryAddress g_get_application_name () {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.g_get_application_name$MH, "g_get_application_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_application_name$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_set_application_name$MH,"g_set_application_name");
    }
    public static void g_set_application_name ( Addressable application_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_set_application_name$MH, "g_set_application_name");
        try {
            mh$.invokeExact(application_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_os_info$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_os_info$MH,"g_get_os_info");
    }
    public static MemoryAddress g_get_os_info ( Addressable key_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_os_info$MH, "g_get_os_info");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_reload_user_special_dirs_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_reload_user_special_dirs_cache$MH,"g_reload_user_special_dirs_cache");
    }
    public static void g_reload_user_special_dirs_cache () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_reload_user_special_dirs_cache$MH, "g_reload_user_special_dirs_cache");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_data_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_user_data_dir$MH,"g_get_user_data_dir");
    }
    public static MemoryAddress g_get_user_data_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_user_data_dir$MH, "g_get_user_data_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_config_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_user_config_dir$MH,"g_get_user_config_dir");
    }
    public static MemoryAddress g_get_user_config_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_user_config_dir$MH, "g_get_user_config_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_cache_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$29.g_get_user_cache_dir$MH,"g_get_user_cache_dir");
    }
    public static MemoryAddress g_get_user_cache_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.g_get_user_cache_dir$MH, "g_get_user_cache_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_data_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_get_system_data_dirs$MH,"g_get_system_data_dirs");
    }
    public static MemoryAddress g_get_system_data_dirs () {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_get_system_data_dirs$MH, "g_get_system_data_dirs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_system_config_dirs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_get_system_config_dirs$MH,"g_get_system_config_dirs");
    }
    public static MemoryAddress g_get_system_config_dirs () {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_get_system_config_dirs$MH, "g_get_system_config_dirs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_user_runtime_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_get_user_runtime_dir$MH,"g_get_user_runtime_dir");
    }
    public static MemoryAddress g_get_user_runtime_dir () {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_get_user_runtime_dir$MH, "g_get_user_runtime_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_USER_DIRECTORY_DESKTOP() {
        return (int)0L;
    }
    public static int G_USER_DIRECTORY_DOCUMENTS() {
        return (int)1L;
    }
    public static int G_USER_DIRECTORY_DOWNLOAD() {
        return (int)2L;
    }
    public static int G_USER_DIRECTORY_MUSIC() {
        return (int)3L;
    }
    public static int G_USER_DIRECTORY_PICTURES() {
        return (int)4L;
    }
    public static int G_USER_DIRECTORY_PUBLIC_SHARE() {
        return (int)5L;
    }
    public static int G_USER_DIRECTORY_TEMPLATES() {
        return (int)6L;
    }
    public static int G_USER_DIRECTORY_VIDEOS() {
        return (int)7L;
    }
    public static int G_USER_N_DIRECTORIES() {
        return (int)8L;
    }
    public static MethodHandle g_get_user_special_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_get_user_special_dir$MH,"g_get_user_special_dir");
    }
    public static MemoryAddress g_get_user_special_dir ( int directory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_get_user_special_dir$MH, "g_get_user_special_dir");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(directory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_parse_debug_string$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_parse_debug_string$MH,"g_parse_debug_string");
    }
    public static int g_parse_debug_string ( Addressable string,  Addressable keys,  int nkeys) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_parse_debug_string$MH, "g_parse_debug_string");
        try {
            return (int)mh$.invokeExact(string, keys, nkeys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.g_snprintf$MH,"g_snprintf");
    }
    public static int g_snprintf ( Addressable string,  long n,  Addressable format, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.g_snprintf$MH, "g_snprintf");
        try {
            return (int)mh$.invokeExact(string, n, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_vsnprintf$MH,"g_vsnprintf");
    }
    public static int g_vsnprintf ( Addressable string,  long n,  Addressable format,  Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_vsnprintf$MH, "g_vsnprintf");
        try {
            return (int)mh$.invokeExact(string, n, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_nullify_pointer$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_nullify_pointer$MH,"g_nullify_pointer");
    }
    public static void g_nullify_pointer ( Addressable nullify_location) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_nullify_pointer$MH, "g_nullify_pointer");
        try {
            mh$.invokeExact(nullify_location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_FORMAT_SIZE_DEFAULT() {
        return (int)0L;
    }
    public static int G_FORMAT_SIZE_LONG_FORMAT() {
        return (int)1L;
    }
    public static int G_FORMAT_SIZE_IEC_UNITS() {
        return (int)2L;
    }
    public static int G_FORMAT_SIZE_BITS() {
        return (int)4L;
    }
    public static MethodHandle g_format_size_full$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_format_size_full$MH,"g_format_size_full");
    }
    public static MemoryAddress g_format_size_full ( long size,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_format_size_full$MH, "g_format_size_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(size, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_format_size$MH,"g_format_size");
    }
    public static MemoryAddress g_format_size ( long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_format_size$MH, "g_format_size");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_format_size_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$31.g_format_size_for_display$MH,"g_format_size_for_display");
    }
    public static MemoryAddress g_format_size_for_display ( long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.g_format_size_for_display$MH, "g_format_size_for_display");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_atexit$MH,"g_atexit");
    }
    public static void g_atexit ( Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_atexit$MH, "g_atexit");
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_find_program_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_find_program_in_path$MH,"g_find_program_in_path");
    }
    public static MemoryAddress g_find_program_in_path ( Addressable program) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_find_program_in_path$MH, "g_find_program_in_path");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_lsf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_bit_nth_lsf$MH,"g_bit_nth_lsf");
    }
    public static int g_bit_nth_lsf ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_bit_nth_lsf$MH, "g_bit_nth_lsf");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_msf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_bit_nth_msf$MH,"g_bit_nth_msf");
    }
    public static int g_bit_nth_msf ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_bit_nth_msf$MH, "g_bit_nth_msf");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_storage$MH() {
        return RuntimeHelper.requireNonNull(constants$32.g_bit_storage$MH,"g_bit_storage");
    }
    public static int g_bit_storage ( long number) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.g_bit_storage$MH, "g_bit_storage");
        try {
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_lsf_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_bit_nth_lsf_impl$MH,"g_bit_nth_lsf_impl");
    }
    public static int g_bit_nth_lsf_impl ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.g_bit_nth_lsf_impl$MH, "g_bit_nth_lsf_impl");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_nth_msf_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_bit_nth_msf_impl$MH,"g_bit_nth_msf_impl");
    }
    public static int g_bit_nth_msf_impl ( long mask,  int nth_bit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.g_bit_nth_msf_impl$MH, "g_bit_nth_msf_impl");
        try {
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_bit_storage_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.g_bit_storage_impl$MH,"g_bit_storage_impl");
    }
    public static int g_bit_storage_impl ( long number) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.g_bit_storage_impl$MH, "g_bit_storage_impl");
        try {
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.__ctype_get_mb_cur_max$MH, "__ctype_get_mb_cur_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$33.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.atof$MH, "atof");
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$33.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.atoi$MH, "atoi");
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$34.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.atol$MH, "atol");
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$34.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.atoll$MH, "atoll");
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtod$MH, "strtod");
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtof$MH, "strtof");
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtol$MH, "strtol");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strtoul$MH, "strtoul");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtoq$MH, "strtoq");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtouq$MH, "strtouq");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtoll$MH, "strtoll");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtoull$MH, "strtoull");
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$35.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.l64a$MH, "l64a");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$35.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.a64l$MH, "a64l");
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__bswap_16$MH, "__bswap_16");
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__bswap_32$MH, "__bswap_32");
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__bswap_64$MH, "__bswap_64");
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__uint16_identity$MH, "__uint16_identity");
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__uint32_identity$MH, "__uint32_identity");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.__uint64_identity$MH, "__uint64_identity");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$37.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.select$MH, "select");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$37.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.pselect$MH, "pselect");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$37.random$MH,"random");
    }
    public static long random () {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.random$MH, "random");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$37.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.srandom$MH, "srandom");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.initstate$MH, "initstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.setstate$MH, "setstate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.random_r$MH, "random_r");
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.srandom_r$MH, "srandom_r");
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.initstate_r$MH, "initstate_r");
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.setstate_r$MH, "setstate_r");
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$38.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.rand$MH, "rand");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$38.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.srand$MH, "srand");
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$39.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.rand_r$MH, "rand_r");
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.drand48$MH, "drand48");
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.erand48$MH, "erand48");
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.lrand48$MH, "lrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.nrand48$MH, "nrand48");
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$39.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.mrand48$MH, "mrand48");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$40.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.jrand48$MH, "jrand48");
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$40.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.srand48$MH, "srand48");
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$40.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.seed48$MH, "seed48");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$40.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.lcong48$MH, "lcong48");
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$40.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.drand48_r$MH, "drand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$40.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.erand48_r$MH, "erand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.lrand48_r$MH, "lrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.nrand48_r$MH, "nrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.mrand48_r$MH, "mrand48_r");
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.jrand48_r$MH, "jrand48_r");
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.srand48_r$MH, "srand48_r");
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.seed48_r$MH, "seed48_r");
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$42.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.lcong48_r$MH, "lcong48_r");
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.malloc$MH, "malloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.calloc$MH, "calloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.realloc$MH, "realloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$42.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.free$MH, "free");
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$42.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.reallocarray$MH, "reallocarray");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$43.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.alloca$MH, "alloca");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$43.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.valloc$MH, "valloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$43.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.posix_memalign$MH, "posix_memalign");
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$43.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.aligned_alloc$MH, "aligned_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$43.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.abort$MH, "abort");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$44.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.atexit$MH, "atexit");
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$44.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.at_quick_exit$MH, "at_quick_exit");
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.on_exit$MH, "on_exit");
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.exit$MH, "exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.quick_exit$MH, "quick_exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$45._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45._Exit$MH, "_Exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.getenv$MH, "getenv");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.putenv$MH, "putenv");
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.setenv$MH, "setenv");
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.unsetenv$MH, "unsetenv");
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.clearenv$MH, "clearenv");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.mktemp$MH, "mktemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.mkstemp$MH, "mkstemp");
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.mkstemps$MH, "mkstemps");
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.mkdtemp$MH, "mkdtemp");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$47.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.system$MH, "system");
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$47.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.realpath$MH, "realpath");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$48.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.bsearch$MH, "bsearch");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$48.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.qsort$MH, "qsort");
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$48.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.abs$MH, "abs");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$48.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.labs$MH, "labs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$48.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.llabs$MH, "llabs");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$48.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.div$MH, "div");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment div ( ResourceScope scope,  int __numer,  int __denom) {
        return div(SegmentAllocator.nativeAllocator(scope), __numer, __denom);
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$49.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.ldiv$MH, "ldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment ldiv ( ResourceScope scope,  long __numer,  long __denom) {
        return ldiv(SegmentAllocator.nativeAllocator(scope), __numer, __denom);
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$49.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.lldiv$MH, "lldiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment lldiv ( ResourceScope scope,  long __numer,  long __denom) {
        return lldiv(SegmentAllocator.nativeAllocator(scope), __numer, __denom);
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$49.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.ecvt$MH, "ecvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$49.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.fcvt$MH, "fcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$49.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.gcvt$MH, "gcvt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$49.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.ecvt_r$MH, "ecvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.fcvt_r$MH, "fcvt_r");
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.mblen$MH, "mblen");
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.mbtowc$MH, "mbtowc");
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$50.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.wctomb$MH, "wctomb");
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$50.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.mbstowcs$MH, "mbstowcs");
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$50.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.wcstombs$MH, "wcstombs");
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$51.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.rpmatch$MH, "rpmatch");
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$51.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.getsubopt$MH, "getsubopt");
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$51.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.getloadavg$MH, "getloadavg");
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$51.g_thread_error_quark$MH,"g_thread_error_quark");
    }
    public static int g_thread_error_quark () {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.g_thread_error_quark$MH, "g_thread_error_quark");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_THREAD_ERROR_AGAIN() {
        return (int)0L;
    }
    public static int G_ONCE_STATUS_NOTCALLED() {
        return (int)0L;
    }
    public static int G_ONCE_STATUS_PROGRESS() {
        return (int)1L;
    }
    public static int G_ONCE_STATUS_READY() {
        return (int)2L;
    }
    public static MethodHandle g_thread_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_ref$MH,"g_thread_ref");
    }
    public static MemoryAddress g_thread_ref ( Addressable thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_ref$MH, "g_thread_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_unref$MH,"g_thread_unref");
    }
    public static void g_thread_unref ( Addressable thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_unref$MH, "g_thread_unref");
        try {
            mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_new$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_new$MH,"g_thread_new");
    }
    public static MemoryAddress g_thread_new ( Addressable name,  Addressable func,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_new$MH, "g_thread_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_try_new$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_try_new$MH,"g_thread_try_new");
    }
    public static MemoryAddress g_thread_try_new ( Addressable name,  Addressable func,  Addressable data,  Addressable error) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_try_new$MH, "g_thread_try_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, func, data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_self$MH,"g_thread_self");
    }
    public static MemoryAddress g_thread_self () {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_self$MH, "g_thread_self");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$52.g_thread_exit$MH,"g_thread_exit");
    }
    public static void g_thread_exit ( Addressable retval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.g_thread_exit$MH, "g_thread_exit");
        try {
            mh$.invokeExact(retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_thread_join$MH,"g_thread_join");
    }
    public static MemoryAddress g_thread_join ( Addressable thread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_thread_join$MH, "g_thread_join");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_thread_yield$MH,"g_thread_yield");
    }
    public static void g_thread_yield () {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_thread_yield$MH, "g_thread_yield");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_init$MH,"g_mutex_init");
    }
    public static void g_mutex_init ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_init$MH, "g_mutex_init");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_clear$MH,"g_mutex_clear");
    }
    public static void g_mutex_clear ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_clear$MH, "g_mutex_clear");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_lock$MH,"g_mutex_lock");
    }
    public static void g_mutex_lock ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_lock$MH, "g_mutex_lock");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$53.g_mutex_trylock$MH,"g_mutex_trylock");
    }
    public static int g_mutex_trylock ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.g_mutex_trylock$MH, "g_mutex_trylock");
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_mutex_unlock$MH,"g_mutex_unlock");
    }
    public static void g_mutex_unlock ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_mutex_unlock$MH, "g_mutex_unlock");
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_init$MH,"g_rw_lock_init");
    }
    public static void g_rw_lock_init ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_init$MH, "g_rw_lock_init");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_clear$MH,"g_rw_lock_clear");
    }
    public static void g_rw_lock_clear ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_clear$MH, "g_rw_lock_clear");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_lock$MH,"g_rw_lock_writer_lock");
    }
    public static void g_rw_lock_writer_lock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_lock$MH, "g_rw_lock_writer_lock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_trylock$MH,"g_rw_lock_writer_trylock");
    }
    public static int g_rw_lock_writer_trylock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_trylock$MH, "g_rw_lock_writer_trylock");
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_unlock$MH,"g_rw_lock_writer_unlock");
    }
    public static void g_rw_lock_writer_unlock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.g_rw_lock_writer_unlock$MH, "g_rw_lock_writer_unlock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_lock$MH,"g_rw_lock_reader_lock");
    }
    public static void g_rw_lock_reader_lock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_lock$MH, "g_rw_lock_reader_lock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_trylock$MH,"g_rw_lock_reader_trylock");
    }
    public static int g_rw_lock_reader_trylock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_trylock$MH, "g_rw_lock_reader_trylock");
        try {
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_unlock$MH,"g_rw_lock_reader_unlock");
    }
    public static void g_rw_lock_reader_unlock ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rw_lock_reader_unlock$MH, "g_rw_lock_reader_unlock");
        try {
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_init$MH,"g_rec_mutex_init");
    }
    public static void g_rec_mutex_init ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_init$MH, "g_rec_mutex_init");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_clear$MH,"g_rec_mutex_clear");
    }
    public static void g_rec_mutex_clear ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_clear$MH, "g_rec_mutex_clear");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_lock$MH,"g_rec_mutex_lock");
    }
    public static void g_rec_mutex_lock ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.g_rec_mutex_lock$MH, "g_rec_mutex_lock");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_rec_mutex_trylock$MH,"g_rec_mutex_trylock");
    }
    public static int g_rec_mutex_trylock ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_rec_mutex_trylock$MH, "g_rec_mutex_trylock");
        try {
            return (int)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_rec_mutex_unlock$MH,"g_rec_mutex_unlock");
    }
    public static void g_rec_mutex_unlock ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_rec_mutex_unlock$MH, "g_rec_mutex_unlock");
        try {
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_init$MH,"g_cond_init");
    }
    public static void g_cond_init ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_init$MH, "g_cond_init");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_clear$MH,"g_cond_clear");
    }
    public static void g_cond_clear ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_clear$MH, "g_cond_clear");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_wait$MH,"g_cond_wait");
    }
    public static void g_cond_wait ( Addressable cond,  Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_wait$MH, "g_cond_wait");
        try {
            mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$56.g_cond_signal$MH,"g_cond_signal");
    }
    public static void g_cond_signal ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.g_cond_signal$MH, "g_cond_signal");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_cond_broadcast$MH,"g_cond_broadcast");
    }
    public static void g_cond_broadcast ( Addressable cond) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_cond_broadcast$MH, "g_cond_broadcast");
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_wait_until$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_cond_wait_until$MH,"g_cond_wait_until");
    }
    public static int g_cond_wait_until ( Addressable cond,  Addressable mutex,  long end_time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_cond_wait_until$MH, "g_cond_wait_until");
        try {
            return (int)mh$.invokeExact(cond, mutex, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_get$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_private_get$MH,"g_private_get");
    }
    public static MemoryAddress g_private_get ( Addressable key) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_private_get$MH, "g_private_get");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_set$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_private_set$MH,"g_private_set");
    }
    public static void g_private_set ( Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_private_set$MH, "g_private_set");
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_private_replace$MH,"g_private_replace");
    }
    public static void g_private_replace ( Addressable key,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_private_replace$MH, "g_private_replace");
        try {
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$57.g_once_impl$MH,"g_once_impl");
    }
    public static MemoryAddress g_once_impl ( Addressable once,  Addressable func,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.g_once_impl$MH, "g_once_impl");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(once, func, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_enter$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_once_init_enter$MH,"g_once_init_enter");
    }
    public static int g_once_init_enter ( Addressable location) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_once_init_enter$MH, "g_once_init_enter");
        try {
            return (int)mh$.invokeExact(location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_leave$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_once_init_leave$MH,"g_once_init_leave");
    }
    public static void g_once_init_leave ( Addressable location,  long result) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_once_init_leave$MH, "g_once_init_leave");
        try {
            mh$.invokeExact(location, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_get_num_processors$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_get_num_processors$MH,"g_get_num_processors");
    }
    public static int g_get_num_processors () {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_get_num_processors$MH, "g_get_num_processors");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_new$MH,"g_mutex_locker_new");
    }
    public static MemoryAddress g_mutex_locker_new ( Addressable mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_new$MH, "g_mutex_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_free$MH,"g_mutex_locker_free");
    }
    public static void g_mutex_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_mutex_locker_free$MH, "g_mutex_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$58.g_rec_mutex_locker_new$MH,"g_rec_mutex_locker_new");
    }
    public static MemoryAddress g_rec_mutex_locker_new ( Addressable rec_mutex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.g_rec_mutex_locker_new$MH, "g_rec_mutex_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rec_mutex_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rec_mutex_locker_free$MH,"g_rec_mutex_locker_free");
    }
    public static void g_rec_mutex_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rec_mutex_locker_free$MH, "g_rec_mutex_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_new$MH,"g_rw_lock_writer_locker_new");
    }
    public static MemoryAddress g_rw_lock_writer_locker_new ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_new$MH, "g_rw_lock_writer_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_writer_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_free$MH,"g_rw_lock_writer_locker_free");
    }
    public static void g_rw_lock_writer_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_writer_locker_free$MH, "g_rw_lock_writer_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_locker_new$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_new$MH,"g_rw_lock_reader_locker_new");
    }
    public static MemoryAddress g_rw_lock_reader_locker_new ( Addressable rw_lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_new$MH, "g_rw_lock_reader_locker_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rw_lock_reader_locker_free$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_free$MH,"g_rw_lock_reader_locker_free");
    }
    public static void g_rw_lock_reader_locker_free ( Addressable locker) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_rw_lock_reader_locker_free$MH, "g_rw_lock_reader_locker_free");
        try {
            mh$.invokeExact(locker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new$MH() {
        return RuntimeHelper.requireNonNull(constants$59.g_async_queue_new$MH,"g_async_queue_new");
    }
    public static MemoryAddress g_async_queue_new () {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.g_async_queue_new$MH, "g_async_queue_new");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_new_full$MH,"g_async_queue_new_full");
    }
    public static MemoryAddress g_async_queue_new_full ( Addressable item_free_func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_new_full$MH, "g_async_queue_new_full");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(item_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_lock$MH,"g_async_queue_lock");
    }
    public static void g_async_queue_lock ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_lock$MH, "g_async_queue_lock");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_unlock$MH,"g_async_queue_unlock");
    }
    public static void g_async_queue_unlock ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_unlock$MH, "g_async_queue_unlock");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref$MH,"g_async_queue_ref");
    }
    public static MemoryAddress g_async_queue_ref ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref$MH, "g_async_queue_ref");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_unref$MH,"g_async_queue_unref");
    }
    public static void g_async_queue_unref ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_unref$MH, "g_async_queue_unref");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_ref_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref_unlocked$MH,"g_async_queue_ref_unlocked");
    }
    public static void g_async_queue_ref_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.g_async_queue_ref_unlocked$MH, "g_async_queue_ref_unlocked");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_unref_and_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_unref_and_unlock$MH,"g_async_queue_unref_and_unlock");
    }
    public static void g_async_queue_unref_and_unlock ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_unref_and_unlock$MH, "g_async_queue_unref_and_unlock");
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push$MH,"g_async_queue_push");
    }
    public static void g_async_queue_push ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push$MH, "g_async_queue_push");
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_unlocked$MH,"g_async_queue_push_unlocked");
    }
    public static void g_async_queue_push_unlocked ( Addressable queue,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_unlocked$MH, "g_async_queue_push_unlocked");
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted$MH,"g_async_queue_push_sorted");
    }
    public static void g_async_queue_push_sorted ( Addressable queue,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted$MH, "g_async_queue_push_sorted");
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_sorted_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted_unlocked$MH,"g_async_queue_push_sorted_unlocked");
    }
    public static void g_async_queue_push_sorted_unlocked ( Addressable queue,  Addressable data,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_push_sorted_unlocked$MH, "g_async_queue_push_sorted_unlocked");
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$61.g_async_queue_pop$MH,"g_async_queue_pop");
    }
    public static MemoryAddress g_async_queue_pop ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.g_async_queue_pop$MH, "g_async_queue_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_pop_unlocked$MH,"g_async_queue_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_pop_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_pop_unlocked$MH, "g_async_queue_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop$MH,"g_async_queue_try_pop");
    }
    public static MemoryAddress g_async_queue_try_pop ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop$MH, "g_async_queue_try_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_try_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop_unlocked$MH,"g_async_queue_try_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_try_pop_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_try_pop_unlocked$MH, "g_async_queue_try_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop$MH,"g_async_queue_timeout_pop");
    }
    public static MemoryAddress g_async_queue_timeout_pop ( Addressable queue,  long timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop$MH, "g_async_queue_timeout_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timeout_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop_unlocked$MH,"g_async_queue_timeout_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_timeout_pop_unlocked ( Addressable queue,  long timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_timeout_pop_unlocked$MH, "g_async_queue_timeout_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length$MH() {
        return RuntimeHelper.requireNonNull(constants$62.g_async_queue_length$MH,"g_async_queue_length");
    }
    public static int g_async_queue_length ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.g_async_queue_length$MH, "g_async_queue_length");
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_length_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_length_unlocked$MH,"g_async_queue_length_unlocked");
    }
    public static int g_async_queue_length_unlocked ( Addressable queue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_length_unlocked$MH, "g_async_queue_length_unlocked");
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort$MH,"g_async_queue_sort");
    }
    public static void g_async_queue_sort ( Addressable queue,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort$MH, "g_async_queue_sort");
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_sort_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort_unlocked$MH,"g_async_queue_sort_unlocked");
    }
    public static void g_async_queue_sort_unlocked ( Addressable queue,  Addressable func,  Addressable user_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_sort_unlocked$MH, "g_async_queue_sort_unlocked");
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove$MH,"g_async_queue_remove");
    }
    public static int g_async_queue_remove ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove$MH, "g_async_queue_remove");
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_remove_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove_unlocked$MH,"g_async_queue_remove_unlocked");
    }
    public static int g_async_queue_remove_unlocked ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_remove_unlocked$MH, "g_async_queue_remove_unlocked");
        try {
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front$MH() {
        return RuntimeHelper.requireNonNull(constants$63.g_async_queue_push_front$MH,"g_async_queue_push_front");
    }
    public static void g_async_queue_push_front ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.g_async_queue_push_front$MH, "g_async_queue_push_front");
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_push_front_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_async_queue_push_front_unlocked$MH,"g_async_queue_push_front_unlocked");
    }
    public static void g_async_queue_push_front_unlocked ( Addressable queue,  Addressable item) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.g_async_queue_push_front_unlocked$MH, "g_async_queue_push_front_unlocked");
        try {
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop$MH,"g_async_queue_timed_pop");
    }
    public static MemoryAddress g_async_queue_timed_pop ( Addressable queue,  Addressable end_time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop$MH, "g_async_queue_timed_pop");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_async_queue_timed_pop_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop_unlocked$MH,"g_async_queue_timed_pop_unlocked");
    }
    public static MemoryAddress g_async_queue_timed_pop_unlocked ( Addressable queue,  Addressable end_time) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.g_async_queue_timed_pop_unlocked$MH, "g_async_queue_timed_pop_unlocked");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static int SI_ASYNCNL() {
        return (int)-60L;
    }
    public static int SI_DETHREAD() {
        return (int)-7L;
    }
    public static int SI_TKILL() {
        return (int)-6L;
    }
    public static int SI_SIGIO() {
        return (int)-5L;
    }
    public static int SI_ASYNCIO() {
        return (int)-4L;
    }
    public static int SI_MESGQ() {
        return (int)-3L;
    }
    public static int SI_TIMER() {
        return (int)-2L;
    }
    public static int SI_QUEUE() {
        return (int)-1L;
    }
    public static int SI_USER() {
        return (int)0L;
    }
    public static int SI_KERNEL() {
        return (int)128L;
    }
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    public static int ILL_ILLOPN() {
        return (int)2L;
    }
    public static int ILL_ILLADR() {
        return (int)3L;
    }
    public static int ILL_ILLTRP() {
        return (int)4L;
    }
    public static int ILL_PRVOPC() {
        return (int)5L;
    }
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    public static int ILL_COPROC() {
        return (int)7L;
    }
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    public static int ILL_BADIADDR() {
        return (int)9L;
    }
    public static int FPE_INTDIV() {
        return (int)1L;
    }
    public static int FPE_INTOVF() {
        return (int)2L;
    }
    public static int FPE_FLTDIV() {
        return (int)3L;
    }
    public static int FPE_FLTOVF() {
        return (int)4L;
    }
    public static int FPE_FLTUND() {
        return (int)5L;
    }
    public static int FPE_FLTRES() {
        return (int)6L;
    }
    public static int FPE_FLTINV() {
        return (int)7L;
    }
    public static int FPE_FLTSUB() {
        return (int)8L;
    }
    public static int FPE_FLTUNK() {
        return (int)14L;
    }
    public static int FPE_CONDTRAP() {
        return (int)15L;
    }
    public static int SEGV_MAPERR() {
        return (int)1L;
    }
    public static int SEGV_ACCERR() {
        return (int)2L;
    }
    public static int SEGV_BNDERR() {
        return (int)3L;
    }
    public static int SEGV_PKUERR() {
        return (int)4L;
    }
    public static int SEGV_ACCADI() {
        return (int)5L;
    }
    public static int SEGV_ADIDERR() {
        return (int)6L;
    }
    public static int SEGV_ADIPERR() {
        return (int)7L;
    }
    public static int SEGV_MTEAERR() {
        return (int)8L;
    }
    public static int SEGV_MTESERR() {
        return (int)9L;
    }
    public static int BUS_ADRALN() {
        return (int)1L;
    }
    public static int BUS_ADRERR() {
        return (int)2L;
    }
    public static int BUS_OBJERR() {
        return (int)3L;
    }
    public static int BUS_MCEERR_AR() {
        return (int)4L;
    }
    public static int BUS_MCEERR_AO() {
        return (int)5L;
    }
    public static int CLD_EXITED() {
        return (int)1L;
    }
    public static int CLD_KILLED() {
        return (int)2L;
    }
    public static int CLD_DUMPED() {
        return (int)3L;
    }
    public static int CLD_TRAPPED() {
        return (int)4L;
    }
}


