// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$596 {

    static final FunctionDescriptor g_dbus_connection_send_message_with_reply_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_dbus_connection_send_message_with_reply_finish$MH = RuntimeHelper.downcallHandle(
        "g_dbus_connection_send_message_with_reply_finish",
        constants$596.g_dbus_connection_send_message_with_reply_finish$FUNC, false
    );
    static final FunctionDescriptor g_dbus_connection_send_message_with_reply_sync$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_dbus_connection_send_message_with_reply_sync$MH = RuntimeHelper.downcallHandle(
        "g_dbus_connection_send_message_with_reply_sync",
        constants$596.g_dbus_connection_send_message_with_reply_sync$FUNC, false
    );
    static final FunctionDescriptor g_dbus_connection_emit_signal$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_dbus_connection_emit_signal$MH = RuntimeHelper.downcallHandle(
        "g_dbus_connection_emit_signal",
        constants$596.g_dbus_connection_emit_signal$FUNC, false
    );
    static final FunctionDescriptor g_dbus_connection_call$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_dbus_connection_call$MH = RuntimeHelper.downcallHandle(
        "g_dbus_connection_call",
        constants$596.g_dbus_connection_call$FUNC, false
    );
    static final FunctionDescriptor g_dbus_connection_call_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_dbus_connection_call_finish$MH = RuntimeHelper.downcallHandle(
        "g_dbus_connection_call_finish",
        constants$596.g_dbus_connection_call_finish$FUNC, false
    );
    static final FunctionDescriptor g_dbus_connection_call_sync$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_dbus_connection_call_sync$MH = RuntimeHelper.downcallHandle(
        "g_dbus_connection_call_sync",
        constants$596.g_dbus_connection_call_sync$FUNC, false
    );
}


