// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GDBusInterfaceIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_info"),
        Constants$root.C_POINTER$LAYOUT.withName("get_object"),
        Constants$root.C_POINTER$LAYOUT.withName("set_object"),
        Constants$root.C_POINTER$LAYOUT.withName("dup_object")
    ).withName("_GDBusInterfaceIface");
    public static MemoryLayout $LAYOUT() {
        return _GDBusInterfaceIface.$struct$LAYOUT;
    }
    public static MemorySegment parent_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_info$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_info$MH = RuntimeHelper.downcallHandle(
        _GDBusInterfaceIface.get_info$FUNC, false
    );
    public interface get_info {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_info fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_info.class, fi, _GDBusInterfaceIface.get_info$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_info ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_info::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.get_info$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_info$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_info"));
    public static VarHandle get_info$VH() {
        return _GDBusInterfaceIface.get_info$VH;
    }
    public static MemoryAddress get_info$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.get_info$VH.get(seg);
    }
    public static void get_info$set( MemorySegment seg, MemoryAddress x) {
        _GDBusInterfaceIface.get_info$VH.set(seg, x);
    }
    public static MemoryAddress get_info$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.get_info$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_info$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusInterfaceIface.get_info$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_info get_info (MemorySegment segment, ResourceScope scope) {
        return get_info.ofAddress(get_info$get(segment), scope);
    }
    static final FunctionDescriptor get_object$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_object$MH = RuntimeHelper.downcallHandle(
        _GDBusInterfaceIface.get_object$FUNC, false
    );
    public interface get_object {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_object fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_object.class, fi, _GDBusInterfaceIface.get_object$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_object ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_object::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.get_object$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_object$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_object"));
    public static VarHandle get_object$VH() {
        return _GDBusInterfaceIface.get_object$VH;
    }
    public static MemoryAddress get_object$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.get_object$VH.get(seg);
    }
    public static void get_object$set( MemorySegment seg, MemoryAddress x) {
        _GDBusInterfaceIface.get_object$VH.set(seg, x);
    }
    public static MemoryAddress get_object$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.get_object$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusInterfaceIface.get_object$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object get_object (MemorySegment segment, ResourceScope scope) {
        return get_object.ofAddress(get_object$get(segment), scope);
    }
    static final FunctionDescriptor set_object$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_object$MH = RuntimeHelper.downcallHandle(
        _GDBusInterfaceIface.set_object$FUNC, false
    );
    public interface set_object {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(set_object fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_object.class, fi, _GDBusInterfaceIface.set_object$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_object ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_object::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    _GDBusInterfaceIface.set_object$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_object$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_object"));
    public static VarHandle set_object$VH() {
        return _GDBusInterfaceIface.set_object$VH;
    }
    public static MemoryAddress set_object$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.set_object$VH.get(seg);
    }
    public static void set_object$set( MemorySegment seg, MemoryAddress x) {
        _GDBusInterfaceIface.set_object$VH.set(seg, x);
    }
    public static MemoryAddress set_object$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.set_object$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_object$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusInterfaceIface.set_object$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_object set_object (MemorySegment segment, ResourceScope scope) {
        return set_object.ofAddress(set_object$get(segment), scope);
    }
    static final FunctionDescriptor dup_object$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle dup_object$MH = RuntimeHelper.downcallHandle(
        _GDBusInterfaceIface.dup_object$FUNC, false
    );
    public interface dup_object {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(dup_object fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(dup_object.class, fi, _GDBusInterfaceIface.dup_object$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static dup_object ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("dup_object::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.dup_object$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle dup_object$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dup_object"));
    public static VarHandle dup_object$VH() {
        return _GDBusInterfaceIface.dup_object$VH;
    }
    public static MemoryAddress dup_object$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.dup_object$VH.get(seg);
    }
    public static void dup_object$set( MemorySegment seg, MemoryAddress x) {
        _GDBusInterfaceIface.dup_object$VH.set(seg, x);
    }
    public static MemoryAddress dup_object$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GDBusInterfaceIface.dup_object$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dup_object$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusInterfaceIface.dup_object$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static dup_object dup_object (MemorySegment segment, ResourceScope scope) {
        return dup_object.ofAddress(dup_object$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


