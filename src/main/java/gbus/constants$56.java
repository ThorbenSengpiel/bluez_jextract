// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$56 {

    static final FunctionDescriptor g_rec_mutex_trylock$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_rec_mutex_trylock$MH = RuntimeHelper.downcallHandle(
        "g_rec_mutex_trylock",
        constants$56.g_rec_mutex_trylock$FUNC, false
    );
    static final FunctionDescriptor g_rec_mutex_unlock$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_rec_mutex_unlock$MH = RuntimeHelper.downcallHandle(
        "g_rec_mutex_unlock",
        constants$56.g_rec_mutex_unlock$FUNC, false
    );
    static final FunctionDescriptor g_cond_init$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_cond_init$MH = RuntimeHelper.downcallHandle(
        "g_cond_init",
        constants$56.g_cond_init$FUNC, false
    );
    static final FunctionDescriptor g_cond_clear$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_cond_clear$MH = RuntimeHelper.downcallHandle(
        "g_cond_clear",
        constants$56.g_cond_clear$FUNC, false
    );
    static final FunctionDescriptor g_cond_wait$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_cond_wait$MH = RuntimeHelper.downcallHandle(
        "g_cond_wait",
        constants$56.g_cond_wait$FUNC, false
    );
    static final FunctionDescriptor g_cond_signal$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_cond_signal$MH = RuntimeHelper.downcallHandle(
        "g_cond_signal",
        constants$56.g_cond_signal$FUNC, false
    );
}


