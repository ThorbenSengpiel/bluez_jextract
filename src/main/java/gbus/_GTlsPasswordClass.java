// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GTlsPasswordClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_value"),
        Constants$root.C_POINTER$LAYOUT.withName("set_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_default_warning"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GTlsPasswordClass");
    public static MemoryLayout $LAYOUT() {
        return _GTlsPasswordClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_value$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value$MH = RuntimeHelper.downcallHandle(
        _GTlsPasswordClass.get_value$FUNC, false
    );
    public interface get_value {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(get_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_value.class, fi, _GTlsPasswordClass.get_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.get_value$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_value"));
    public static VarHandle get_value$VH() {
        return _GTlsPasswordClass.get_value$VH;
    }
    public static MemoryAddress get_value$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.get_value$VH.get(seg);
    }
    public static void get_value$set( MemorySegment seg, MemoryAddress x) {
        _GTlsPasswordClass.get_value$VH.set(seg, x);
    }
    public static MemoryAddress get_value$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.get_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsPasswordClass.get_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value get_value (MemorySegment segment, ResourceScope scope) {
        return get_value.ofAddress(get_value$get(segment), scope);
    }
    static final FunctionDescriptor set_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_value$MH = RuntimeHelper.downcallHandle(
        _GTlsPasswordClass.set_value$FUNC, false
    );
    public interface set_value {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3);
        static NativeSymbol allocate(set_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_value.class, fi, _GTlsPasswordClass.set_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2, jdk.incubator.foreign.MemoryAddress x3) -> {
                try {
                    _GTlsPasswordClass.set_value$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, x2, (jdk.incubator.foreign.Addressable)x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_value"));
    public static VarHandle set_value$VH() {
        return _GTlsPasswordClass.set_value$VH;
    }
    public static MemoryAddress set_value$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.set_value$VH.get(seg);
    }
    public static void set_value$set( MemorySegment seg, MemoryAddress x) {
        _GTlsPasswordClass.set_value$VH.set(seg, x);
    }
    public static MemoryAddress set_value$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.set_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsPasswordClass.set_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_value set_value (MemorySegment segment, ResourceScope scope) {
        return set_value.ofAddress(set_value$get(segment), scope);
    }
    static final FunctionDescriptor get_default_warning$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_default_warning$MH = RuntimeHelper.downcallHandle(
        _GTlsPasswordClass.get_default_warning$FUNC, false
    );
    public interface get_default_warning {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_default_warning fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_default_warning.class, fi, _GTlsPasswordClass.get_default_warning$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_default_warning ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_default_warning::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.get_default_warning$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_default_warning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_default_warning"));
    public static VarHandle get_default_warning$VH() {
        return _GTlsPasswordClass.get_default_warning$VH;
    }
    public static MemoryAddress get_default_warning$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.get_default_warning$VH.get(seg);
    }
    public static void get_default_warning$set( MemorySegment seg, MemoryAddress x) {
        _GTlsPasswordClass.get_default_warning$VH.set(seg, x);
    }
    public static MemoryAddress get_default_warning$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GTlsPasswordClass.get_default_warning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_default_warning$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsPasswordClass.get_default_warning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_default_warning get_default_warning (MemorySegment segment, ResourceScope scope) {
        return get_default_warning.ofAddress(get_default_warning$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(160, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


