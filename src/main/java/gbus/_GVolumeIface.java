// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GVolumeIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("changed"),
        Constants$root.C_POINTER$LAYOUT.withName("removed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_icon"),
        Constants$root.C_POINTER$LAYOUT.withName("get_uuid"),
        Constants$root.C_POINTER$LAYOUT.withName("get_drive"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mount"),
        Constants$root.C_POINTER$LAYOUT.withName("can_mount"),
        Constants$root.C_POINTER$LAYOUT.withName("can_eject"),
        Constants$root.C_POINTER$LAYOUT.withName("mount_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("mount_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("eject"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_identifier"),
        Constants$root.C_POINTER$LAYOUT.withName("enumerate_identifiers"),
        Constants$root.C_POINTER$LAYOUT.withName("should_automount"),
        Constants$root.C_POINTER$LAYOUT.withName("get_activation_root"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_with_operation"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_with_operation_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_sort_key"),
        Constants$root.C_POINTER$LAYOUT.withName("get_symbolic_icon")
    ).withName("_GVolumeIface");
    public static MemoryLayout $LAYOUT() {
        return _GVolumeIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.changed$FUNC, false
    );
    public interface changed {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(changed.class, fi, _GVolumeIface.changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _GVolumeIface.changed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("changed"));
    public static VarHandle changed$VH() {
        return _GVolumeIface.changed$VH;
    }
    public static MemoryAddress changed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.changed$VH.get(seg);
    }
    public static void changed$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.changed$VH.set(seg, x);
    }
    public static MemoryAddress changed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed (MemorySegment segment, ResourceScope scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    static final FunctionDescriptor removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removed$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.removed$FUNC, false
    );
    public interface removed {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(removed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(removed.class, fi, _GVolumeIface.removed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static removed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("removed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    _GVolumeIface.removed$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removed"));
    public static VarHandle removed$VH() {
        return _GVolumeIface.removed$VH;
    }
    public static MemoryAddress removed$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.removed$VH.get(seg);
    }
    public static void removed$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.removed$VH.set(seg, x);
    }
    public static MemoryAddress removed$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removed removed (MemorySegment segment, ResourceScope scope) {
        return removed.ofAddress(removed$get(segment), scope);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_name$FUNC, false
    );
    public interface get_name {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _GVolumeIface.get_name$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_name$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _GVolumeIface.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, ResourceScope scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    static final FunctionDescriptor get_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_icon$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_icon$FUNC, false
    );
    public interface get_icon {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_icon fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_icon.class, fi, _GVolumeIface.get_icon$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_icon ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_icon::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_icon$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_icon$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_icon"));
    public static VarHandle get_icon$VH() {
        return _GVolumeIface.get_icon$VH;
    }
    public static MemoryAddress get_icon$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_icon$VH.get(seg);
    }
    public static void get_icon$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_icon$VH.set(seg, x);
    }
    public static MemoryAddress get_icon$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon get_icon (MemorySegment segment, ResourceScope scope) {
        return get_icon.ofAddress(get_icon$get(segment), scope);
    }
    static final FunctionDescriptor get_uuid$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_uuid$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_uuid$FUNC, false
    );
    public interface get_uuid {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_uuid fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_uuid.class, fi, _GVolumeIface.get_uuid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_uuid ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_uuid::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_uuid$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_uuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_uuid"));
    public static VarHandle get_uuid$VH() {
        return _GVolumeIface.get_uuid$VH;
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_uuid$VH.get(seg);
    }
    public static void get_uuid$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_uuid$VH.set(seg, x);
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_uuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuid$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_uuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuid get_uuid (MemorySegment segment, ResourceScope scope) {
        return get_uuid.ofAddress(get_uuid$get(segment), scope);
    }
    static final FunctionDescriptor get_drive$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_drive$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_drive$FUNC, false
    );
    public interface get_drive {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_drive fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_drive.class, fi, _GVolumeIface.get_drive$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_drive ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_drive::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_drive$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_drive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_drive"));
    public static VarHandle get_drive$VH() {
        return _GVolumeIface.get_drive$VH;
    }
    public static MemoryAddress get_drive$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_drive$VH.get(seg);
    }
    public static void get_drive$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_drive$VH.set(seg, x);
    }
    public static MemoryAddress get_drive$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_drive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_drive$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_drive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_drive get_drive (MemorySegment segment, ResourceScope scope) {
        return get_drive.ofAddress(get_drive$get(segment), scope);
    }
    static final FunctionDescriptor get_mount$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mount$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_mount$FUNC, false
    );
    public interface get_mount {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_mount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_mount.class, fi, _GVolumeIface.get_mount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_mount ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_mount::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_mount$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mount"));
    public static VarHandle get_mount$VH() {
        return _GVolumeIface.get_mount$VH;
    }
    public static MemoryAddress get_mount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_mount$VH.get(seg);
    }
    public static void get_mount$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_mount$VH.set(seg, x);
    }
    public static MemoryAddress get_mount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_mount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_mount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mount get_mount (MemorySegment segment, ResourceScope scope) {
        return get_mount.ofAddress(get_mount$get(segment), scope);
    }
    static final FunctionDescriptor can_mount$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_mount$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.can_mount$FUNC, false
    );
    public interface can_mount {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(can_mount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(can_mount.class, fi, _GVolumeIface.can_mount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static can_mount ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("can_mount::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)_GVolumeIface.can_mount$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_mount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_mount"));
    public static VarHandle can_mount$VH() {
        return _GVolumeIface.can_mount$VH;
    }
    public static MemoryAddress can_mount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.can_mount$VH.get(seg);
    }
    public static void can_mount$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.can_mount$VH.set(seg, x);
    }
    public static MemoryAddress can_mount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.can_mount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_mount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.can_mount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_mount can_mount (MemorySegment segment, ResourceScope scope) {
        return can_mount.ofAddress(can_mount$get(segment), scope);
    }
    static final FunctionDescriptor can_eject$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_eject$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.can_eject$FUNC, false
    );
    public interface can_eject {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(can_eject fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(can_eject.class, fi, _GVolumeIface.can_eject$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static can_eject ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("can_eject::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)_GVolumeIface.can_eject$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_eject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_eject"));
    public static VarHandle can_eject$VH() {
        return _GVolumeIface.can_eject$VH;
    }
    public static MemoryAddress can_eject$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.can_eject$VH.get(seg);
    }
    public static void can_eject$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.can_eject$VH.set(seg, x);
    }
    public static MemoryAddress can_eject$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.can_eject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_eject$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.can_eject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_eject can_eject (MemorySegment segment, ResourceScope scope) {
        return can_eject.ofAddress(can_eject$get(segment), scope);
    }
    static final FunctionDescriptor mount_fn$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mount_fn$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.mount_fn$FUNC, false
    );
    public interface mount_fn {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static NativeSymbol allocate(mount_fn fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(mount_fn.class, fi, _GVolumeIface.mount_fn$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static mount_fn ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("mount_fn::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    _GVolumeIface.mount_fn$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3, (jdk.incubator.foreign.Addressable)x4, (jdk.incubator.foreign.Addressable)x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mount_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mount_fn"));
    public static VarHandle mount_fn$VH() {
        return _GVolumeIface.mount_fn$VH;
    }
    public static MemoryAddress mount_fn$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.mount_fn$VH.get(seg);
    }
    public static void mount_fn$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.mount_fn$VH.set(seg, x);
    }
    public static MemoryAddress mount_fn$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.mount_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.mount_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_fn mount_fn (MemorySegment segment, ResourceScope scope) {
        return mount_fn.ofAddress(mount_fn$get(segment), scope);
    }
    static final FunctionDescriptor mount_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mount_finish$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.mount_finish$FUNC, false
    );
    public interface mount_finish {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static NativeSymbol allocate(mount_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(mount_finish.class, fi, _GVolumeIface.mount_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static mount_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("mount_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)_GVolumeIface.mount_finish$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mount_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mount_finish"));
    public static VarHandle mount_finish$VH() {
        return _GVolumeIface.mount_finish$VH;
    }
    public static MemoryAddress mount_finish$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.mount_finish$VH.get(seg);
    }
    public static void mount_finish$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.mount_finish$VH.set(seg, x);
    }
    public static MemoryAddress mount_finish$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.mount_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.mount_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_finish mount_finish (MemorySegment segment, ResourceScope scope) {
        return mount_finish.ofAddress(mount_finish$get(segment), scope);
    }
    static final FunctionDescriptor eject$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.eject$FUNC, false
    );
    public interface eject {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
        static NativeSymbol allocate(eject fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject.class, fi, _GVolumeIface.eject$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static eject ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
                try {
                    _GVolumeIface.eject$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3, (jdk.incubator.foreign.Addressable)x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject"));
    public static VarHandle eject$VH() {
        return _GVolumeIface.eject$VH;
    }
    public static MemoryAddress eject$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject$VH.get(seg);
    }
    public static void eject$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.eject$VH.set(seg, x);
    }
    public static MemoryAddress eject$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.eject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject eject (MemorySegment segment, ResourceScope scope) {
        return eject.ofAddress(eject$get(segment), scope);
    }
    static final FunctionDescriptor eject_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_finish$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.eject_finish$FUNC, false
    );
    public interface eject_finish {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static NativeSymbol allocate(eject_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject_finish.class, fi, _GVolumeIface.eject_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static eject_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)_GVolumeIface.eject_finish$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject_finish"));
    public static VarHandle eject_finish$VH() {
        return _GVolumeIface.eject_finish$VH;
    }
    public static MemoryAddress eject_finish$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject_finish$VH.get(seg);
    }
    public static void eject_finish$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.eject_finish$VH.set(seg, x);
    }
    public static MemoryAddress eject_finish$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.eject_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_finish eject_finish (MemorySegment segment, ResourceScope scope) {
        return eject_finish.ofAddress(eject_finish$get(segment), scope);
    }
    static final FunctionDescriptor get_identifier$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_identifier$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_identifier$FUNC, false
    );
    public interface get_identifier {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        static NativeSymbol allocate(get_identifier fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_identifier.class, fi, _GVolumeIface.get_identifier$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_identifier ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_identifier::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_identifier$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_identifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_identifier"));
    public static VarHandle get_identifier$VH() {
        return _GVolumeIface.get_identifier$VH;
    }
    public static MemoryAddress get_identifier$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_identifier$VH.get(seg);
    }
    public static void get_identifier$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_identifier$VH.set(seg, x);
    }
    public static MemoryAddress get_identifier$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_identifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_identifier$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_identifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_identifier get_identifier (MemorySegment segment, ResourceScope scope) {
        return get_identifier.ofAddress(get_identifier$get(segment), scope);
    }
    static final FunctionDescriptor enumerate_identifiers$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle enumerate_identifiers$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.enumerate_identifiers$FUNC, false
    );
    public interface enumerate_identifiers {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(enumerate_identifiers fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(enumerate_identifiers.class, fi, _GVolumeIface.enumerate_identifiers$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static enumerate_identifiers ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("enumerate_identifiers::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.enumerate_identifiers$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle enumerate_identifiers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("enumerate_identifiers"));
    public static VarHandle enumerate_identifiers$VH() {
        return _GVolumeIface.enumerate_identifiers$VH;
    }
    public static MemoryAddress enumerate_identifiers$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.enumerate_identifiers$VH.get(seg);
    }
    public static void enumerate_identifiers$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.enumerate_identifiers$VH.set(seg, x);
    }
    public static MemoryAddress enumerate_identifiers$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.enumerate_identifiers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enumerate_identifiers$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.enumerate_identifiers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static enumerate_identifiers enumerate_identifiers (MemorySegment segment, ResourceScope scope) {
        return enumerate_identifiers.ofAddress(enumerate_identifiers$get(segment), scope);
    }
    static final FunctionDescriptor should_automount$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle should_automount$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.should_automount$FUNC, false
    );
    public interface should_automount {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(should_automount fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(should_automount.class, fi, _GVolumeIface.should_automount$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static should_automount ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("should_automount::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)_GVolumeIface.should_automount$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle should_automount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("should_automount"));
    public static VarHandle should_automount$VH() {
        return _GVolumeIface.should_automount$VH;
    }
    public static MemoryAddress should_automount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.should_automount$VH.get(seg);
    }
    public static void should_automount$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.should_automount$VH.set(seg, x);
    }
    public static MemoryAddress should_automount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.should_automount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void should_automount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.should_automount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static should_automount should_automount (MemorySegment segment, ResourceScope scope) {
        return should_automount.ofAddress(should_automount$get(segment), scope);
    }
    static final FunctionDescriptor get_activation_root$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_activation_root$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_activation_root$FUNC, false
    );
    public interface get_activation_root {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_activation_root fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_activation_root.class, fi, _GVolumeIface.get_activation_root$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_activation_root ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_activation_root::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_activation_root$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_activation_root$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_activation_root"));
    public static VarHandle get_activation_root$VH() {
        return _GVolumeIface.get_activation_root$VH;
    }
    public static MemoryAddress get_activation_root$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_activation_root$VH.get(seg);
    }
    public static void get_activation_root$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_activation_root$VH.set(seg, x);
    }
    public static MemoryAddress get_activation_root$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_activation_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_activation_root$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_activation_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_activation_root get_activation_root (MemorySegment segment, ResourceScope scope) {
        return get_activation_root.ofAddress(get_activation_root$get(segment), scope);
    }
    static final FunctionDescriptor eject_with_operation$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_with_operation$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.eject_with_operation$FUNC, false
    );
    public interface eject_with_operation {

        void apply(jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5);
        static NativeSymbol allocate(eject_with_operation fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject_with_operation.class, fi, _GVolumeIface.eject_with_operation$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static eject_with_operation ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject_with_operation::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5) -> {
                try {
                    _GVolumeIface.eject_with_operation$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3, (jdk.incubator.foreign.Addressable)x4, (jdk.incubator.foreign.Addressable)x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_with_operation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject_with_operation"));
    public static VarHandle eject_with_operation$VH() {
        return _GVolumeIface.eject_with_operation$VH;
    }
    public static MemoryAddress eject_with_operation$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject_with_operation$VH.get(seg);
    }
    public static void eject_with_operation$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.eject_with_operation$VH.set(seg, x);
    }
    public static MemoryAddress eject_with_operation$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject_with_operation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.eject_with_operation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation eject_with_operation (MemorySegment segment, ResourceScope scope) {
        return eject_with_operation.ofAddress(eject_with_operation$get(segment), scope);
    }
    static final FunctionDescriptor eject_with_operation_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_with_operation_finish$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.eject_with_operation_finish$FUNC, false
    );
    public interface eject_with_operation_finish {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        static NativeSymbol allocate(eject_with_operation_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject_with_operation_finish.class, fi, _GVolumeIface.eject_with_operation_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static eject_with_operation_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject_with_operation_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    return (int)_GVolumeIface.eject_with_operation_finish$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_with_operation_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject_with_operation_finish"));
    public static VarHandle eject_with_operation_finish$VH() {
        return _GVolumeIface.eject_with_operation_finish$VH;
    }
    public static MemoryAddress eject_with_operation_finish$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject_with_operation_finish$VH.get(seg);
    }
    public static void eject_with_operation_finish$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.eject_with_operation_finish$VH.set(seg, x);
    }
    public static MemoryAddress eject_with_operation_finish$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.eject_with_operation_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.eject_with_operation_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation_finish eject_with_operation_finish (MemorySegment segment, ResourceScope scope) {
        return eject_with_operation_finish.ofAddress(eject_with_operation_finish$get(segment), scope);
    }
    static final FunctionDescriptor get_sort_key$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sort_key$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_sort_key$FUNC, false
    );
    public interface get_sort_key {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_sort_key fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_sort_key.class, fi, _GVolumeIface.get_sort_key$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_sort_key ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_sort_key::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_sort_key$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_sort_key$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_sort_key"));
    public static VarHandle get_sort_key$VH() {
        return _GVolumeIface.get_sort_key$VH;
    }
    public static MemoryAddress get_sort_key$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_sort_key$VH.get(seg);
    }
    public static void get_sort_key$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_sort_key$VH.set(seg, x);
    }
    public static MemoryAddress get_sort_key$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_sort_key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sort_key$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_sort_key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sort_key get_sort_key (MemorySegment segment, ResourceScope scope) {
        return get_sort_key.ofAddress(get_sort_key$get(segment), scope);
    }
    static final FunctionDescriptor get_symbolic_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_symbolic_icon$MH = RuntimeHelper.downcallHandle(
        _GVolumeIface.get_symbolic_icon$FUNC, false
    );
    public interface get_symbolic_icon {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_symbolic_icon fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_symbolic_icon.class, fi, _GVolumeIface.get_symbolic_icon$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_symbolic_icon ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_symbolic_icon::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_symbolic_icon$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_symbolic_icon$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_symbolic_icon"));
    public static VarHandle get_symbolic_icon$VH() {
        return _GVolumeIface.get_symbolic_icon$VH;
    }
    public static MemoryAddress get_symbolic_icon$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_symbolic_icon$VH.get(seg);
    }
    public static void get_symbolic_icon$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeIface.get_symbolic_icon$VH.set(seg, x);
    }
    public static MemoryAddress get_symbolic_icon$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GVolumeIface.get_symbolic_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_symbolic_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeIface.get_symbolic_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_symbolic_icon get_symbolic_icon (MemorySegment segment, ResourceScope scope) {
        return get_symbolic_icon.ofAddress(get_symbolic_icon$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


