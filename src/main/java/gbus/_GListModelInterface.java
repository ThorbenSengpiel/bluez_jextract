// Generated by jextract

package gbus;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GListModelInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_items"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item")
    ).withName("_GListModelInterface");
    public static MemoryLayout $LAYOUT() {
        return _GListModelInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_item_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item_type$MH = RuntimeHelper.downcallHandle(
        _GListModelInterface.get_item_type$FUNC, false
    );
    public interface get_item_type {

        long apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_item_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_item_type.class, fi, _GListModelInterface.get_item_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)J", scope);
        }
        static get_item_type ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_item_type::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (long)_GListModelInterface.get_item_type$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_item_type"));
    public static VarHandle get_item_type$VH() {
        return _GListModelInterface.get_item_type$VH;
    }
    public static MemoryAddress get_item_type$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GListModelInterface.get_item_type$VH.get(seg);
    }
    public static void get_item_type$set( MemorySegment seg, MemoryAddress x) {
        _GListModelInterface.get_item_type$VH.set(seg, x);
    }
    public static MemoryAddress get_item_type$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GListModelInterface.get_item_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GListModelInterface.get_item_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item_type get_item_type (MemorySegment segment, ResourceScope scope) {
        return get_item_type.ofAddress(get_item_type$get(segment), scope);
    }
    static final FunctionDescriptor get_n_items$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_items$MH = RuntimeHelper.downcallHandle(
        _GListModelInterface.get_n_items$FUNC, false
    );
    public interface get_n_items {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static NativeSymbol allocate(get_n_items fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_n_items.class, fi, _GListModelInterface.get_n_items$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_n_items ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_n_items::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)_GListModelInterface.get_n_items$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_items$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_items"));
    public static VarHandle get_n_items$VH() {
        return _GListModelInterface.get_n_items$VH;
    }
    public static MemoryAddress get_n_items$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GListModelInterface.get_n_items$VH.get(seg);
    }
    public static void get_n_items$set( MemorySegment seg, MemoryAddress x) {
        _GListModelInterface.get_n_items$VH.set(seg, x);
    }
    public static MemoryAddress get_n_items$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GListModelInterface.get_n_items$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_items$set(MemorySegment seg, long index, MemoryAddress x) {
        _GListModelInterface.get_n_items$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_items get_n_items (MemorySegment segment, ResourceScope scope) {
        return get_n_items.ofAddress(get_n_items$get(segment), scope);
    }
    static final FunctionDescriptor get_item$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_item$MH = RuntimeHelper.downcallHandle(
        _GListModelInterface.get_item$FUNC, false
    );
    public interface get_item {

        jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
        static NativeSymbol allocate(get_item fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_item.class, fi, _GListModelInterface.get_item$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_item ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_item::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)_GListModelInterface.get_item$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_item"));
    public static VarHandle get_item$VH() {
        return _GListModelInterface.get_item$VH;
    }
    public static MemoryAddress get_item$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_GListModelInterface.get_item$VH.get(seg);
    }
    public static void get_item$set( MemorySegment seg, MemoryAddress x) {
        _GListModelInterface.get_item$VH.set(seg, x);
    }
    public static MemoryAddress get_item$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_GListModelInterface.get_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _GListModelInterface.get_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item get_item (MemorySegment segment, ResourceScope scope) {
        return get_item.ofAddress(get_item$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


