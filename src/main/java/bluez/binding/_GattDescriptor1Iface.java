// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GattDescriptor1Iface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_read_value"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_write_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_characteristic"),
        Constants$root.C_POINTER$LAYOUT.withName("get_uuid"),
        Constants$root.C_POINTER$LAYOUT.withName("get_value")
    ).withName("_GattDescriptor1Iface");
    public static MemoryLayout $LAYOUT() {
        return _GattDescriptor1Iface.$struct$LAYOUT;
    }
    public static MemorySegment parent_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor handle_read_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_read_value$MH = RuntimeHelper.downcallHandle(
        _GattDescriptor1Iface.handle_read_value$FUNC, false
    );
    public interface handle_read_value {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handle_read_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_read_value.class, fi, _GattDescriptor1Iface.handle_read_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_read_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_read_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GattDescriptor1Iface.handle_read_value$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_read_value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_read_value"));
    public static VarHandle handle_read_value$VH() {
        return _GattDescriptor1Iface.handle_read_value$VH;
    }
    public static MemoryAddress handle_read_value$get(MemorySegment seg) {
        return (MemoryAddress)_GattDescriptor1Iface.handle_read_value$VH.get(seg);
    }
    public static void handle_read_value$set( MemorySegment seg, MemoryAddress x) {
        _GattDescriptor1Iface.handle_read_value$VH.set(seg, x);
    }
    public static MemoryAddress handle_read_value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattDescriptor1Iface.handle_read_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_read_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattDescriptor1Iface.handle_read_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_read_value handle_read_value (MemorySegment segment, ResourceScope scope) {
        return handle_read_value.ofAddress(handle_read_value$get(segment), scope);
    }
    static final FunctionDescriptor handle_write_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_write_value$MH = RuntimeHelper.downcallHandle(
        _GattDescriptor1Iface.handle_write_value$FUNC, false
    );
    public interface handle_write_value {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, MemoryAddress _x3);
        static NativeSymbol allocate(handle_write_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_write_value.class, fi, _GattDescriptor1Iface.handle_write_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_write_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_write_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, MemoryAddress __x3) -> {
                try {
                    return (int)_GattDescriptor1Iface.handle_write_value$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, (Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_write_value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_write_value"));
    public static VarHandle handle_write_value$VH() {
        return _GattDescriptor1Iface.handle_write_value$VH;
    }
    public static MemoryAddress handle_write_value$get(MemorySegment seg) {
        return (MemoryAddress)_GattDescriptor1Iface.handle_write_value$VH.get(seg);
    }
    public static void handle_write_value$set( MemorySegment seg, MemoryAddress x) {
        _GattDescriptor1Iface.handle_write_value$VH.set(seg, x);
    }
    public static MemoryAddress handle_write_value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattDescriptor1Iface.handle_write_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_write_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattDescriptor1Iface.handle_write_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_write_value handle_write_value (MemorySegment segment, ResourceScope scope) {
        return handle_write_value.ofAddress(handle_write_value$get(segment), scope);
    }
    static final FunctionDescriptor get_characteristic$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_characteristic$MH = RuntimeHelper.downcallHandle(
        _GattDescriptor1Iface.get_characteristic$FUNC, false
    );
    public interface get_characteristic {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_characteristic fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_characteristic.class, fi, _GattDescriptor1Iface.get_characteristic$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_characteristic ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_characteristic::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattDescriptor1Iface.get_characteristic$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_characteristic$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_characteristic"));
    public static VarHandle get_characteristic$VH() {
        return _GattDescriptor1Iface.get_characteristic$VH;
    }
    public static MemoryAddress get_characteristic$get(MemorySegment seg) {
        return (MemoryAddress)_GattDescriptor1Iface.get_characteristic$VH.get(seg);
    }
    public static void get_characteristic$set( MemorySegment seg, MemoryAddress x) {
        _GattDescriptor1Iface.get_characteristic$VH.set(seg, x);
    }
    public static MemoryAddress get_characteristic$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattDescriptor1Iface.get_characteristic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_characteristic$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattDescriptor1Iface.get_characteristic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_characteristic get_characteristic (MemorySegment segment, ResourceScope scope) {
        return get_characteristic.ofAddress(get_characteristic$get(segment), scope);
    }
    static final FunctionDescriptor get_uuid$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_uuid$MH = RuntimeHelper.downcallHandle(
        _GattDescriptor1Iface.get_uuid$FUNC, false
    );
    public interface get_uuid {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_uuid fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_uuid.class, fi, _GattDescriptor1Iface.get_uuid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_uuid ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_uuid::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattDescriptor1Iface.get_uuid$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_uuid$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_uuid"));
    public static VarHandle get_uuid$VH() {
        return _GattDescriptor1Iface.get_uuid$VH;
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg) {
        return (MemoryAddress)_GattDescriptor1Iface.get_uuid$VH.get(seg);
    }
    public static void get_uuid$set( MemorySegment seg, MemoryAddress x) {
        _GattDescriptor1Iface.get_uuid$VH.set(seg, x);
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattDescriptor1Iface.get_uuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuid$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattDescriptor1Iface.get_uuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuid get_uuid (MemorySegment segment, ResourceScope scope) {
        return get_uuid.ofAddress(get_uuid$get(segment), scope);
    }
    static final FunctionDescriptor get_value$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value$MH = RuntimeHelper.downcallHandle(
        _GattDescriptor1Iface.get_value$FUNC, false
    );
    public interface get_value {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_value.class, fi, _GattDescriptor1Iface.get_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattDescriptor1Iface.get_value$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_value"));
    public static VarHandle get_value$VH() {
        return _GattDescriptor1Iface.get_value$VH;
    }
    public static MemoryAddress get_value$get(MemorySegment seg) {
        return (MemoryAddress)_GattDescriptor1Iface.get_value$VH.get(seg);
    }
    public static void get_value$set( MemorySegment seg, MemoryAddress x) {
        _GattDescriptor1Iface.get_value$VH.set(seg, x);
    }
    public static MemoryAddress get_value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattDescriptor1Iface.get_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattDescriptor1Iface.get_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value get_value (MemorySegment segment, ResourceScope scope) {
        return get_value.ofAddress(get_value$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


