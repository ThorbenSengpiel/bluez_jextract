// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GDBusProxyTypeFunc {

    long apply(MemoryAddress manager, MemoryAddress object_path, MemoryAddress interface_name, MemoryAddress user_data);
    static NativeSymbol allocate(GDBusProxyTypeFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GDBusProxyTypeFunc.class, fi, constants$496.GDBusProxyTypeFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J", scope);
    }
    static GDBusProxyTypeFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GDBusProxyTypeFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress _manager, MemoryAddress _object_path, MemoryAddress _interface_name, MemoryAddress _user_data) -> {
            try {
                return (long)constants$496.GDBusProxyTypeFunc$MH.invokeExact(symbol, (Addressable)_manager, (Addressable)_object_path, (Addressable)_interface_name, (Addressable)_user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


