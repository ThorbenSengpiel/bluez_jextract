// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GTlsDatabaseClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("verify_chain"),
        Constants$root.C_POINTER$LAYOUT.withName("verify_chain_async"),
        Constants$root.C_POINTER$LAYOUT.withName("verify_chain_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("create_certificate_handle"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificate_for_handle"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificate_for_handle_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificate_for_handle_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificate_issuer"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificate_issuer_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificate_issuer_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificates_issued_by"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificates_issued_by_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_certificates_issued_by_finish"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GTlsDatabaseClass");
    public static MemoryLayout $LAYOUT() {
        return _GTlsDatabaseClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor verify_chain$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle verify_chain$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.verify_chain$FUNC, false
    );
    public interface verify_chain {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4, int _x5, MemoryAddress _x6, MemoryAddress _x7);
        static NativeSymbol allocate(verify_chain fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(verify_chain.class, fi, _GTlsDatabaseClass.verify_chain$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static verify_chain ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("verify_chain::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4, int __x5, MemoryAddress __x6, MemoryAddress __x7) -> {
                try {
                    return (int)_GTlsDatabaseClass.verify_chain$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4, __x5, (Addressable)__x6, (Addressable)__x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle verify_chain$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("verify_chain"));
    public static VarHandle verify_chain$VH() {
        return _GTlsDatabaseClass.verify_chain$VH;
    }
    public static MemoryAddress verify_chain$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.verify_chain$VH.get(seg);
    }
    public static void verify_chain$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.verify_chain$VH.set(seg, x);
    }
    public static MemoryAddress verify_chain$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.verify_chain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void verify_chain$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.verify_chain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static verify_chain verify_chain (MemorySegment segment, ResourceScope scope) {
        return verify_chain.ofAddress(verify_chain$get(segment), scope);
    }
    static final FunctionDescriptor verify_chain_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle verify_chain_async$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.verify_chain_async$FUNC, false
    );
    public interface verify_chain_async {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4, int _x5, MemoryAddress _x6, MemoryAddress _x7, MemoryAddress _x8);
        static NativeSymbol allocate(verify_chain_async fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(verify_chain_async.class, fi, _GTlsDatabaseClass.verify_chain_async$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static verify_chain_async ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("verify_chain_async::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4, int __x5, MemoryAddress __x6, MemoryAddress __x7, MemoryAddress __x8) -> {
                try {
                    _GTlsDatabaseClass.verify_chain_async$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4, __x5, (Addressable)__x6, (Addressable)__x7, (Addressable)__x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle verify_chain_async$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("verify_chain_async"));
    public static VarHandle verify_chain_async$VH() {
        return _GTlsDatabaseClass.verify_chain_async$VH;
    }
    public static MemoryAddress verify_chain_async$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.verify_chain_async$VH.get(seg);
    }
    public static void verify_chain_async$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.verify_chain_async$VH.set(seg, x);
    }
    public static MemoryAddress verify_chain_async$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.verify_chain_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void verify_chain_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.verify_chain_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static verify_chain_async verify_chain_async (MemorySegment segment, ResourceScope scope) {
        return verify_chain_async.ofAddress(verify_chain_async$get(segment), scope);
    }
    static final FunctionDescriptor verify_chain_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle verify_chain_finish$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.verify_chain_finish$FUNC, false
    );
    public interface verify_chain_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(verify_chain_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(verify_chain_finish.class, fi, _GTlsDatabaseClass.verify_chain_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static verify_chain_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("verify_chain_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GTlsDatabaseClass.verify_chain_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle verify_chain_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("verify_chain_finish"));
    public static VarHandle verify_chain_finish$VH() {
        return _GTlsDatabaseClass.verify_chain_finish$VH;
    }
    public static MemoryAddress verify_chain_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.verify_chain_finish$VH.get(seg);
    }
    public static void verify_chain_finish$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.verify_chain_finish$VH.set(seg, x);
    }
    public static MemoryAddress verify_chain_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.verify_chain_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void verify_chain_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.verify_chain_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static verify_chain_finish verify_chain_finish (MemorySegment segment, ResourceScope scope) {
        return verify_chain_finish.ofAddress(verify_chain_finish$get(segment), scope);
    }
    static final FunctionDescriptor create_certificate_handle$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_certificate_handle$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.create_certificate_handle$FUNC, false
    );
    public interface create_certificate_handle {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(create_certificate_handle fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(create_certificate_handle.class, fi, _GTlsDatabaseClass.create_certificate_handle$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static create_certificate_handle ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("create_certificate_handle::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GTlsDatabaseClass.create_certificate_handle$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_certificate_handle$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("create_certificate_handle"));
    public static VarHandle create_certificate_handle$VH() {
        return _GTlsDatabaseClass.create_certificate_handle$VH;
    }
    public static MemoryAddress create_certificate_handle$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.create_certificate_handle$VH.get(seg);
    }
    public static void create_certificate_handle$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.create_certificate_handle$VH.set(seg, x);
    }
    public static MemoryAddress create_certificate_handle$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.create_certificate_handle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_certificate_handle$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.create_certificate_handle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_certificate_handle create_certificate_handle (MemorySegment segment, ResourceScope scope) {
        return create_certificate_handle.ofAddress(create_certificate_handle$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificate_for_handle$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificate_for_handle$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificate_for_handle$FUNC, false
    );
    public interface lookup_certificate_for_handle {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, int _x3, MemoryAddress _x4, MemoryAddress _x5);
        static NativeSymbol allocate(lookup_certificate_for_handle fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificate_for_handle.class, fi, _GTlsDatabaseClass.lookup_certificate_for_handle$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static lookup_certificate_for_handle ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificate_for_handle::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, int __x3, MemoryAddress __x4, MemoryAddress __x5) -> {
                try {
                    return (Addressable)(MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, __x3, (Addressable)__x4, (Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificate_for_handle$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificate_for_handle"));
    public static VarHandle lookup_certificate_for_handle$VH() {
        return _GTlsDatabaseClass.lookup_certificate_for_handle$VH;
    }
    public static MemoryAddress lookup_certificate_for_handle$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle$VH.get(seg);
    }
    public static void lookup_certificate_for_handle$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_for_handle$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificate_for_handle$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_for_handle$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_for_handle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_for_handle lookup_certificate_for_handle (MemorySegment segment, ResourceScope scope) {
        return lookup_certificate_for_handle.ofAddress(lookup_certificate_for_handle$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificate_for_handle_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificate_for_handle_async$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificate_for_handle_async$FUNC, false
    );
    public interface lookup_certificate_for_handle_async {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, int _x3, MemoryAddress _x4, MemoryAddress _x5, MemoryAddress _x6);
        static NativeSymbol allocate(lookup_certificate_for_handle_async fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificate_for_handle_async.class, fi, _GTlsDatabaseClass.lookup_certificate_for_handle_async$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static lookup_certificate_for_handle_async ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificate_for_handle_async::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, int __x3, MemoryAddress __x4, MemoryAddress __x5, MemoryAddress __x6) -> {
                try {
                    _GTlsDatabaseClass.lookup_certificate_for_handle_async$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, __x3, (Addressable)__x4, (Addressable)__x5, (Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificate_for_handle_async$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificate_for_handle_async"));
    public static VarHandle lookup_certificate_for_handle_async$VH() {
        return _GTlsDatabaseClass.lookup_certificate_for_handle_async$VH;
    }
    public static MemoryAddress lookup_certificate_for_handle_async$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle_async$VH.get(seg);
    }
    public static void lookup_certificate_for_handle_async$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_for_handle_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificate_for_handle_async$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_for_handle_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_for_handle_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_for_handle_async lookup_certificate_for_handle_async (MemorySegment segment, ResourceScope scope) {
        return lookup_certificate_for_handle_async.ofAddress(lookup_certificate_for_handle_async$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificate_for_handle_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificate_for_handle_finish$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificate_for_handle_finish$FUNC, false
    );
    public interface lookup_certificate_for_handle_finish {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(lookup_certificate_for_handle_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificate_for_handle_finish.class, fi, _GTlsDatabaseClass.lookup_certificate_for_handle_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static lookup_certificate_for_handle_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificate_for_handle_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (Addressable)(MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificate_for_handle_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificate_for_handle_finish"));
    public static VarHandle lookup_certificate_for_handle_finish$VH() {
        return _GTlsDatabaseClass.lookup_certificate_for_handle_finish$VH;
    }
    public static MemoryAddress lookup_certificate_for_handle_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle_finish$VH.get(seg);
    }
    public static void lookup_certificate_for_handle_finish$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_for_handle_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificate_for_handle_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_for_handle_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_for_handle_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_for_handle_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_for_handle_finish lookup_certificate_for_handle_finish (MemorySegment segment, ResourceScope scope) {
        return lookup_certificate_for_handle_finish.ofAddress(lookup_certificate_for_handle_finish$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificate_issuer$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificate_issuer$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificate_issuer$FUNC, false
    );
    public interface lookup_certificate_issuer {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, int _x3, MemoryAddress _x4, MemoryAddress _x5);
        static NativeSymbol allocate(lookup_certificate_issuer fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificate_issuer.class, fi, _GTlsDatabaseClass.lookup_certificate_issuer$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static lookup_certificate_issuer ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificate_issuer::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, int __x3, MemoryAddress __x4, MemoryAddress __x5) -> {
                try {
                    return (Addressable)(MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, __x3, (Addressable)__x4, (Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificate_issuer$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificate_issuer"));
    public static VarHandle lookup_certificate_issuer$VH() {
        return _GTlsDatabaseClass.lookup_certificate_issuer$VH;
    }
    public static MemoryAddress lookup_certificate_issuer$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer$VH.get(seg);
    }
    public static void lookup_certificate_issuer$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_issuer$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificate_issuer$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_issuer$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_issuer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_issuer lookup_certificate_issuer (MemorySegment segment, ResourceScope scope) {
        return lookup_certificate_issuer.ofAddress(lookup_certificate_issuer$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificate_issuer_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificate_issuer_async$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificate_issuer_async$FUNC, false
    );
    public interface lookup_certificate_issuer_async {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, int _x3, MemoryAddress _x4, MemoryAddress _x5, MemoryAddress _x6);
        static NativeSymbol allocate(lookup_certificate_issuer_async fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificate_issuer_async.class, fi, _GTlsDatabaseClass.lookup_certificate_issuer_async$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static lookup_certificate_issuer_async ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificate_issuer_async::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, int __x3, MemoryAddress __x4, MemoryAddress __x5, MemoryAddress __x6) -> {
                try {
                    _GTlsDatabaseClass.lookup_certificate_issuer_async$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, __x3, (Addressable)__x4, (Addressable)__x5, (Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificate_issuer_async$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificate_issuer_async"));
    public static VarHandle lookup_certificate_issuer_async$VH() {
        return _GTlsDatabaseClass.lookup_certificate_issuer_async$VH;
    }
    public static MemoryAddress lookup_certificate_issuer_async$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer_async$VH.get(seg);
    }
    public static void lookup_certificate_issuer_async$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_issuer_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificate_issuer_async$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_issuer_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_issuer_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_issuer_async lookup_certificate_issuer_async (MemorySegment segment, ResourceScope scope) {
        return lookup_certificate_issuer_async.ofAddress(lookup_certificate_issuer_async$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificate_issuer_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificate_issuer_finish$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificate_issuer_finish$FUNC, false
    );
    public interface lookup_certificate_issuer_finish {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(lookup_certificate_issuer_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificate_issuer_finish.class, fi, _GTlsDatabaseClass.lookup_certificate_issuer_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static lookup_certificate_issuer_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificate_issuer_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (Addressable)(MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificate_issuer_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificate_issuer_finish"));
    public static VarHandle lookup_certificate_issuer_finish$VH() {
        return _GTlsDatabaseClass.lookup_certificate_issuer_finish$VH;
    }
    public static MemoryAddress lookup_certificate_issuer_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer_finish$VH.get(seg);
    }
    public static void lookup_certificate_issuer_finish$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_issuer_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificate_issuer_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificate_issuer_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_issuer_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificate_issuer_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_issuer_finish lookup_certificate_issuer_finish (MemorySegment segment, ResourceScope scope) {
        return lookup_certificate_issuer_finish.ofAddress(lookup_certificate_issuer_finish$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificates_issued_by$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificates_issued_by$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificates_issued_by$FUNC, false
    );
    public interface lookup_certificates_issued_by {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, int _x3, MemoryAddress _x4, MemoryAddress _x5);
        static NativeSymbol allocate(lookup_certificates_issued_by fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificates_issued_by.class, fi, _GTlsDatabaseClass.lookup_certificates_issued_by$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static lookup_certificates_issued_by ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificates_issued_by::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, int __x3, MemoryAddress __x4, MemoryAddress __x5) -> {
                try {
                    return (Addressable)(MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, __x3, (Addressable)__x4, (Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificates_issued_by$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificates_issued_by"));
    public static VarHandle lookup_certificates_issued_by$VH() {
        return _GTlsDatabaseClass.lookup_certificates_issued_by$VH;
    }
    public static MemoryAddress lookup_certificates_issued_by$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by$VH.get(seg);
    }
    public static void lookup_certificates_issued_by$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificates_issued_by$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificates_issued_by$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificates_issued_by$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificates_issued_by$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificates_issued_by lookup_certificates_issued_by (MemorySegment segment, ResourceScope scope) {
        return lookup_certificates_issued_by.ofAddress(lookup_certificates_issued_by$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificates_issued_by_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificates_issued_by_async$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificates_issued_by_async$FUNC, false
    );
    public interface lookup_certificates_issued_by_async {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, int _x3, MemoryAddress _x4, MemoryAddress _x5, MemoryAddress _x6);
        static NativeSymbol allocate(lookup_certificates_issued_by_async fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificates_issued_by_async.class, fi, _GTlsDatabaseClass.lookup_certificates_issued_by_async$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static lookup_certificates_issued_by_async ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificates_issued_by_async::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, int __x3, MemoryAddress __x4, MemoryAddress __x5, MemoryAddress __x6) -> {
                try {
                    _GTlsDatabaseClass.lookup_certificates_issued_by_async$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, __x3, (Addressable)__x4, (Addressable)__x5, (Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificates_issued_by_async$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificates_issued_by_async"));
    public static VarHandle lookup_certificates_issued_by_async$VH() {
        return _GTlsDatabaseClass.lookup_certificates_issued_by_async$VH;
    }
    public static MemoryAddress lookup_certificates_issued_by_async$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by_async$VH.get(seg);
    }
    public static void lookup_certificates_issued_by_async$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificates_issued_by_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificates_issued_by_async$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificates_issued_by_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificates_issued_by_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificates_issued_by_async lookup_certificates_issued_by_async (MemorySegment segment, ResourceScope scope) {
        return lookup_certificates_issued_by_async.ofAddress(lookup_certificates_issued_by_async$get(segment), scope);
    }
    static final FunctionDescriptor lookup_certificates_issued_by_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_certificates_issued_by_finish$MH = RuntimeHelper.downcallHandle(
        _GTlsDatabaseClass.lookup_certificates_issued_by_finish$FUNC, false
    );
    public interface lookup_certificates_issued_by_finish {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(lookup_certificates_issued_by_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(lookup_certificates_issued_by_finish.class, fi, _GTlsDatabaseClass.lookup_certificates_issued_by_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static lookup_certificates_issued_by_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("lookup_certificates_issued_by_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (Addressable)(MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_certificates_issued_by_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("lookup_certificates_issued_by_finish"));
    public static VarHandle lookup_certificates_issued_by_finish$VH() {
        return _GTlsDatabaseClass.lookup_certificates_issued_by_finish$VH;
    }
    public static MemoryAddress lookup_certificates_issued_by_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by_finish$VH.get(seg);
    }
    public static void lookup_certificates_issued_by_finish$set( MemorySegment seg, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificates_issued_by_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_certificates_issued_by_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTlsDatabaseClass.lookup_certificates_issued_by_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificates_issued_by_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsDatabaseClass.lookup_certificates_issued_by_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificates_issued_by_finish lookup_certificates_issued_by_finish (MemorySegment segment, ResourceScope scope) {
        return lookup_certificates_issued_by_finish.ofAddress(lookup_certificates_issued_by_finish$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(240, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


