// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GSignalCMarshaller {

    void apply(MemoryAddress _x0, MemoryAddress _x1, int _x2, MemoryAddress _x3, MemoryAddress _x4, MemoryAddress _x5);
    static NativeSymbol allocate(GSignalCMarshaller fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GSignalCMarshaller.class, fi, constants$435.GSignalCMarshaller$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GSignalCMarshaller ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GSignalCMarshaller::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, int __x2, MemoryAddress __x3, MemoryAddress __x4, MemoryAddress __x5) -> {
            try {
                constants$435.GSignalCMarshaller$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, __x2, (Addressable)__x3, (Addressable)__x4, (Addressable)__x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


