// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GTypeQuery {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("type"),
        Constants$root.C_POINTER$LAYOUT.withName("type_name"),
        Constants$root.C_INT$LAYOUT.withName("class_size"),
        Constants$root.C_INT$LAYOUT.withName("instance_size")
    ).withName("_GTypeQuery");
    public static MemoryLayout $LAYOUT() {
        return _GTypeQuery.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _GTypeQuery.type$VH;
    }
    public static long type$get(MemorySegment seg) {
        return (long)_GTypeQuery.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, long x) {
        _GTypeQuery.type$VH.set(seg, x);
    }
    public static long type$get(MemorySegment seg, long index) {
        return (long)_GTypeQuery.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, long x) {
        _GTypeQuery.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type_name$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("type_name"));
    public static VarHandle type_name$VH() {
        return _GTypeQuery.type_name$VH;
    }
    public static MemoryAddress type_name$get(MemorySegment seg) {
        return (MemoryAddress)_GTypeQuery.type_name$VH.get(seg);
    }
    public static void type_name$set( MemorySegment seg, MemoryAddress x) {
        _GTypeQuery.type_name$VH.set(seg, x);
    }
    public static MemoryAddress type_name$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GTypeQuery.type_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeQuery.type_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle class_size$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("class_size"));
    public static VarHandle class_size$VH() {
        return _GTypeQuery.class_size$VH;
    }
    public static int class_size$get(MemorySegment seg) {
        return (int)_GTypeQuery.class_size$VH.get(seg);
    }
    public static void class_size$set( MemorySegment seg, int x) {
        _GTypeQuery.class_size$VH.set(seg, x);
    }
    public static int class_size$get(MemorySegment seg, long index) {
        return (int)_GTypeQuery.class_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void class_size$set(MemorySegment seg, long index, int x) {
        _GTypeQuery.class_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle instance_size$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("instance_size"));
    public static VarHandle instance_size$VH() {
        return _GTypeQuery.instance_size$VH;
    }
    public static int instance_size$get(MemorySegment seg) {
        return (int)_GTypeQuery.instance_size$VH.get(seg);
    }
    public static void instance_size$set( MemorySegment seg, int x) {
        _GTypeQuery.instance_size$VH.set(seg, x);
    }
    public static int instance_size$get(MemorySegment seg, long index) {
        return (int)_GTypeQuery.instance_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void instance_size$set(MemorySegment seg, long index, int x) {
        _GTypeQuery.instance_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


