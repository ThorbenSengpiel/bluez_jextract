// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _Device1Iface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_cancel_pairing"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_connect"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_connect_profile"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_disconnect"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_disconnect_profile"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_pair"),
        Constants$root.C_POINTER$LAYOUT.withName("get_adapter"),
        Constants$root.C_POINTER$LAYOUT.withName("get_address"),
        Constants$root.C_POINTER$LAYOUT.withName("get_alias"),
        Constants$root.C_POINTER$LAYOUT.withName("get_appearance"),
        Constants$root.C_POINTER$LAYOUT.withName("get_blocked"),
        Constants$root.C_POINTER$LAYOUT.withName("get_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_connected"),
        Constants$root.C_POINTER$LAYOUT.withName("get_icon"),
        Constants$root.C_POINTER$LAYOUT.withName("get_legacy_pairing"),
        Constants$root.C_POINTER$LAYOUT.withName("get_manufacturer_data"),
        Constants$root.C_POINTER$LAYOUT.withName("get_modalias"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_paired"),
        Constants$root.C_POINTER$LAYOUT.withName("get_rssi"),
        Constants$root.C_POINTER$LAYOUT.withName("get_service_data"),
        Constants$root.C_POINTER$LAYOUT.withName("get_services_resolved"),
        Constants$root.C_POINTER$LAYOUT.withName("get_trusted"),
        Constants$root.C_POINTER$LAYOUT.withName("get_tx_power"),
        Constants$root.C_POINTER$LAYOUT.withName("get_uuids")
    ).withName("_Device1Iface");
    public static MemoryLayout $LAYOUT() {
        return _Device1Iface.$struct$LAYOUT;
    }
    public static MemorySegment parent_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor handle_cancel_pairing$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_cancel_pairing$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.handle_cancel_pairing$FUNC, false
    );
    public interface handle_cancel_pairing {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_cancel_pairing fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_cancel_pairing.class, fi, _Device1Iface.handle_cancel_pairing$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_cancel_pairing ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_cancel_pairing::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_Device1Iface.handle_cancel_pairing$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_cancel_pairing$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_cancel_pairing"));
    public static VarHandle handle_cancel_pairing$VH() {
        return _Device1Iface.handle_cancel_pairing$VH;
    }
    public static MemoryAddress handle_cancel_pairing$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.handle_cancel_pairing$VH.get(seg);
    }
    public static void handle_cancel_pairing$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.handle_cancel_pairing$VH.set(seg, x);
    }
    public static MemoryAddress handle_cancel_pairing$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.handle_cancel_pairing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_cancel_pairing$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.handle_cancel_pairing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_cancel_pairing handle_cancel_pairing (MemorySegment segment, ResourceScope scope) {
        return handle_cancel_pairing.ofAddress(handle_cancel_pairing$get(segment), scope);
    }
    static final FunctionDescriptor handle_connect$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_connect$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.handle_connect$FUNC, false
    );
    public interface handle_connect {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_connect fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_connect.class, fi, _Device1Iface.handle_connect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_connect ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_connect::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_Device1Iface.handle_connect$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_connect$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_connect"));
    public static VarHandle handle_connect$VH() {
        return _Device1Iface.handle_connect$VH;
    }
    public static MemoryAddress handle_connect$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.handle_connect$VH.get(seg);
    }
    public static void handle_connect$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.handle_connect$VH.set(seg, x);
    }
    public static MemoryAddress handle_connect$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.handle_connect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_connect$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.handle_connect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_connect handle_connect (MemorySegment segment, ResourceScope scope) {
        return handle_connect.ofAddress(handle_connect$get(segment), scope);
    }
    static final FunctionDescriptor handle_connect_profile$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_connect_profile$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.handle_connect_profile$FUNC, false
    );
    public interface handle_connect_profile {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handle_connect_profile fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_connect_profile.class, fi, _Device1Iface.handle_connect_profile$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_connect_profile ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_connect_profile::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_Device1Iface.handle_connect_profile$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_connect_profile$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_connect_profile"));
    public static VarHandle handle_connect_profile$VH() {
        return _Device1Iface.handle_connect_profile$VH;
    }
    public static MemoryAddress handle_connect_profile$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.handle_connect_profile$VH.get(seg);
    }
    public static void handle_connect_profile$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.handle_connect_profile$VH.set(seg, x);
    }
    public static MemoryAddress handle_connect_profile$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.handle_connect_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_connect_profile$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.handle_connect_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_connect_profile handle_connect_profile (MemorySegment segment, ResourceScope scope) {
        return handle_connect_profile.ofAddress(handle_connect_profile$get(segment), scope);
    }
    static final FunctionDescriptor handle_disconnect$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_disconnect$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.handle_disconnect$FUNC, false
    );
    public interface handle_disconnect {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_disconnect fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_disconnect.class, fi, _Device1Iface.handle_disconnect$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_disconnect ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_disconnect::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_Device1Iface.handle_disconnect$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_disconnect$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_disconnect"));
    public static VarHandle handle_disconnect$VH() {
        return _Device1Iface.handle_disconnect$VH;
    }
    public static MemoryAddress handle_disconnect$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.handle_disconnect$VH.get(seg);
    }
    public static void handle_disconnect$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.handle_disconnect$VH.set(seg, x);
    }
    public static MemoryAddress handle_disconnect$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.handle_disconnect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_disconnect$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.handle_disconnect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_disconnect handle_disconnect (MemorySegment segment, ResourceScope scope) {
        return handle_disconnect.ofAddress(handle_disconnect$get(segment), scope);
    }
    static final FunctionDescriptor handle_disconnect_profile$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_disconnect_profile$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.handle_disconnect_profile$FUNC, false
    );
    public interface handle_disconnect_profile {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handle_disconnect_profile fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_disconnect_profile.class, fi, _Device1Iface.handle_disconnect_profile$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_disconnect_profile ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_disconnect_profile::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_Device1Iface.handle_disconnect_profile$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_disconnect_profile$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_disconnect_profile"));
    public static VarHandle handle_disconnect_profile$VH() {
        return _Device1Iface.handle_disconnect_profile$VH;
    }
    public static MemoryAddress handle_disconnect_profile$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.handle_disconnect_profile$VH.get(seg);
    }
    public static void handle_disconnect_profile$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.handle_disconnect_profile$VH.set(seg, x);
    }
    public static MemoryAddress handle_disconnect_profile$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.handle_disconnect_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_disconnect_profile$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.handle_disconnect_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_disconnect_profile handle_disconnect_profile (MemorySegment segment, ResourceScope scope) {
        return handle_disconnect_profile.ofAddress(handle_disconnect_profile$get(segment), scope);
    }
    static final FunctionDescriptor handle_pair$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_pair$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.handle_pair$FUNC, false
    );
    public interface handle_pair {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_pair fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_pair.class, fi, _Device1Iface.handle_pair$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_pair ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_pair::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_Device1Iface.handle_pair$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_pair$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_pair"));
    public static VarHandle handle_pair$VH() {
        return _Device1Iface.handle_pair$VH;
    }
    public static MemoryAddress handle_pair$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.handle_pair$VH.get(seg);
    }
    public static void handle_pair$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.handle_pair$VH.set(seg, x);
    }
    public static MemoryAddress handle_pair$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.handle_pair$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_pair$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.handle_pair$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_pair handle_pair (MemorySegment segment, ResourceScope scope) {
        return handle_pair.ofAddress(handle_pair$get(segment), scope);
    }
    static final FunctionDescriptor get_adapter$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_adapter$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_adapter$FUNC, false
    );
    public interface get_adapter {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_adapter fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_adapter.class, fi, _Device1Iface.get_adapter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_adapter ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_adapter::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_adapter$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_adapter$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_adapter"));
    public static VarHandle get_adapter$VH() {
        return _Device1Iface.get_adapter$VH;
    }
    public static MemoryAddress get_adapter$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_adapter$VH.get(seg);
    }
    public static void get_adapter$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_adapter$VH.set(seg, x);
    }
    public static MemoryAddress get_adapter$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_adapter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_adapter$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_adapter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_adapter get_adapter (MemorySegment segment, ResourceScope scope) {
        return get_adapter.ofAddress(get_adapter$get(segment), scope);
    }
    static final FunctionDescriptor get_address$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_address$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_address$FUNC, false
    );
    public interface get_address {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_address fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_address.class, fi, _Device1Iface.get_address$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_address ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_address::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_address$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_address$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_address"));
    public static VarHandle get_address$VH() {
        return _Device1Iface.get_address$VH;
    }
    public static MemoryAddress get_address$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_address$VH.get(seg);
    }
    public static void get_address$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_address$VH.set(seg, x);
    }
    public static MemoryAddress get_address$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_address$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_address$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_address$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_address get_address (MemorySegment segment, ResourceScope scope) {
        return get_address.ofAddress(get_address$get(segment), scope);
    }
    static final FunctionDescriptor get_alias$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_alias$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_alias$FUNC, false
    );
    public interface get_alias {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_alias fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_alias.class, fi, _Device1Iface.get_alias$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_alias ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_alias::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_alias$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_alias$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_alias"));
    public static VarHandle get_alias$VH() {
        return _Device1Iface.get_alias$VH;
    }
    public static MemoryAddress get_alias$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_alias$VH.get(seg);
    }
    public static void get_alias$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_alias$VH.set(seg, x);
    }
    public static MemoryAddress get_alias$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_alias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_alias$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_alias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_alias get_alias (MemorySegment segment, ResourceScope scope) {
        return get_alias.ofAddress(get_alias$get(segment), scope);
    }
    static final FunctionDescriptor get_appearance$FUNC = FunctionDescriptor.of(Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_appearance$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_appearance$FUNC, false
    );
    public interface get_appearance {

        short apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_appearance fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_appearance.class, fi, _Device1Iface.get_appearance$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)S", scope);
        }
        static get_appearance ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_appearance::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (short)_Device1Iface.get_appearance$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_appearance$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_appearance"));
    public static VarHandle get_appearance$VH() {
        return _Device1Iface.get_appearance$VH;
    }
    public static MemoryAddress get_appearance$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_appearance$VH.get(seg);
    }
    public static void get_appearance$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_appearance$VH.set(seg, x);
    }
    public static MemoryAddress get_appearance$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_appearance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_appearance$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_appearance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_appearance get_appearance (MemorySegment segment, ResourceScope scope) {
        return get_appearance.ofAddress(get_appearance$get(segment), scope);
    }
    static final FunctionDescriptor get_blocked$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_blocked$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_blocked$FUNC, false
    );
    public interface get_blocked {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_blocked fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_blocked.class, fi, _Device1Iface.get_blocked$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_blocked ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_blocked::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Device1Iface.get_blocked$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_blocked$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_blocked"));
    public static VarHandle get_blocked$VH() {
        return _Device1Iface.get_blocked$VH;
    }
    public static MemoryAddress get_blocked$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_blocked$VH.get(seg);
    }
    public static void get_blocked$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_blocked$VH.set(seg, x);
    }
    public static MemoryAddress get_blocked$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_blocked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_blocked$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_blocked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_blocked get_blocked (MemorySegment segment, ResourceScope scope) {
        return get_blocked.ofAddress(get_blocked$get(segment), scope);
    }
    static final FunctionDescriptor get_class$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_class$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_class$FUNC, false
    );
    public interface get_class {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_class fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_class.class, fi, _Device1Iface.get_class$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_class ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_class::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Device1Iface.get_class$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_class$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_class"));
    public static VarHandle get_class$VH() {
        return _Device1Iface.get_class$VH;
    }
    public static MemoryAddress get_class$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_class$VH.get(seg);
    }
    public static void get_class$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_class$VH.set(seg, x);
    }
    public static MemoryAddress get_class$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_class$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_class get_class (MemorySegment segment, ResourceScope scope) {
        return get_class.ofAddress(get_class$get(segment), scope);
    }
    static final FunctionDescriptor get_connected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_connected$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_connected$FUNC, false
    );
    public interface get_connected {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_connected fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_connected.class, fi, _Device1Iface.get_connected$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_connected ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_connected::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Device1Iface.get_connected$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_connected$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_connected"));
    public static VarHandle get_connected$VH() {
        return _Device1Iface.get_connected$VH;
    }
    public static MemoryAddress get_connected$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_connected$VH.get(seg);
    }
    public static void get_connected$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_connected$VH.set(seg, x);
    }
    public static MemoryAddress get_connected$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_connected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_connected$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_connected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_connected get_connected (MemorySegment segment, ResourceScope scope) {
        return get_connected.ofAddress(get_connected$get(segment), scope);
    }
    static final FunctionDescriptor get_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_icon$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_icon$FUNC, false
    );
    public interface get_icon {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_icon fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_icon.class, fi, _Device1Iface.get_icon$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_icon ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_icon::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_icon$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_icon$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_icon"));
    public static VarHandle get_icon$VH() {
        return _Device1Iface.get_icon$VH;
    }
    public static MemoryAddress get_icon$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_icon$VH.get(seg);
    }
    public static void get_icon$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_icon$VH.set(seg, x);
    }
    public static MemoryAddress get_icon$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon get_icon (MemorySegment segment, ResourceScope scope) {
        return get_icon.ofAddress(get_icon$get(segment), scope);
    }
    static final FunctionDescriptor get_legacy_pairing$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_legacy_pairing$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_legacy_pairing$FUNC, false
    );
    public interface get_legacy_pairing {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_legacy_pairing fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_legacy_pairing.class, fi, _Device1Iface.get_legacy_pairing$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_legacy_pairing ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_legacy_pairing::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Device1Iface.get_legacy_pairing$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_legacy_pairing$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_legacy_pairing"));
    public static VarHandle get_legacy_pairing$VH() {
        return _Device1Iface.get_legacy_pairing$VH;
    }
    public static MemoryAddress get_legacy_pairing$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_legacy_pairing$VH.get(seg);
    }
    public static void get_legacy_pairing$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_legacy_pairing$VH.set(seg, x);
    }
    public static MemoryAddress get_legacy_pairing$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_legacy_pairing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_legacy_pairing$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_legacy_pairing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_legacy_pairing get_legacy_pairing (MemorySegment segment, ResourceScope scope) {
        return get_legacy_pairing.ofAddress(get_legacy_pairing$get(segment), scope);
    }
    static final FunctionDescriptor get_manufacturer_data$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_manufacturer_data$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_manufacturer_data$FUNC, false
    );
    public interface get_manufacturer_data {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_manufacturer_data fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_manufacturer_data.class, fi, _Device1Iface.get_manufacturer_data$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_manufacturer_data ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_manufacturer_data::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_manufacturer_data$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_manufacturer_data$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_manufacturer_data"));
    public static VarHandle get_manufacturer_data$VH() {
        return _Device1Iface.get_manufacturer_data$VH;
    }
    public static MemoryAddress get_manufacturer_data$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_manufacturer_data$VH.get(seg);
    }
    public static void get_manufacturer_data$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_manufacturer_data$VH.set(seg, x);
    }
    public static MemoryAddress get_manufacturer_data$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_manufacturer_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_manufacturer_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_manufacturer_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_manufacturer_data get_manufacturer_data (MemorySegment segment, ResourceScope scope) {
        return get_manufacturer_data.ofAddress(get_manufacturer_data$get(segment), scope);
    }
    static final FunctionDescriptor get_modalias$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_modalias$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_modalias$FUNC, false
    );
    public interface get_modalias {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_modalias fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_modalias.class, fi, _Device1Iface.get_modalias$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_modalias ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_modalias::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_modalias$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_modalias$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_modalias"));
    public static VarHandle get_modalias$VH() {
        return _Device1Iface.get_modalias$VH;
    }
    public static MemoryAddress get_modalias$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_modalias$VH.get(seg);
    }
    public static void get_modalias$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_modalias$VH.set(seg, x);
    }
    public static MemoryAddress get_modalias$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_modalias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_modalias$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_modalias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_modalias get_modalias (MemorySegment segment, ResourceScope scope) {
        return get_modalias.ofAddress(get_modalias$get(segment), scope);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_name$FUNC, false
    );
    public interface get_name {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _Device1Iface.get_name$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_name$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _Device1Iface.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, ResourceScope scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    static final FunctionDescriptor get_paired$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_paired$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_paired$FUNC, false
    );
    public interface get_paired {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_paired fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_paired.class, fi, _Device1Iface.get_paired$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_paired ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_paired::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Device1Iface.get_paired$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_paired$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_paired"));
    public static VarHandle get_paired$VH() {
        return _Device1Iface.get_paired$VH;
    }
    public static MemoryAddress get_paired$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_paired$VH.get(seg);
    }
    public static void get_paired$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_paired$VH.set(seg, x);
    }
    public static MemoryAddress get_paired$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_paired$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_paired$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_paired$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_paired get_paired (MemorySegment segment, ResourceScope scope) {
        return get_paired.ofAddress(get_paired$get(segment), scope);
    }
    static final FunctionDescriptor get_rssi$FUNC = FunctionDescriptor.of(Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_rssi$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_rssi$FUNC, false
    );
    public interface get_rssi {

        short apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_rssi fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_rssi.class, fi, _Device1Iface.get_rssi$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)S", scope);
        }
        static get_rssi ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_rssi::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (short)_Device1Iface.get_rssi$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_rssi$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_rssi"));
    public static VarHandle get_rssi$VH() {
        return _Device1Iface.get_rssi$VH;
    }
    public static MemoryAddress get_rssi$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_rssi$VH.get(seg);
    }
    public static void get_rssi$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_rssi$VH.set(seg, x);
    }
    public static MemoryAddress get_rssi$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_rssi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_rssi$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_rssi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_rssi get_rssi (MemorySegment segment, ResourceScope scope) {
        return get_rssi.ofAddress(get_rssi$get(segment), scope);
    }
    static final FunctionDescriptor get_service_data$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_service_data$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_service_data$FUNC, false
    );
    public interface get_service_data {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_service_data fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_service_data.class, fi, _Device1Iface.get_service_data$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_service_data ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_service_data::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_service_data$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_service_data$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_service_data"));
    public static VarHandle get_service_data$VH() {
        return _Device1Iface.get_service_data$VH;
    }
    public static MemoryAddress get_service_data$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_service_data$VH.get(seg);
    }
    public static void get_service_data$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_service_data$VH.set(seg, x);
    }
    public static MemoryAddress get_service_data$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_service_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_service_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_service_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_service_data get_service_data (MemorySegment segment, ResourceScope scope) {
        return get_service_data.ofAddress(get_service_data$get(segment), scope);
    }
    static final FunctionDescriptor get_services_resolved$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_services_resolved$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_services_resolved$FUNC, false
    );
    public interface get_services_resolved {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_services_resolved fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_services_resolved.class, fi, _Device1Iface.get_services_resolved$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_services_resolved ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_services_resolved::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Device1Iface.get_services_resolved$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_services_resolved$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_services_resolved"));
    public static VarHandle get_services_resolved$VH() {
        return _Device1Iface.get_services_resolved$VH;
    }
    public static MemoryAddress get_services_resolved$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_services_resolved$VH.get(seg);
    }
    public static void get_services_resolved$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_services_resolved$VH.set(seg, x);
    }
    public static MemoryAddress get_services_resolved$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_services_resolved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_services_resolved$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_services_resolved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_services_resolved get_services_resolved (MemorySegment segment, ResourceScope scope) {
        return get_services_resolved.ofAddress(get_services_resolved$get(segment), scope);
    }
    static final FunctionDescriptor get_trusted$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_trusted$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_trusted$FUNC, false
    );
    public interface get_trusted {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_trusted fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_trusted.class, fi, _Device1Iface.get_trusted$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_trusted ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_trusted::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Device1Iface.get_trusted$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_trusted$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_trusted"));
    public static VarHandle get_trusted$VH() {
        return _Device1Iface.get_trusted$VH;
    }
    public static MemoryAddress get_trusted$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_trusted$VH.get(seg);
    }
    public static void get_trusted$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_trusted$VH.set(seg, x);
    }
    public static MemoryAddress get_trusted$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_trusted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_trusted$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_trusted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_trusted get_trusted (MemorySegment segment, ResourceScope scope) {
        return get_trusted.ofAddress(get_trusted$get(segment), scope);
    }
    static final FunctionDescriptor get_tx_power$FUNC = FunctionDescriptor.of(Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_tx_power$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_tx_power$FUNC, false
    );
    public interface get_tx_power {

        short apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_tx_power fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_tx_power.class, fi, _Device1Iface.get_tx_power$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)S", scope);
        }
        static get_tx_power ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_tx_power::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (short)_Device1Iface.get_tx_power$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_tx_power$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_tx_power"));
    public static VarHandle get_tx_power$VH() {
        return _Device1Iface.get_tx_power$VH;
    }
    public static MemoryAddress get_tx_power$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_tx_power$VH.get(seg);
    }
    public static void get_tx_power$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_tx_power$VH.set(seg, x);
    }
    public static MemoryAddress get_tx_power$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_tx_power$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_tx_power$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_tx_power$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_tx_power get_tx_power (MemorySegment segment, ResourceScope scope) {
        return get_tx_power.ofAddress(get_tx_power$get(segment), scope);
    }
    static final FunctionDescriptor get_uuids$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_uuids$MH = RuntimeHelper.downcallHandle(
        _Device1Iface.get_uuids$FUNC, false
    );
    public interface get_uuids {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_uuids fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_uuids.class, fi, _Device1Iface.get_uuids$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_uuids ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_uuids::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Device1Iface.get_uuids$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_uuids$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_uuids"));
    public static VarHandle get_uuids$VH() {
        return _Device1Iface.get_uuids$VH;
    }
    public static MemoryAddress get_uuids$get(MemorySegment seg) {
        return (MemoryAddress)_Device1Iface.get_uuids$VH.get(seg);
    }
    public static void get_uuids$set( MemorySegment seg, MemoryAddress x) {
        _Device1Iface.get_uuids$VH.set(seg, x);
    }
    public static MemoryAddress get_uuids$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Device1Iface.get_uuids$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuids$set(MemorySegment seg, long index, MemoryAddress x) {
        _Device1Iface.get_uuids$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuids get_uuids (MemorySegment segment, ResourceScope scope) {
        return get_uuids.ofAddress(get_uuids$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


