// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GApplicationCommandLineClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("print_literal"),
        Constants$root.C_POINTER$LAYOUT.withName("printerr_literal"),
        Constants$root.C_POINTER$LAYOUT.withName("get_stdin"),
        MemoryLayout.sequenceLayout(11, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GApplicationCommandLineClass");
    public static MemoryLayout $LAYOUT() {
        return _GApplicationCommandLineClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor print_literal$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle print_literal$MH = RuntimeHelper.downcallHandle(
        _GApplicationCommandLineClass.print_literal$FUNC, false
    );
    public interface print_literal {

        void apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(print_literal fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(print_literal.class, fi, _GApplicationCommandLineClass.print_literal$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static print_literal ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("print_literal::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    _GApplicationCommandLineClass.print_literal$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle print_literal$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("print_literal"));
    public static VarHandle print_literal$VH() {
        return _GApplicationCommandLineClass.print_literal$VH;
    }
    public static MemoryAddress print_literal$get(MemorySegment seg) {
        return (MemoryAddress)_GApplicationCommandLineClass.print_literal$VH.get(seg);
    }
    public static void print_literal$set( MemorySegment seg, MemoryAddress x) {
        _GApplicationCommandLineClass.print_literal$VH.set(seg, x);
    }
    public static MemoryAddress print_literal$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GApplicationCommandLineClass.print_literal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void print_literal$set(MemorySegment seg, long index, MemoryAddress x) {
        _GApplicationCommandLineClass.print_literal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static print_literal print_literal (MemorySegment segment, ResourceScope scope) {
        return print_literal.ofAddress(print_literal$get(segment), scope);
    }
    static final FunctionDescriptor printerr_literal$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle printerr_literal$MH = RuntimeHelper.downcallHandle(
        _GApplicationCommandLineClass.printerr_literal$FUNC, false
    );
    public interface printerr_literal {

        void apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(printerr_literal fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(printerr_literal.class, fi, _GApplicationCommandLineClass.printerr_literal$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static printerr_literal ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("printerr_literal::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    _GApplicationCommandLineClass.printerr_literal$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle printerr_literal$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("printerr_literal"));
    public static VarHandle printerr_literal$VH() {
        return _GApplicationCommandLineClass.printerr_literal$VH;
    }
    public static MemoryAddress printerr_literal$get(MemorySegment seg) {
        return (MemoryAddress)_GApplicationCommandLineClass.printerr_literal$VH.get(seg);
    }
    public static void printerr_literal$set( MemorySegment seg, MemoryAddress x) {
        _GApplicationCommandLineClass.printerr_literal$VH.set(seg, x);
    }
    public static MemoryAddress printerr_literal$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GApplicationCommandLineClass.printerr_literal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void printerr_literal$set(MemorySegment seg, long index, MemoryAddress x) {
        _GApplicationCommandLineClass.printerr_literal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static printerr_literal printerr_literal (MemorySegment segment, ResourceScope scope) {
        return printerr_literal.ofAddress(printerr_literal$get(segment), scope);
    }
    static final FunctionDescriptor get_stdin$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_stdin$MH = RuntimeHelper.downcallHandle(
        _GApplicationCommandLineClass.get_stdin$FUNC, false
    );
    public interface get_stdin {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_stdin fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_stdin.class, fi, _GApplicationCommandLineClass.get_stdin$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_stdin ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_stdin::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GApplicationCommandLineClass.get_stdin$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_stdin$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_stdin"));
    public static VarHandle get_stdin$VH() {
        return _GApplicationCommandLineClass.get_stdin$VH;
    }
    public static MemoryAddress get_stdin$get(MemorySegment seg) {
        return (MemoryAddress)_GApplicationCommandLineClass.get_stdin$VH.get(seg);
    }
    public static void get_stdin$set( MemorySegment seg, MemoryAddress x) {
        _GApplicationCommandLineClass.get_stdin$VH.set(seg, x);
    }
    public static MemoryAddress get_stdin$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GApplicationCommandLineClass.get_stdin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_stdin$set(MemorySegment seg, long index, MemoryAddress x) {
        _GApplicationCommandLineClass.get_stdin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_stdin get_stdin (MemorySegment segment, ResourceScope scope) {
        return get_stdin.ofAddress(get_stdin$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(160, 88);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


