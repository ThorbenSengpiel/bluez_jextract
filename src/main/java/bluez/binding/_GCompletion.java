// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GCompletion {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("items"),
        Constants$root.C_POINTER$LAYOUT.withName("func"),
        Constants$root.C_POINTER$LAYOUT.withName("prefix"),
        Constants$root.C_POINTER$LAYOUT.withName("cache"),
        Constants$root.C_POINTER$LAYOUT.withName("strncmp_func")
    ).withName("_GCompletion");
    public static MemoryLayout $LAYOUT() {
        return _GCompletion.$struct$LAYOUT;
    }
    static final VarHandle items$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("items"));
    public static VarHandle items$VH() {
        return _GCompletion.items$VH;
    }
    public static MemoryAddress items$get(MemorySegment seg) {
        return (MemoryAddress)_GCompletion.items$VH.get(seg);
    }
    public static void items$set( MemorySegment seg, MemoryAddress x) {
        _GCompletion.items$VH.set(seg, x);
    }
    public static MemoryAddress items$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GCompletion.items$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void items$set(MemorySegment seg, long index, MemoryAddress x) {
        _GCompletion.items$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle func$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("func"));
    public static VarHandle func$VH() {
        return _GCompletion.func$VH;
    }
    public static MemoryAddress func$get(MemorySegment seg) {
        return (MemoryAddress)_GCompletion.func$VH.get(seg);
    }
    public static void func$set( MemorySegment seg, MemoryAddress x) {
        _GCompletion.func$VH.set(seg, x);
    }
    public static MemoryAddress func$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GCompletion.func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void func$set(MemorySegment seg, long index, MemoryAddress x) {
        _GCompletion.func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GCompletionFunc func (MemorySegment segment, ResourceScope scope) {
        return GCompletionFunc.ofAddress(func$get(segment), scope);
    }
    static final VarHandle prefix$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("prefix"));
    public static VarHandle prefix$VH() {
        return _GCompletion.prefix$VH;
    }
    public static MemoryAddress prefix$get(MemorySegment seg) {
        return (MemoryAddress)_GCompletion.prefix$VH.get(seg);
    }
    public static void prefix$set( MemorySegment seg, MemoryAddress x) {
        _GCompletion.prefix$VH.set(seg, x);
    }
    public static MemoryAddress prefix$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GCompletion.prefix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prefix$set(MemorySegment seg, long index, MemoryAddress x) {
        _GCompletion.prefix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cache$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("cache"));
    public static VarHandle cache$VH() {
        return _GCompletion.cache$VH;
    }
    public static MemoryAddress cache$get(MemorySegment seg) {
        return (MemoryAddress)_GCompletion.cache$VH.get(seg);
    }
    public static void cache$set( MemorySegment seg, MemoryAddress x) {
        _GCompletion.cache$VH.set(seg, x);
    }
    public static MemoryAddress cache$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GCompletion.cache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cache$set(MemorySegment seg, long index, MemoryAddress x) {
        _GCompletion.cache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strncmp_func$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("strncmp_func"));
    public static VarHandle strncmp_func$VH() {
        return _GCompletion.strncmp_func$VH;
    }
    public static MemoryAddress strncmp_func$get(MemorySegment seg) {
        return (MemoryAddress)_GCompletion.strncmp_func$VH.get(seg);
    }
    public static void strncmp_func$set( MemorySegment seg, MemoryAddress x) {
        _GCompletion.strncmp_func$VH.set(seg, x);
    }
    public static MemoryAddress strncmp_func$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GCompletion.strncmp_func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strncmp_func$set(MemorySegment seg, long index, MemoryAddress x) {
        _GCompletion.strncmp_func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GCompletionStrncmpFunc strncmp_func (MemorySegment segment, ResourceScope scope) {
        return GCompletionStrncmpFunc.ofAddress(strncmp_func$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


