// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GTypeClassCacheFunc {

    int apply(MemoryAddress cache_data, MemoryAddress g_class);
    static NativeSymbol allocate(GTypeClassCacheFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GTypeClassCacheFunc.class, fi, constants$408.GTypeClassCacheFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static GTypeClassCacheFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GTypeClassCacheFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress _cache_data, MemoryAddress _g_class) -> {
            try {
                return (int)constants$408.GTypeClassCacheFunc$MH.invokeExact(symbol, (Addressable)_cache_data, (Addressable)_g_class);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


