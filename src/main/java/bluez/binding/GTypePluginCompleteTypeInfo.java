// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GTypePluginCompleteTypeInfo {

    void apply(MemoryAddress plugin, long g_type, MemoryAddress info, MemoryAddress value_table);
    static NativeSymbol allocate(GTypePluginCompleteTypeInfo fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GTypePluginCompleteTypeInfo.class, fi, constants$476.GTypePluginCompleteTypeInfo$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GTypePluginCompleteTypeInfo ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GTypePluginCompleteTypeInfo::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress _plugin, long _g_type, MemoryAddress _info, MemoryAddress _value_table) -> {
            try {
                constants$476.GTypePluginCompleteTypeInfo$MH.invokeExact(symbol, (Addressable)_plugin, _g_type, (Addressable)_info, (Addressable)_value_table);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


