// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GInterfaceInfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("interface_init"),
        Constants$root.C_POINTER$LAYOUT.withName("interface_finalize"),
        Constants$root.C_POINTER$LAYOUT.withName("interface_data")
    ).withName("_GInterfaceInfo");
    public static MemoryLayout $LAYOUT() {
        return _GInterfaceInfo.$struct$LAYOUT;
    }
    static final VarHandle interface_init$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("interface_init"));
    public static VarHandle interface_init$VH() {
        return _GInterfaceInfo.interface_init$VH;
    }
    public static MemoryAddress interface_init$get(MemorySegment seg) {
        return (MemoryAddress)_GInterfaceInfo.interface_init$VH.get(seg);
    }
    public static void interface_init$set( MemorySegment seg, MemoryAddress x) {
        _GInterfaceInfo.interface_init$VH.set(seg, x);
    }
    public static MemoryAddress interface_init$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GInterfaceInfo.interface_init$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_init$set(MemorySegment seg, long index, MemoryAddress x) {
        _GInterfaceInfo.interface_init$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GInterfaceInitFunc interface_init (MemorySegment segment, ResourceScope scope) {
        return GInterfaceInitFunc.ofAddress(interface_init$get(segment), scope);
    }
    static final VarHandle interface_finalize$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("interface_finalize"));
    public static VarHandle interface_finalize$VH() {
        return _GInterfaceInfo.interface_finalize$VH;
    }
    public static MemoryAddress interface_finalize$get(MemorySegment seg) {
        return (MemoryAddress)_GInterfaceInfo.interface_finalize$VH.get(seg);
    }
    public static void interface_finalize$set( MemorySegment seg, MemoryAddress x) {
        _GInterfaceInfo.interface_finalize$VH.set(seg, x);
    }
    public static MemoryAddress interface_finalize$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GInterfaceInfo.interface_finalize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_finalize$set(MemorySegment seg, long index, MemoryAddress x) {
        _GInterfaceInfo.interface_finalize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GInterfaceFinalizeFunc interface_finalize (MemorySegment segment, ResourceScope scope) {
        return GInterfaceFinalizeFunc.ofAddress(interface_finalize$get(segment), scope);
    }
    static final VarHandle interface_data$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("interface_data"));
    public static VarHandle interface_data$VH() {
        return _GInterfaceInfo.interface_data$VH;
    }
    public static MemoryAddress interface_data$get(MemorySegment seg) {
        return (MemoryAddress)_GInterfaceInfo.interface_data$VH.get(seg);
    }
    public static void interface_data$set( MemorySegment seg, MemoryAddress x) {
        _GInterfaceInfo.interface_data$VH.set(seg, x);
    }
    public static MemoryAddress interface_data$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GInterfaceInfo.interface_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _GInterfaceInfo.interface_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


