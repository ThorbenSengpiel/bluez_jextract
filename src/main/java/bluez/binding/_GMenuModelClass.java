// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GMenuModelClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("is_mutable"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_items"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("iterate_item_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item_attribute_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item_links"),
        Constants$root.C_POINTER$LAYOUT.withName("iterate_item_links"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item_link")
    ).withName("_GMenuModelClass");
    public static MemoryLayout $LAYOUT() {
        return _GMenuModelClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor is_mutable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_mutable$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.is_mutable$FUNC, false
    );
    public interface is_mutable {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(is_mutable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_mutable.class, fi, _GMenuModelClass.is_mutable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_mutable ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_mutable::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GMenuModelClass.is_mutable$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_mutable$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("is_mutable"));
    public static VarHandle is_mutable$VH() {
        return _GMenuModelClass.is_mutable$VH;
    }
    public static MemoryAddress is_mutable$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.is_mutable$VH.get(seg);
    }
    public static void is_mutable$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.is_mutable$VH.set(seg, x);
    }
    public static MemoryAddress is_mutable$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.is_mutable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_mutable$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.is_mutable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_mutable is_mutable (MemorySegment segment, ResourceScope scope) {
        return is_mutable.ofAddress(is_mutable$get(segment), scope);
    }
    static final FunctionDescriptor get_n_items$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_items$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.get_n_items$FUNC, false
    );
    public interface get_n_items {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_n_items fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_n_items.class, fi, _GMenuModelClass.get_n_items$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_n_items ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_n_items::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GMenuModelClass.get_n_items$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_items$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_n_items"));
    public static VarHandle get_n_items$VH() {
        return _GMenuModelClass.get_n_items$VH;
    }
    public static MemoryAddress get_n_items$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.get_n_items$VH.get(seg);
    }
    public static void get_n_items$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.get_n_items$VH.set(seg, x);
    }
    public static MemoryAddress get_n_items$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.get_n_items$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_items$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.get_n_items$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_items get_n_items (MemorySegment segment, ResourceScope scope) {
        return get_n_items.ofAddress(get_n_items$get(segment), scope);
    }
    static final FunctionDescriptor get_item_attributes$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item_attributes$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.get_item_attributes$FUNC, false
    );
    public interface get_item_attributes {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2);
        static NativeSymbol allocate(get_item_attributes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_item_attributes.class, fi, _GMenuModelClass.get_item_attributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_item_attributes ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_item_attributes::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2) -> {
                try {
                    _GMenuModelClass.get_item_attributes$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item_attributes$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_item_attributes"));
    public static VarHandle get_item_attributes$VH() {
        return _GMenuModelClass.get_item_attributes$VH;
    }
    public static MemoryAddress get_item_attributes$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.get_item_attributes$VH.get(seg);
    }
    public static void get_item_attributes$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.get_item_attributes$VH.set(seg, x);
    }
    public static MemoryAddress get_item_attributes$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.get_item_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.get_item_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item_attributes get_item_attributes (MemorySegment segment, ResourceScope scope) {
        return get_item_attributes.ofAddress(get_item_attributes$get(segment), scope);
    }
    static final FunctionDescriptor iterate_item_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle iterate_item_attributes$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.iterate_item_attributes$FUNC, false
    );
    public interface iterate_item_attributes {

        Addressable apply(MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(iterate_item_attributes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(iterate_item_attributes.class, fi, _GMenuModelClass.iterate_item_attributes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static iterate_item_attributes ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("iterate_item_attributes::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GMenuModelClass.iterate_item_attributes$MH.invokeExact(symbol, (Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle iterate_item_attributes$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("iterate_item_attributes"));
    public static VarHandle iterate_item_attributes$VH() {
        return _GMenuModelClass.iterate_item_attributes$VH;
    }
    public static MemoryAddress iterate_item_attributes$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.iterate_item_attributes$VH.get(seg);
    }
    public static void iterate_item_attributes$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.iterate_item_attributes$VH.set(seg, x);
    }
    public static MemoryAddress iterate_item_attributes$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.iterate_item_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iterate_item_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.iterate_item_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static iterate_item_attributes iterate_item_attributes (MemorySegment segment, ResourceScope scope) {
        return iterate_item_attributes.ofAddress(iterate_item_attributes$get(segment), scope);
    }
    static final FunctionDescriptor get_item_attribute_value$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item_attribute_value$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.get_item_attribute_value$FUNC, false
    );
    public interface get_item_attribute_value {

        Addressable apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3);
        static NativeSymbol allocate(get_item_attribute_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_item_attribute_value.class, fi, _GMenuModelClass.get_item_attribute_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_item_attribute_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_item_attribute_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3) -> {
                try {
                    return (Addressable)(MemoryAddress)_GMenuModelClass.get_item_attribute_value$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item_attribute_value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_item_attribute_value"));
    public static VarHandle get_item_attribute_value$VH() {
        return _GMenuModelClass.get_item_attribute_value$VH;
    }
    public static MemoryAddress get_item_attribute_value$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.get_item_attribute_value$VH.get(seg);
    }
    public static void get_item_attribute_value$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.get_item_attribute_value$VH.set(seg, x);
    }
    public static MemoryAddress get_item_attribute_value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.get_item_attribute_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item_attribute_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.get_item_attribute_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item_attribute_value get_item_attribute_value (MemorySegment segment, ResourceScope scope) {
        return get_item_attribute_value.ofAddress(get_item_attribute_value$get(segment), scope);
    }
    static final FunctionDescriptor get_item_links$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item_links$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.get_item_links$FUNC, false
    );
    public interface get_item_links {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2);
        static NativeSymbol allocate(get_item_links fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_item_links.class, fi, _GMenuModelClass.get_item_links$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static get_item_links ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_item_links::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2) -> {
                try {
                    _GMenuModelClass.get_item_links$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item_links$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_item_links"));
    public static VarHandle get_item_links$VH() {
        return _GMenuModelClass.get_item_links$VH;
    }
    public static MemoryAddress get_item_links$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.get_item_links$VH.get(seg);
    }
    public static void get_item_links$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.get_item_links$VH.set(seg, x);
    }
    public static MemoryAddress get_item_links$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.get_item_links$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item_links$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.get_item_links$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item_links get_item_links (MemorySegment segment, ResourceScope scope) {
        return get_item_links.ofAddress(get_item_links$get(segment), scope);
    }
    static final FunctionDescriptor iterate_item_links$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle iterate_item_links$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.iterate_item_links$FUNC, false
    );
    public interface iterate_item_links {

        Addressable apply(MemoryAddress _x0, int _x1);
        static NativeSymbol allocate(iterate_item_links fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(iterate_item_links.class, fi, _GMenuModelClass.iterate_item_links$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static iterate_item_links ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("iterate_item_links::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GMenuModelClass.iterate_item_links$MH.invokeExact(symbol, (Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle iterate_item_links$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("iterate_item_links"));
    public static VarHandle iterate_item_links$VH() {
        return _GMenuModelClass.iterate_item_links$VH;
    }
    public static MemoryAddress iterate_item_links$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.iterate_item_links$VH.get(seg);
    }
    public static void iterate_item_links$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.iterate_item_links$VH.set(seg, x);
    }
    public static MemoryAddress iterate_item_links$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.iterate_item_links$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iterate_item_links$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.iterate_item_links$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static iterate_item_links iterate_item_links (MemorySegment segment, ResourceScope scope) {
        return iterate_item_links.ofAddress(iterate_item_links$get(segment), scope);
    }
    static final FunctionDescriptor get_item_link$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item_link$MH = RuntimeHelper.downcallHandle(
        _GMenuModelClass.get_item_link$FUNC, false
    );
    public interface get_item_link {

        Addressable apply(MemoryAddress _x0, int _x1, MemoryAddress _x2);
        static NativeSymbol allocate(get_item_link fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_item_link.class, fi, _GMenuModelClass.get_item_link$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_item_link ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_item_link::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2) -> {
                try {
                    return (Addressable)(MemoryAddress)_GMenuModelClass.get_item_link$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item_link$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_item_link"));
    public static VarHandle get_item_link$VH() {
        return _GMenuModelClass.get_item_link$VH;
    }
    public static MemoryAddress get_item_link$get(MemorySegment seg) {
        return (MemoryAddress)_GMenuModelClass.get_item_link$VH.get(seg);
    }
    public static void get_item_link$set( MemorySegment seg, MemoryAddress x) {
        _GMenuModelClass.get_item_link$VH.set(seg, x);
    }
    public static MemoryAddress get_item_link$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GMenuModelClass.get_item_link$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item_link$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMenuModelClass.get_item_link$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item_link get_item_link (MemorySegment segment, ResourceScope scope) {
        return get_item_link.ofAddress(get_item_link$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


