// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GDtlsConnectionInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("accept_certificate"),
        Constants$root.C_POINTER$LAYOUT.withName("handshake"),
        Constants$root.C_POINTER$LAYOUT.withName("handshake_async"),
        Constants$root.C_POINTER$LAYOUT.withName("handshake_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("shutdown"),
        Constants$root.C_POINTER$LAYOUT.withName("shutdown_async"),
        Constants$root.C_POINTER$LAYOUT.withName("shutdown_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("set_advertised_protocols"),
        Constants$root.C_POINTER$LAYOUT.withName("get_negotiated_protocol")
    ).withName("_GDtlsConnectionInterface");
    public static MemoryLayout $LAYOUT() {
        return _GDtlsConnectionInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor accept_certificate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle accept_certificate$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.accept_certificate$FUNC, false
    );
    public interface accept_certificate {

        int apply(MemoryAddress _x0, MemoryAddress _x1, int _x2);
        static NativeSymbol allocate(accept_certificate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(accept_certificate.class, fi, _GDtlsConnectionInterface.accept_certificate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
        }
        static accept_certificate ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("accept_certificate::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, int __x2) -> {
                try {
                    return (int)_GDtlsConnectionInterface.accept_certificate$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle accept_certificate$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("accept_certificate"));
    public static VarHandle accept_certificate$VH() {
        return _GDtlsConnectionInterface.accept_certificate$VH;
    }
    public static MemoryAddress accept_certificate$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.accept_certificate$VH.get(seg);
    }
    public static void accept_certificate$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.accept_certificate$VH.set(seg, x);
    }
    public static MemoryAddress accept_certificate$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.accept_certificate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void accept_certificate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.accept_certificate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static accept_certificate accept_certificate (MemorySegment segment, ResourceScope scope) {
        return accept_certificate.ofAddress(accept_certificate$get(segment), scope);
    }
    static final FunctionDescriptor handshake$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handshake$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.handshake$FUNC, false
    );
    public interface handshake {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handshake fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handshake.class, fi, _GDtlsConnectionInterface.handshake$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handshake ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handshake::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDtlsConnectionInterface.handshake$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handshake$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handshake"));
    public static VarHandle handshake$VH() {
        return _GDtlsConnectionInterface.handshake$VH;
    }
    public static MemoryAddress handshake$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.handshake$VH.get(seg);
    }
    public static void handshake$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.handshake$VH.set(seg, x);
    }
    public static MemoryAddress handshake$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.handshake$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handshake$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.handshake$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handshake handshake (MemorySegment segment, ResourceScope scope) {
        return handshake.ofAddress(handshake$get(segment), scope);
    }
    static final FunctionDescriptor handshake_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handshake_async$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.handshake_async$FUNC, false
    );
    public interface handshake_async {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4);
        static NativeSymbol allocate(handshake_async fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handshake_async.class, fi, _GDtlsConnectionInterface.handshake_async$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static handshake_async ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handshake_async::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4) -> {
                try {
                    _GDtlsConnectionInterface.handshake_async$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handshake_async$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handshake_async"));
    public static VarHandle handshake_async$VH() {
        return _GDtlsConnectionInterface.handshake_async$VH;
    }
    public static MemoryAddress handshake_async$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.handshake_async$VH.get(seg);
    }
    public static void handshake_async$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.handshake_async$VH.set(seg, x);
    }
    public static MemoryAddress handshake_async$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.handshake_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handshake_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.handshake_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handshake_async handshake_async (MemorySegment segment, ResourceScope scope) {
        return handshake_async.ofAddress(handshake_async$get(segment), scope);
    }
    static final FunctionDescriptor handshake_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handshake_finish$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.handshake_finish$FUNC, false
    );
    public interface handshake_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handshake_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handshake_finish.class, fi, _GDtlsConnectionInterface.handshake_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handshake_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handshake_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDtlsConnectionInterface.handshake_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handshake_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handshake_finish"));
    public static VarHandle handshake_finish$VH() {
        return _GDtlsConnectionInterface.handshake_finish$VH;
    }
    public static MemoryAddress handshake_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.handshake_finish$VH.get(seg);
    }
    public static void handshake_finish$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.handshake_finish$VH.set(seg, x);
    }
    public static MemoryAddress handshake_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.handshake_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handshake_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.handshake_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handshake_finish handshake_finish (MemorySegment segment, ResourceScope scope) {
        return handshake_finish.ofAddress(handshake_finish$get(segment), scope);
    }
    static final FunctionDescriptor shutdown$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle shutdown$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.shutdown$FUNC, false
    );
    public interface shutdown {

        int apply(MemoryAddress _x0, int _x1, int _x2, MemoryAddress _x3, MemoryAddress _x4);
        static NativeSymbol allocate(shutdown fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(shutdown.class, fi, _GDtlsConnectionInterface.shutdown$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static shutdown ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("shutdown::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, int __x2, MemoryAddress __x3, MemoryAddress __x4) -> {
                try {
                    return (int)_GDtlsConnectionInterface.shutdown$MH.invokeExact(symbol, (Addressable)__x0, __x1, __x2, (Addressable)__x3, (Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle shutdown$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("shutdown"));
    public static VarHandle shutdown$VH() {
        return _GDtlsConnectionInterface.shutdown$VH;
    }
    public static MemoryAddress shutdown$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.shutdown$VH.get(seg);
    }
    public static void shutdown$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.shutdown$VH.set(seg, x);
    }
    public static MemoryAddress shutdown$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.shutdown$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shutdown$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.shutdown$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static shutdown shutdown (MemorySegment segment, ResourceScope scope) {
        return shutdown.ofAddress(shutdown$get(segment), scope);
    }
    static final FunctionDescriptor shutdown_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle shutdown_async$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.shutdown_async$FUNC, false
    );
    public interface shutdown_async {

        void apply(MemoryAddress _x0, int _x1, int _x2, int _x3, MemoryAddress _x4, MemoryAddress _x5, MemoryAddress _x6);
        static NativeSymbol allocate(shutdown_async fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(shutdown_async.class, fi, _GDtlsConnectionInterface.shutdown_async$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static shutdown_async ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("shutdown_async::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, int __x2, int __x3, MemoryAddress __x4, MemoryAddress __x5, MemoryAddress __x6) -> {
                try {
                    _GDtlsConnectionInterface.shutdown_async$MH.invokeExact(symbol, (Addressable)__x0, __x1, __x2, __x3, (Addressable)__x4, (Addressable)__x5, (Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle shutdown_async$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("shutdown_async"));
    public static VarHandle shutdown_async$VH() {
        return _GDtlsConnectionInterface.shutdown_async$VH;
    }
    public static MemoryAddress shutdown_async$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.shutdown_async$VH.get(seg);
    }
    public static void shutdown_async$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.shutdown_async$VH.set(seg, x);
    }
    public static MemoryAddress shutdown_async$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.shutdown_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shutdown_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.shutdown_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static shutdown_async shutdown_async (MemorySegment segment, ResourceScope scope) {
        return shutdown_async.ofAddress(shutdown_async$get(segment), scope);
    }
    static final FunctionDescriptor shutdown_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle shutdown_finish$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.shutdown_finish$FUNC, false
    );
    public interface shutdown_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(shutdown_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(shutdown_finish.class, fi, _GDtlsConnectionInterface.shutdown_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static shutdown_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("shutdown_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDtlsConnectionInterface.shutdown_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle shutdown_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("shutdown_finish"));
    public static VarHandle shutdown_finish$VH() {
        return _GDtlsConnectionInterface.shutdown_finish$VH;
    }
    public static MemoryAddress shutdown_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.shutdown_finish$VH.get(seg);
    }
    public static void shutdown_finish$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.shutdown_finish$VH.set(seg, x);
    }
    public static MemoryAddress shutdown_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.shutdown_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shutdown_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.shutdown_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static shutdown_finish shutdown_finish (MemorySegment segment, ResourceScope scope) {
        return shutdown_finish.ofAddress(shutdown_finish$get(segment), scope);
    }
    static final FunctionDescriptor set_advertised_protocols$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_advertised_protocols$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.set_advertised_protocols$FUNC, false
    );
    public interface set_advertised_protocols {

        void apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(set_advertised_protocols fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(set_advertised_protocols.class, fi, _GDtlsConnectionInterface.set_advertised_protocols$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static set_advertised_protocols ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("set_advertised_protocols::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    _GDtlsConnectionInterface.set_advertised_protocols$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_advertised_protocols$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("set_advertised_protocols"));
    public static VarHandle set_advertised_protocols$VH() {
        return _GDtlsConnectionInterface.set_advertised_protocols$VH;
    }
    public static MemoryAddress set_advertised_protocols$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.set_advertised_protocols$VH.get(seg);
    }
    public static void set_advertised_protocols$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.set_advertised_protocols$VH.set(seg, x);
    }
    public static MemoryAddress set_advertised_protocols$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.set_advertised_protocols$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_advertised_protocols$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.set_advertised_protocols$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_advertised_protocols set_advertised_protocols (MemorySegment segment, ResourceScope scope) {
        return set_advertised_protocols.ofAddress(set_advertised_protocols$get(segment), scope);
    }
    static final FunctionDescriptor get_negotiated_protocol$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_negotiated_protocol$MH = RuntimeHelper.downcallHandle(
        _GDtlsConnectionInterface.get_negotiated_protocol$FUNC, false
    );
    public interface get_negotiated_protocol {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_negotiated_protocol fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_negotiated_protocol.class, fi, _GDtlsConnectionInterface.get_negotiated_protocol$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_negotiated_protocol ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_negotiated_protocol::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDtlsConnectionInterface.get_negotiated_protocol$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_negotiated_protocol$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_negotiated_protocol"));
    public static VarHandle get_negotiated_protocol$VH() {
        return _GDtlsConnectionInterface.get_negotiated_protocol$VH;
    }
    public static MemoryAddress get_negotiated_protocol$get(MemorySegment seg) {
        return (MemoryAddress)_GDtlsConnectionInterface.get_negotiated_protocol$VH.get(seg);
    }
    public static void get_negotiated_protocol$set( MemorySegment seg, MemoryAddress x) {
        _GDtlsConnectionInterface.get_negotiated_protocol$VH.set(seg, x);
    }
    public static MemoryAddress get_negotiated_protocol$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDtlsConnectionInterface.get_negotiated_protocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_negotiated_protocol$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDtlsConnectionInterface.get_negotiated_protocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_negotiated_protocol get_negotiated_protocol (MemorySegment segment, ResourceScope scope) {
        return get_negotiated_protocol.ofAddress(get_negotiated_protocol$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


