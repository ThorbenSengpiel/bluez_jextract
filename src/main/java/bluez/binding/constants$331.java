// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$331 {

    static final FunctionDescriptor g_tuples_index$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_tuples_index$MH = RuntimeHelper.downcallHandle(
        "g_tuples_index",
        constants$331.g_tuples_index$FUNC, false
    );
    static final  GroupLayout g_thread_functions_for_glib_use$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("mutex_new"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_lock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_trylock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_unlock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_free"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_new"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_signal"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_broadcast"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_wait"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_timed_wait"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_free"),
        Constants$root.C_POINTER$LAYOUT.withName("private_new"),
        Constants$root.C_POINTER$LAYOUT.withName("private_get"),
        Constants$root.C_POINTER$LAYOUT.withName("private_set"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_create"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_yield"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_join"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_exit"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_set_priority"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_self"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_equal")
    ).withName("_GThreadFunctions");
    static final MemorySegment g_thread_functions_for_glib_use$SEGMENT = RuntimeHelper.lookupGlobalVariable("g_thread_functions_for_glib_use", constants$331.g_thread_functions_for_glib_use$LAYOUT);
    static final  OfInt g_thread_use_default_impl$LAYOUT = Constants$root.C_INT$LAYOUT;
    static final VarHandle g_thread_use_default_impl$VH = constants$331.g_thread_use_default_impl$LAYOUT.varHandle();
    static final MemorySegment g_thread_use_default_impl$SEGMENT = RuntimeHelper.lookupGlobalVariable("g_thread_use_default_impl", constants$331.g_thread_use_default_impl$LAYOUT);
    static final FunctionDescriptor g_thread_gettime$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_thread_gettime$MH = RuntimeHelper.downcallHandle(
        constants$331.g_thread_gettime$FUNC, false
    );
    static final  OfAddress g_thread_gettime$LAYOUT = Constants$root.C_POINTER$LAYOUT;
    static final VarHandle g_thread_gettime$VH = constants$331.g_thread_gettime$LAYOUT.varHandle();
    static final MemorySegment g_thread_gettime$SEGMENT = RuntimeHelper.lookupGlobalVariable("g_thread_gettime", constants$331.g_thread_gettime$LAYOUT);
}


