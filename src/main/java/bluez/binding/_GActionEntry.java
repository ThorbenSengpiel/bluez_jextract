// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GActionEntry {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        Constants$root.C_POINTER$LAYOUT.withName("parameter_type"),
        Constants$root.C_POINTER$LAYOUT.withName("state"),
        Constants$root.C_POINTER$LAYOUT.withName("change_state"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_LONG_LONG$LAYOUT).withName("padding")
    ).withName("_GActionEntry");
    public static MemoryLayout $LAYOUT() {
        return _GActionEntry.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _GActionEntry.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (MemoryAddress)_GActionEntry.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        _GActionEntry.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionEntry.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionEntry.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate$MH = RuntimeHelper.downcallHandle(
        _GActionEntry.activate$FUNC, false
    );
    public interface activate {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(activate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(activate.class, fi, _GActionEntry.activate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static activate ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("activate::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    _GActionEntry.activate$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GActionEntry.activate$VH;
    }
    public static MemoryAddress activate$get(MemorySegment seg) {
        return (MemoryAddress)_GActionEntry.activate$VH.get(seg);
    }
    public static void activate$set( MemorySegment seg, MemoryAddress x) {
        _GActionEntry.activate$VH.set(seg, x);
    }
    public static MemoryAddress activate$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionEntry.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionEntry.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate (MemorySegment segment, ResourceScope scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    static final VarHandle parameter_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("parameter_type"));
    public static VarHandle parameter_type$VH() {
        return _GActionEntry.parameter_type$VH;
    }
    public static MemoryAddress parameter_type$get(MemorySegment seg) {
        return (MemoryAddress)_GActionEntry.parameter_type$VH.get(seg);
    }
    public static void parameter_type$set( MemorySegment seg, MemoryAddress x) {
        _GActionEntry.parameter_type$VH.set(seg, x);
    }
    public static MemoryAddress parameter_type$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionEntry.parameter_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parameter_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionEntry.parameter_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("state"));
    public static VarHandle state$VH() {
        return _GActionEntry.state$VH;
    }
    public static MemoryAddress state$get(MemorySegment seg) {
        return (MemoryAddress)_GActionEntry.state$VH.get(seg);
    }
    public static void state$set( MemorySegment seg, MemoryAddress x) {
        _GActionEntry.state$VH.set(seg, x);
    }
    public static MemoryAddress state$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionEntry.state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionEntry.state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor change_state$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle change_state$MH = RuntimeHelper.downcallHandle(
        _GActionEntry.change_state$FUNC, false
    );
    public interface change_state {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(change_state fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(change_state.class, fi, _GActionEntry.change_state$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static change_state ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("change_state::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    _GActionEntry.change_state$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle change_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("change_state"));
    public static VarHandle change_state$VH() {
        return _GActionEntry.change_state$VH;
    }
    public static MemoryAddress change_state$get(MemorySegment seg) {
        return (MemoryAddress)_GActionEntry.change_state$VH.get(seg);
    }
    public static void change_state$set( MemorySegment seg, MemoryAddress x) {
        _GActionEntry.change_state$VH.set(seg, x);
    }
    public static MemoryAddress change_state$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionEntry.change_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void change_state$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionEntry.change_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_state change_state (MemorySegment segment, ResourceScope scope) {
        return change_state.ofAddress(change_state$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(40, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


