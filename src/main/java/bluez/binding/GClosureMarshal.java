// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GClosureMarshal {

    void apply(MemoryAddress closure, MemoryAddress return_value, int n_param_values, MemoryAddress param_values, MemoryAddress invocation_hint, MemoryAddress marshal_data);
    static NativeSymbol allocate(GClosureMarshal fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GClosureMarshal.class, fi, constants$424.GClosureMarshal$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GClosureMarshal ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GClosureMarshal::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress _closure, MemoryAddress _return_value, int _n_param_values, MemoryAddress _param_values, MemoryAddress _invocation_hint, MemoryAddress _marshal_data) -> {
            try {
                constants$424.GClosureMarshal$MH.invokeExact(symbol, (Addressable)_closure, (Addressable)_return_value, _n_param_values, (Addressable)_param_values, (Addressable)_invocation_hint, (Addressable)_marshal_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


