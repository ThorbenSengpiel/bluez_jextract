// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GActionInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parameter_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_state_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_state_hint"),
        Constants$root.C_POINTER$LAYOUT.withName("get_enabled"),
        Constants$root.C_POINTER$LAYOUT.withName("get_state"),
        Constants$root.C_POINTER$LAYOUT.withName("change_state"),
        Constants$root.C_POINTER$LAYOUT.withName("activate")
    ).withName("_GActionInterface");
    public static MemoryLayout $LAYOUT() {
        return _GActionInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.get_name$FUNC, false
    );
    public interface get_name {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _GActionInterface.get_name$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionInterface.get_name$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _GActionInterface.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, ResourceScope scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    static final FunctionDescriptor get_parameter_type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parameter_type$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.get_parameter_type$FUNC, false
    );
    public interface get_parameter_type {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_parameter_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_parameter_type.class, fi, _GActionInterface.get_parameter_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_parameter_type ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_parameter_type::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionInterface.get_parameter_type$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parameter_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_parameter_type"));
    public static VarHandle get_parameter_type$VH() {
        return _GActionInterface.get_parameter_type$VH;
    }
    public static MemoryAddress get_parameter_type$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.get_parameter_type$VH.get(seg);
    }
    public static void get_parameter_type$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.get_parameter_type$VH.set(seg, x);
    }
    public static MemoryAddress get_parameter_type$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.get_parameter_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parameter_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.get_parameter_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parameter_type get_parameter_type (MemorySegment segment, ResourceScope scope) {
        return get_parameter_type.ofAddress(get_parameter_type$get(segment), scope);
    }
    static final FunctionDescriptor get_state_type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_state_type$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.get_state_type$FUNC, false
    );
    public interface get_state_type {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_state_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_state_type.class, fi, _GActionInterface.get_state_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_state_type ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_state_type::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionInterface.get_state_type$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_state_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_state_type"));
    public static VarHandle get_state_type$VH() {
        return _GActionInterface.get_state_type$VH;
    }
    public static MemoryAddress get_state_type$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.get_state_type$VH.get(seg);
    }
    public static void get_state_type$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.get_state_type$VH.set(seg, x);
    }
    public static MemoryAddress get_state_type$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.get_state_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_state_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.get_state_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_state_type get_state_type (MemorySegment segment, ResourceScope scope) {
        return get_state_type.ofAddress(get_state_type$get(segment), scope);
    }
    static final FunctionDescriptor get_state_hint$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_state_hint$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.get_state_hint$FUNC, false
    );
    public interface get_state_hint {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_state_hint fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_state_hint.class, fi, _GActionInterface.get_state_hint$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_state_hint ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_state_hint::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionInterface.get_state_hint$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_state_hint$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_state_hint"));
    public static VarHandle get_state_hint$VH() {
        return _GActionInterface.get_state_hint$VH;
    }
    public static MemoryAddress get_state_hint$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.get_state_hint$VH.get(seg);
    }
    public static void get_state_hint$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.get_state_hint$VH.set(seg, x);
    }
    public static MemoryAddress get_state_hint$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.get_state_hint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_state_hint$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.get_state_hint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_state_hint get_state_hint (MemorySegment segment, ResourceScope scope) {
        return get_state_hint.ofAddress(get_state_hint$get(segment), scope);
    }
    static final FunctionDescriptor get_enabled$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_enabled$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.get_enabled$FUNC, false
    );
    public interface get_enabled {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_enabled fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_enabled.class, fi, _GActionInterface.get_enabled$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_enabled ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_enabled::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GActionInterface.get_enabled$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_enabled$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_enabled"));
    public static VarHandle get_enabled$VH() {
        return _GActionInterface.get_enabled$VH;
    }
    public static MemoryAddress get_enabled$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.get_enabled$VH.get(seg);
    }
    public static void get_enabled$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.get_enabled$VH.set(seg, x);
    }
    public static MemoryAddress get_enabled$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.get_enabled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_enabled$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.get_enabled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_enabled get_enabled (MemorySegment segment, ResourceScope scope) {
        return get_enabled.ofAddress(get_enabled$get(segment), scope);
    }
    static final FunctionDescriptor get_state$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_state$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.get_state$FUNC, false
    );
    public interface get_state {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_state fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_state.class, fi, _GActionInterface.get_state$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_state ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_state::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionInterface.get_state$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_state"));
    public static VarHandle get_state$VH() {
        return _GActionInterface.get_state$VH;
    }
    public static MemoryAddress get_state$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.get_state$VH.get(seg);
    }
    public static void get_state$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.get_state$VH.set(seg, x);
    }
    public static MemoryAddress get_state$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.get_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_state$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.get_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_state get_state (MemorySegment segment, ResourceScope scope) {
        return get_state.ofAddress(get_state$get(segment), scope);
    }
    static final FunctionDescriptor change_state$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle change_state$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.change_state$FUNC, false
    );
    public interface change_state {

        void apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(change_state fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(change_state.class, fi, _GActionInterface.change_state$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static change_state ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("change_state::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    _GActionInterface.change_state$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle change_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("change_state"));
    public static VarHandle change_state$VH() {
        return _GActionInterface.change_state$VH;
    }
    public static MemoryAddress change_state$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.change_state$VH.get(seg);
    }
    public static void change_state$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.change_state$VH.set(seg, x);
    }
    public static MemoryAddress change_state$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.change_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void change_state$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.change_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_state change_state (MemorySegment segment, ResourceScope scope) {
        return change_state.ofAddress(change_state$get(segment), scope);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate$MH = RuntimeHelper.downcallHandle(
        _GActionInterface.activate$FUNC, false
    );
    public interface activate {

        void apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(activate fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(activate.class, fi, _GActionInterface.activate$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static activate ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("activate::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    _GActionInterface.activate$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GActionInterface.activate$VH;
    }
    public static MemoryAddress activate$get(MemorySegment seg) {
        return (MemoryAddress)_GActionInterface.activate$VH.get(seg);
    }
    public static void activate$set( MemorySegment seg, MemoryAddress x) {
        _GActionInterface.activate$VH.set(seg, x);
    }
    public static MemoryAddress activate$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionInterface.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionInterface.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate (MemorySegment segment, ResourceScope scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


