// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GLoadableIconIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("load"),
        Constants$root.C_POINTER$LAYOUT.withName("load_async"),
        Constants$root.C_POINTER$LAYOUT.withName("load_finish")
    ).withName("_GLoadableIconIface");
    public static MemoryLayout $LAYOUT() {
        return _GLoadableIconIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor load$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load$MH = RuntimeHelper.downcallHandle(
        _GLoadableIconIface.load$FUNC, false
    );
    public interface load {

        Addressable apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4);
        static NativeSymbol allocate(load fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(load.class, fi, _GLoadableIconIface.load$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static load ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("load::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4) -> {
                try {
                    return (Addressable)(MemoryAddress)_GLoadableIconIface.load$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle load$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("load"));
    public static VarHandle load$VH() {
        return _GLoadableIconIface.load$VH;
    }
    public static MemoryAddress load$get(MemorySegment seg) {
        return (MemoryAddress)_GLoadableIconIface.load$VH.get(seg);
    }
    public static void load$set( MemorySegment seg, MemoryAddress x) {
        _GLoadableIconIface.load$VH.set(seg, x);
    }
    public static MemoryAddress load$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GLoadableIconIface.load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load$set(MemorySegment seg, long index, MemoryAddress x) {
        _GLoadableIconIface.load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static load load (MemorySegment segment, ResourceScope scope) {
        return load.ofAddress(load$get(segment), scope);
    }
    static final FunctionDescriptor load_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load_async$MH = RuntimeHelper.downcallHandle(
        _GLoadableIconIface.load_async$FUNC, false
    );
    public interface load_async {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4);
        static NativeSymbol allocate(load_async fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(load_async.class, fi, _GLoadableIconIface.load_async$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static load_async ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("load_async::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4) -> {
                try {
                    _GLoadableIconIface.load_async$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle load_async$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("load_async"));
    public static VarHandle load_async$VH() {
        return _GLoadableIconIface.load_async$VH;
    }
    public static MemoryAddress load_async$get(MemorySegment seg) {
        return (MemoryAddress)_GLoadableIconIface.load_async$VH.get(seg);
    }
    public static void load_async$set( MemorySegment seg, MemoryAddress x) {
        _GLoadableIconIface.load_async$VH.set(seg, x);
    }
    public static MemoryAddress load_async$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GLoadableIconIface.load_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GLoadableIconIface.load_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static load_async load_async (MemorySegment segment, ResourceScope scope) {
        return load_async.ofAddress(load_async$get(segment), scope);
    }
    static final FunctionDescriptor load_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load_finish$MH = RuntimeHelper.downcallHandle(
        _GLoadableIconIface.load_finish$FUNC, false
    );
    public interface load_finish {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, MemoryAddress _x3);
        static NativeSymbol allocate(load_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(load_finish.class, fi, _GLoadableIconIface.load_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static load_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("load_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, MemoryAddress __x3) -> {
                try {
                    return (Addressable)(MemoryAddress)_GLoadableIconIface.load_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, (Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle load_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("load_finish"));
    public static VarHandle load_finish$VH() {
        return _GLoadableIconIface.load_finish$VH;
    }
    public static MemoryAddress load_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GLoadableIconIface.load_finish$VH.get(seg);
    }
    public static void load_finish$set( MemorySegment seg, MemoryAddress x) {
        _GLoadableIconIface.load_finish$VH.set(seg, x);
    }
    public static MemoryAddress load_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GLoadableIconIface.load_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GLoadableIconIface.load_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static load_finish load_finish (MemorySegment segment, ResourceScope scope) {
        return load_finish.ofAddress(load_finish$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


