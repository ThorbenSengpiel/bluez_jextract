// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GTaskThreadFunc {

    void apply(MemoryAddress task, MemoryAddress source_object, MemoryAddress task_data, MemoryAddress cancellable);
    static NativeSymbol allocate(GTaskThreadFunc fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GTaskThreadFunc.class, fi, constants$815.GTaskThreadFunc$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GTaskThreadFunc ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GTaskThreadFunc::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress _task, MemoryAddress _source_object, MemoryAddress _task_data, MemoryAddress _cancellable) -> {
            try {
                constants$815.GTaskThreadFunc$MH.invokeExact(symbol, (Addressable)_task, (Addressable)_source_object, (Addressable)_task_data, (Addressable)_cancellable);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


