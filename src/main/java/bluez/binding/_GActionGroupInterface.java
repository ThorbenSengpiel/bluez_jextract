// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GActionGroupInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("has_action"),
        Constants$root.C_POINTER$LAYOUT.withName("list_actions"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action_enabled"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action_parameter_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action_state_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action_state_hint"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action_state"),
        Constants$root.C_POINTER$LAYOUT.withName("change_action_state"),
        Constants$root.C_POINTER$LAYOUT.withName("activate_action"),
        Constants$root.C_POINTER$LAYOUT.withName("action_added"),
        Constants$root.C_POINTER$LAYOUT.withName("action_removed"),
        Constants$root.C_POINTER$LAYOUT.withName("action_enabled_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("action_state_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("query_action")
    ).withName("_GActionGroupInterface");
    public static MemoryLayout $LAYOUT() {
        return _GActionGroupInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor has_action$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle has_action$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.has_action$FUNC, false
    );
    public interface has_action {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(has_action fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(has_action.class, fi, _GActionGroupInterface.has_action$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static has_action ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("has_action::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_GActionGroupInterface.has_action$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle has_action$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("has_action"));
    public static VarHandle has_action$VH() {
        return _GActionGroupInterface.has_action$VH;
    }
    public static MemoryAddress has_action$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.has_action$VH.get(seg);
    }
    public static void has_action$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.has_action$VH.set(seg, x);
    }
    public static MemoryAddress has_action$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.has_action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_action$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.has_action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static has_action has_action (MemorySegment segment, ResourceScope scope) {
        return has_action.ofAddress(has_action$get(segment), scope);
    }
    static final FunctionDescriptor list_actions$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle list_actions$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.list_actions$FUNC, false
    );
    public interface list_actions {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(list_actions fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(list_actions.class, fi, _GActionGroupInterface.list_actions$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static list_actions ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("list_actions::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionGroupInterface.list_actions$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle list_actions$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("list_actions"));
    public static VarHandle list_actions$VH() {
        return _GActionGroupInterface.list_actions$VH;
    }
    public static MemoryAddress list_actions$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.list_actions$VH.get(seg);
    }
    public static void list_actions$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.list_actions$VH.set(seg, x);
    }
    public static MemoryAddress list_actions$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.list_actions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void list_actions$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.list_actions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_actions list_actions (MemorySegment segment, ResourceScope scope) {
        return list_actions.ofAddress(list_actions$get(segment), scope);
    }
    static final FunctionDescriptor get_action_enabled$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_enabled$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.get_action_enabled$FUNC, false
    );
    public interface get_action_enabled {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(get_action_enabled fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_action_enabled.class, fi, _GActionGroupInterface.get_action_enabled$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_action_enabled ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_action_enabled::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_GActionGroupInterface.get_action_enabled$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action_enabled$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_action_enabled"));
    public static VarHandle get_action_enabled$VH() {
        return _GActionGroupInterface.get_action_enabled$VH;
    }
    public static MemoryAddress get_action_enabled$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.get_action_enabled$VH.get(seg);
    }
    public static void get_action_enabled$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.get_action_enabled$VH.set(seg, x);
    }
    public static MemoryAddress get_action_enabled$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.get_action_enabled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_enabled$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.get_action_enabled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_enabled get_action_enabled (MemorySegment segment, ResourceScope scope) {
        return get_action_enabled.ofAddress(get_action_enabled$get(segment), scope);
    }
    static final FunctionDescriptor get_action_parameter_type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_parameter_type$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.get_action_parameter_type$FUNC, false
    );
    public interface get_action_parameter_type {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(get_action_parameter_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_action_parameter_type.class, fi, _GActionGroupInterface.get_action_parameter_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_action_parameter_type ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_action_parameter_type::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionGroupInterface.get_action_parameter_type$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action_parameter_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_action_parameter_type"));
    public static VarHandle get_action_parameter_type$VH() {
        return _GActionGroupInterface.get_action_parameter_type$VH;
    }
    public static MemoryAddress get_action_parameter_type$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.get_action_parameter_type$VH.get(seg);
    }
    public static void get_action_parameter_type$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.get_action_parameter_type$VH.set(seg, x);
    }
    public static MemoryAddress get_action_parameter_type$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.get_action_parameter_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_parameter_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.get_action_parameter_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_parameter_type get_action_parameter_type (MemorySegment segment, ResourceScope scope) {
        return get_action_parameter_type.ofAddress(get_action_parameter_type$get(segment), scope);
    }
    static final FunctionDescriptor get_action_state_type$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_state_type$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.get_action_state_type$FUNC, false
    );
    public interface get_action_state_type {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(get_action_state_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_action_state_type.class, fi, _GActionGroupInterface.get_action_state_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_action_state_type ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_action_state_type::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionGroupInterface.get_action_state_type$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action_state_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_action_state_type"));
    public static VarHandle get_action_state_type$VH() {
        return _GActionGroupInterface.get_action_state_type$VH;
    }
    public static MemoryAddress get_action_state_type$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.get_action_state_type$VH.get(seg);
    }
    public static void get_action_state_type$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.get_action_state_type$VH.set(seg, x);
    }
    public static MemoryAddress get_action_state_type$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.get_action_state_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_state_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.get_action_state_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_state_type get_action_state_type (MemorySegment segment, ResourceScope scope) {
        return get_action_state_type.ofAddress(get_action_state_type$get(segment), scope);
    }
    static final FunctionDescriptor get_action_state_hint$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_state_hint$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.get_action_state_hint$FUNC, false
    );
    public interface get_action_state_hint {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(get_action_state_hint fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_action_state_hint.class, fi, _GActionGroupInterface.get_action_state_hint$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_action_state_hint ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_action_state_hint::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionGroupInterface.get_action_state_hint$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action_state_hint$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_action_state_hint"));
    public static VarHandle get_action_state_hint$VH() {
        return _GActionGroupInterface.get_action_state_hint$VH;
    }
    public static MemoryAddress get_action_state_hint$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.get_action_state_hint$VH.get(seg);
    }
    public static void get_action_state_hint$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.get_action_state_hint$VH.set(seg, x);
    }
    public static MemoryAddress get_action_state_hint$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.get_action_state_hint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_state_hint$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.get_action_state_hint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_state_hint get_action_state_hint (MemorySegment segment, ResourceScope scope) {
        return get_action_state_hint.ofAddress(get_action_state_hint$get(segment), scope);
    }
    static final FunctionDescriptor get_action_state$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_state$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.get_action_state$FUNC, false
    );
    public interface get_action_state {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(get_action_state fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_action_state.class, fi, _GActionGroupInterface.get_action_state$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_action_state ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_action_state::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GActionGroupInterface.get_action_state$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_action_state"));
    public static VarHandle get_action_state$VH() {
        return _GActionGroupInterface.get_action_state$VH;
    }
    public static MemoryAddress get_action_state$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.get_action_state$VH.get(seg);
    }
    public static void get_action_state$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.get_action_state$VH.set(seg, x);
    }
    public static MemoryAddress get_action_state$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.get_action_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_state$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.get_action_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_state get_action_state (MemorySegment segment, ResourceScope scope) {
        return get_action_state.ofAddress(get_action_state$get(segment), scope);
    }
    static final FunctionDescriptor change_action_state$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle change_action_state$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.change_action_state$FUNC, false
    );
    public interface change_action_state {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(change_action_state fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(change_action_state.class, fi, _GActionGroupInterface.change_action_state$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static change_action_state ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("change_action_state::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    _GActionGroupInterface.change_action_state$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle change_action_state$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("change_action_state"));
    public static VarHandle change_action_state$VH() {
        return _GActionGroupInterface.change_action_state$VH;
    }
    public static MemoryAddress change_action_state$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.change_action_state$VH.get(seg);
    }
    public static void change_action_state$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.change_action_state$VH.set(seg, x);
    }
    public static MemoryAddress change_action_state$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.change_action_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void change_action_state$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.change_action_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_action_state change_action_state (MemorySegment segment, ResourceScope scope) {
        return change_action_state.ofAddress(change_action_state$get(segment), scope);
    }
    static final FunctionDescriptor activate_action$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate_action$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.activate_action$FUNC, false
    );
    public interface activate_action {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(activate_action fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(activate_action.class, fi, _GActionGroupInterface.activate_action$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static activate_action ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("activate_action::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    _GActionGroupInterface.activate_action$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate_action$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("activate_action"));
    public static VarHandle activate_action$VH() {
        return _GActionGroupInterface.activate_action$VH;
    }
    public static MemoryAddress activate_action$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.activate_action$VH.get(seg);
    }
    public static void activate_action$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.activate_action$VH.set(seg, x);
    }
    public static MemoryAddress activate_action$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.activate_action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_action$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.activate_action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_action activate_action (MemorySegment segment, ResourceScope scope) {
        return activate_action.ofAddress(activate_action$get(segment), scope);
    }
    static final FunctionDescriptor action_added$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle action_added$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.action_added$FUNC, false
    );
    public interface action_added {

        void apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(action_added fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(action_added.class, fi, _GActionGroupInterface.action_added$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static action_added ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("action_added::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    _GActionGroupInterface.action_added$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle action_added$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("action_added"));
    public static VarHandle action_added$VH() {
        return _GActionGroupInterface.action_added$VH;
    }
    public static MemoryAddress action_added$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.action_added$VH.get(seg);
    }
    public static void action_added$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.action_added$VH.set(seg, x);
    }
    public static MemoryAddress action_added$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.action_added$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void action_added$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.action_added$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_added action_added (MemorySegment segment, ResourceScope scope) {
        return action_added.ofAddress(action_added$get(segment), scope);
    }
    static final FunctionDescriptor action_removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle action_removed$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.action_removed$FUNC, false
    );
    public interface action_removed {

        void apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(action_removed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(action_removed.class, fi, _GActionGroupInterface.action_removed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static action_removed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("action_removed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    _GActionGroupInterface.action_removed$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle action_removed$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("action_removed"));
    public static VarHandle action_removed$VH() {
        return _GActionGroupInterface.action_removed$VH;
    }
    public static MemoryAddress action_removed$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.action_removed$VH.get(seg);
    }
    public static void action_removed$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.action_removed$VH.set(seg, x);
    }
    public static MemoryAddress action_removed$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.action_removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void action_removed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.action_removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_removed action_removed (MemorySegment segment, ResourceScope scope) {
        return action_removed.ofAddress(action_removed$get(segment), scope);
    }
    static final FunctionDescriptor action_enabled_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle action_enabled_changed$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.action_enabled_changed$FUNC, false
    );
    public interface action_enabled_changed {

        void apply(MemoryAddress _x0, MemoryAddress _x1, int _x2);
        static NativeSymbol allocate(action_enabled_changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(action_enabled_changed.class, fi, _GActionGroupInterface.action_enabled_changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
        }
        static action_enabled_changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("action_enabled_changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, int __x2) -> {
                try {
                    _GActionGroupInterface.action_enabled_changed$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle action_enabled_changed$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("action_enabled_changed"));
    public static VarHandle action_enabled_changed$VH() {
        return _GActionGroupInterface.action_enabled_changed$VH;
    }
    public static MemoryAddress action_enabled_changed$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.action_enabled_changed$VH.get(seg);
    }
    public static void action_enabled_changed$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.action_enabled_changed$VH.set(seg, x);
    }
    public static MemoryAddress action_enabled_changed$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.action_enabled_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void action_enabled_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.action_enabled_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_enabled_changed action_enabled_changed (MemorySegment segment, ResourceScope scope) {
        return action_enabled_changed.ofAddress(action_enabled_changed$get(segment), scope);
    }
    static final FunctionDescriptor action_state_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle action_state_changed$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.action_state_changed$FUNC, false
    );
    public interface action_state_changed {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(action_state_changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(action_state_changed.class, fi, _GActionGroupInterface.action_state_changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static action_state_changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("action_state_changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    _GActionGroupInterface.action_state_changed$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle action_state_changed$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("action_state_changed"));
    public static VarHandle action_state_changed$VH() {
        return _GActionGroupInterface.action_state_changed$VH;
    }
    public static MemoryAddress action_state_changed$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.action_state_changed$VH.get(seg);
    }
    public static void action_state_changed$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.action_state_changed$VH.set(seg, x);
    }
    public static MemoryAddress action_state_changed$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.action_state_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void action_state_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.action_state_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_state_changed action_state_changed (MemorySegment segment, ResourceScope scope) {
        return action_state_changed.ofAddress(action_state_changed$get(segment), scope);
    }
    static final FunctionDescriptor query_action$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_action$MH = RuntimeHelper.downcallHandle(
        _GActionGroupInterface.query_action$FUNC, false
    );
    public interface query_action {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4, MemoryAddress _x5, MemoryAddress _x6);
        static NativeSymbol allocate(query_action fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(query_action.class, fi, _GActionGroupInterface.query_action$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static query_action ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("query_action::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4, MemoryAddress __x5, MemoryAddress __x6) -> {
                try {
                    return (int)_GActionGroupInterface.query_action$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4, (Addressable)__x5, (Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle query_action$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("query_action"));
    public static VarHandle query_action$VH() {
        return _GActionGroupInterface.query_action$VH;
    }
    public static MemoryAddress query_action$get(MemorySegment seg) {
        return (MemoryAddress)_GActionGroupInterface.query_action$VH.get(seg);
    }
    public static void query_action$set( MemorySegment seg, MemoryAddress x) {
        _GActionGroupInterface.query_action$VH.set(seg, x);
    }
    public static MemoryAddress query_action$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GActionGroupInterface.query_action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void query_action$set(MemorySegment seg, long index, MemoryAddress x) {
        _GActionGroupInterface.query_action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_action query_action (MemorySegment segment, ResourceScope scope) {
        return query_action.ofAddress(query_action$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


