// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface g_thread_gettime {

    long apply();
    static NativeSymbol allocate(g_thread_gettime fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(g_thread_gettime.class, fi, constants$331.g_thread_gettime$FUNC, "()J", scope);
    }
    static g_thread_gettime ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("g_thread_gettime::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
            try {
                return (long)constants$331.g_thread_gettime$MH.invokeExact(symbol);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


