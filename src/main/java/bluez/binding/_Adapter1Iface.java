// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _Adapter1Iface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_remove_device"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_set_discovery_filter"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_start_discovery"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_stop_discovery"),
        Constants$root.C_POINTER$LAYOUT.withName("get_address"),
        Constants$root.C_POINTER$LAYOUT.withName("get_alias"),
        Constants$root.C_POINTER$LAYOUT.withName("get_class"),
        Constants$root.C_POINTER$LAYOUT.withName("get_discoverable"),
        Constants$root.C_POINTER$LAYOUT.withName("get_discoverable_timeout"),
        Constants$root.C_POINTER$LAYOUT.withName("get_discovering"),
        Constants$root.C_POINTER$LAYOUT.withName("get_modalias"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_pairable"),
        Constants$root.C_POINTER$LAYOUT.withName("get_pairable_timeout"),
        Constants$root.C_POINTER$LAYOUT.withName("get_powered"),
        Constants$root.C_POINTER$LAYOUT.withName("get_uuids")
    ).withName("_Adapter1Iface");
    public static MemoryLayout $LAYOUT() {
        return _Adapter1Iface.$struct$LAYOUT;
    }
    public static MemorySegment parent_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor handle_remove_device$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_remove_device$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.handle_remove_device$FUNC, false
    );
    public interface handle_remove_device {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handle_remove_device fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_remove_device.class, fi, _Adapter1Iface.handle_remove_device$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_remove_device ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_remove_device::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_Adapter1Iface.handle_remove_device$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_remove_device$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_remove_device"));
    public static VarHandle handle_remove_device$VH() {
        return _Adapter1Iface.handle_remove_device$VH;
    }
    public static MemoryAddress handle_remove_device$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.handle_remove_device$VH.get(seg);
    }
    public static void handle_remove_device$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.handle_remove_device$VH.set(seg, x);
    }
    public static MemoryAddress handle_remove_device$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.handle_remove_device$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_remove_device$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.handle_remove_device$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_remove_device handle_remove_device (MemorySegment segment, ResourceScope scope) {
        return handle_remove_device.ofAddress(handle_remove_device$get(segment), scope);
    }
    static final FunctionDescriptor handle_set_discovery_filter$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_set_discovery_filter$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.handle_set_discovery_filter$FUNC, false
    );
    public interface handle_set_discovery_filter {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handle_set_discovery_filter fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_set_discovery_filter.class, fi, _Adapter1Iface.handle_set_discovery_filter$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_set_discovery_filter ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_set_discovery_filter::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_Adapter1Iface.handle_set_discovery_filter$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_set_discovery_filter$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_set_discovery_filter"));
    public static VarHandle handle_set_discovery_filter$VH() {
        return _Adapter1Iface.handle_set_discovery_filter$VH;
    }
    public static MemoryAddress handle_set_discovery_filter$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.handle_set_discovery_filter$VH.get(seg);
    }
    public static void handle_set_discovery_filter$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.handle_set_discovery_filter$VH.set(seg, x);
    }
    public static MemoryAddress handle_set_discovery_filter$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.handle_set_discovery_filter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_set_discovery_filter$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.handle_set_discovery_filter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_set_discovery_filter handle_set_discovery_filter (MemorySegment segment, ResourceScope scope) {
        return handle_set_discovery_filter.ofAddress(handle_set_discovery_filter$get(segment), scope);
    }
    static final FunctionDescriptor handle_start_discovery$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_start_discovery$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.handle_start_discovery$FUNC, false
    );
    public interface handle_start_discovery {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_start_discovery fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_start_discovery.class, fi, _Adapter1Iface.handle_start_discovery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_start_discovery ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_start_discovery::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_Adapter1Iface.handle_start_discovery$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_start_discovery$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_start_discovery"));
    public static VarHandle handle_start_discovery$VH() {
        return _Adapter1Iface.handle_start_discovery$VH;
    }
    public static MemoryAddress handle_start_discovery$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.handle_start_discovery$VH.get(seg);
    }
    public static void handle_start_discovery$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.handle_start_discovery$VH.set(seg, x);
    }
    public static MemoryAddress handle_start_discovery$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.handle_start_discovery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_start_discovery$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.handle_start_discovery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_start_discovery handle_start_discovery (MemorySegment segment, ResourceScope scope) {
        return handle_start_discovery.ofAddress(handle_start_discovery$get(segment), scope);
    }
    static final FunctionDescriptor handle_stop_discovery$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_stop_discovery$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.handle_stop_discovery$FUNC, false
    );
    public interface handle_stop_discovery {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_stop_discovery fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_stop_discovery.class, fi, _Adapter1Iface.handle_stop_discovery$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_stop_discovery ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_stop_discovery::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_Adapter1Iface.handle_stop_discovery$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_stop_discovery$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_stop_discovery"));
    public static VarHandle handle_stop_discovery$VH() {
        return _Adapter1Iface.handle_stop_discovery$VH;
    }
    public static MemoryAddress handle_stop_discovery$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.handle_stop_discovery$VH.get(seg);
    }
    public static void handle_stop_discovery$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.handle_stop_discovery$VH.set(seg, x);
    }
    public static MemoryAddress handle_stop_discovery$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.handle_stop_discovery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_stop_discovery$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.handle_stop_discovery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_stop_discovery handle_stop_discovery (MemorySegment segment, ResourceScope scope) {
        return handle_stop_discovery.ofAddress(handle_stop_discovery$get(segment), scope);
    }
    static final FunctionDescriptor get_address$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_address$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_address$FUNC, false
    );
    public interface get_address {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_address fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_address.class, fi, _Adapter1Iface.get_address$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_address ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_address::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Adapter1Iface.get_address$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_address$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_address"));
    public static VarHandle get_address$VH() {
        return _Adapter1Iface.get_address$VH;
    }
    public static MemoryAddress get_address$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_address$VH.get(seg);
    }
    public static void get_address$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_address$VH.set(seg, x);
    }
    public static MemoryAddress get_address$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_address$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_address$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_address$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_address get_address (MemorySegment segment, ResourceScope scope) {
        return get_address.ofAddress(get_address$get(segment), scope);
    }
    static final FunctionDescriptor get_alias$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_alias$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_alias$FUNC, false
    );
    public interface get_alias {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_alias fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_alias.class, fi, _Adapter1Iface.get_alias$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_alias ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_alias::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Adapter1Iface.get_alias$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_alias$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_alias"));
    public static VarHandle get_alias$VH() {
        return _Adapter1Iface.get_alias$VH;
    }
    public static MemoryAddress get_alias$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_alias$VH.get(seg);
    }
    public static void get_alias$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_alias$VH.set(seg, x);
    }
    public static MemoryAddress get_alias$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_alias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_alias$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_alias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_alias get_alias (MemorySegment segment, ResourceScope scope) {
        return get_alias.ofAddress(get_alias$get(segment), scope);
    }
    static final FunctionDescriptor get_class$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_class$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_class$FUNC, false
    );
    public interface get_class {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_class fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_class.class, fi, _Adapter1Iface.get_class$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_class ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_class::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Adapter1Iface.get_class$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_class$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_class"));
    public static VarHandle get_class$VH() {
        return _Adapter1Iface.get_class$VH;
    }
    public static MemoryAddress get_class$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_class$VH.get(seg);
    }
    public static void get_class$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_class$VH.set(seg, x);
    }
    public static MemoryAddress get_class$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_class$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_class get_class (MemorySegment segment, ResourceScope scope) {
        return get_class.ofAddress(get_class$get(segment), scope);
    }
    static final FunctionDescriptor get_discoverable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_discoverable$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_discoverable$FUNC, false
    );
    public interface get_discoverable {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_discoverable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_discoverable.class, fi, _Adapter1Iface.get_discoverable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_discoverable ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_discoverable::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Adapter1Iface.get_discoverable$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_discoverable$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_discoverable"));
    public static VarHandle get_discoverable$VH() {
        return _Adapter1Iface.get_discoverable$VH;
    }
    public static MemoryAddress get_discoverable$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_discoverable$VH.get(seg);
    }
    public static void get_discoverable$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_discoverable$VH.set(seg, x);
    }
    public static MemoryAddress get_discoverable$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_discoverable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_discoverable$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_discoverable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_discoverable get_discoverable (MemorySegment segment, ResourceScope scope) {
        return get_discoverable.ofAddress(get_discoverable$get(segment), scope);
    }
    static final FunctionDescriptor get_discoverable_timeout$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_discoverable_timeout$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_discoverable_timeout$FUNC, false
    );
    public interface get_discoverable_timeout {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_discoverable_timeout fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_discoverable_timeout.class, fi, _Adapter1Iface.get_discoverable_timeout$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_discoverable_timeout ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_discoverable_timeout::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Adapter1Iface.get_discoverable_timeout$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_discoverable_timeout$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_discoverable_timeout"));
    public static VarHandle get_discoverable_timeout$VH() {
        return _Adapter1Iface.get_discoverable_timeout$VH;
    }
    public static MemoryAddress get_discoverable_timeout$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_discoverable_timeout$VH.get(seg);
    }
    public static void get_discoverable_timeout$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_discoverable_timeout$VH.set(seg, x);
    }
    public static MemoryAddress get_discoverable_timeout$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_discoverable_timeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_discoverable_timeout$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_discoverable_timeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_discoverable_timeout get_discoverable_timeout (MemorySegment segment, ResourceScope scope) {
        return get_discoverable_timeout.ofAddress(get_discoverable_timeout$get(segment), scope);
    }
    static final FunctionDescriptor get_discovering$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_discovering$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_discovering$FUNC, false
    );
    public interface get_discovering {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_discovering fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_discovering.class, fi, _Adapter1Iface.get_discovering$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_discovering ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_discovering::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Adapter1Iface.get_discovering$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_discovering$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_discovering"));
    public static VarHandle get_discovering$VH() {
        return _Adapter1Iface.get_discovering$VH;
    }
    public static MemoryAddress get_discovering$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_discovering$VH.get(seg);
    }
    public static void get_discovering$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_discovering$VH.set(seg, x);
    }
    public static MemoryAddress get_discovering$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_discovering$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_discovering$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_discovering$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_discovering get_discovering (MemorySegment segment, ResourceScope scope) {
        return get_discovering.ofAddress(get_discovering$get(segment), scope);
    }
    static final FunctionDescriptor get_modalias$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_modalias$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_modalias$FUNC, false
    );
    public interface get_modalias {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_modalias fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_modalias.class, fi, _Adapter1Iface.get_modalias$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_modalias ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_modalias::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Adapter1Iface.get_modalias$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_modalias$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_modalias"));
    public static VarHandle get_modalias$VH() {
        return _Adapter1Iface.get_modalias$VH;
    }
    public static MemoryAddress get_modalias$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_modalias$VH.get(seg);
    }
    public static void get_modalias$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_modalias$VH.set(seg, x);
    }
    public static MemoryAddress get_modalias$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_modalias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_modalias$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_modalias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_modalias get_modalias (MemorySegment segment, ResourceScope scope) {
        return get_modalias.ofAddress(get_modalias$get(segment), scope);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_name$FUNC, false
    );
    public interface get_name {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _Adapter1Iface.get_name$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Adapter1Iface.get_name$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _Adapter1Iface.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, ResourceScope scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    static final FunctionDescriptor get_pairable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_pairable$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_pairable$FUNC, false
    );
    public interface get_pairable {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_pairable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_pairable.class, fi, _Adapter1Iface.get_pairable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_pairable ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_pairable::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Adapter1Iface.get_pairable$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_pairable$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_pairable"));
    public static VarHandle get_pairable$VH() {
        return _Adapter1Iface.get_pairable$VH;
    }
    public static MemoryAddress get_pairable$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_pairable$VH.get(seg);
    }
    public static void get_pairable$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_pairable$VH.set(seg, x);
    }
    public static MemoryAddress get_pairable$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_pairable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_pairable$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_pairable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_pairable get_pairable (MemorySegment segment, ResourceScope scope) {
        return get_pairable.ofAddress(get_pairable$get(segment), scope);
    }
    static final FunctionDescriptor get_pairable_timeout$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_pairable_timeout$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_pairable_timeout$FUNC, false
    );
    public interface get_pairable_timeout {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_pairable_timeout fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_pairable_timeout.class, fi, _Adapter1Iface.get_pairable_timeout$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_pairable_timeout ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_pairable_timeout::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Adapter1Iface.get_pairable_timeout$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_pairable_timeout$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_pairable_timeout"));
    public static VarHandle get_pairable_timeout$VH() {
        return _Adapter1Iface.get_pairable_timeout$VH;
    }
    public static MemoryAddress get_pairable_timeout$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_pairable_timeout$VH.get(seg);
    }
    public static void get_pairable_timeout$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_pairable_timeout$VH.set(seg, x);
    }
    public static MemoryAddress get_pairable_timeout$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_pairable_timeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_pairable_timeout$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_pairable_timeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_pairable_timeout get_pairable_timeout (MemorySegment segment, ResourceScope scope) {
        return get_pairable_timeout.ofAddress(get_pairable_timeout$get(segment), scope);
    }
    static final FunctionDescriptor get_powered$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_powered$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_powered$FUNC, false
    );
    public interface get_powered {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_powered fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_powered.class, fi, _Adapter1Iface.get_powered$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_powered ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_powered::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_Adapter1Iface.get_powered$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_powered$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_powered"));
    public static VarHandle get_powered$VH() {
        return _Adapter1Iface.get_powered$VH;
    }
    public static MemoryAddress get_powered$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_powered$VH.get(seg);
    }
    public static void get_powered$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_powered$VH.set(seg, x);
    }
    public static MemoryAddress get_powered$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_powered$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_powered$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_powered$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_powered get_powered (MemorySegment segment, ResourceScope scope) {
        return get_powered.ofAddress(get_powered$get(segment), scope);
    }
    static final FunctionDescriptor get_uuids$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_uuids$MH = RuntimeHelper.downcallHandle(
        _Adapter1Iface.get_uuids$FUNC, false
    );
    public interface get_uuids {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_uuids fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_uuids.class, fi, _Adapter1Iface.get_uuids$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_uuids ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_uuids::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_Adapter1Iface.get_uuids$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_uuids$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_uuids"));
    public static VarHandle get_uuids$VH() {
        return _Adapter1Iface.get_uuids$VH;
    }
    public static MemoryAddress get_uuids$get(MemorySegment seg) {
        return (MemoryAddress)_Adapter1Iface.get_uuids$VH.get(seg);
    }
    public static void get_uuids$set( MemorySegment seg, MemoryAddress x) {
        _Adapter1Iface.get_uuids$VH.set(seg, x);
    }
    public static MemoryAddress get_uuids$get(MemorySegment seg, long index) {
        return (MemoryAddress)_Adapter1Iface.get_uuids$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuids$set(MemorySegment seg, long index, MemoryAddress x) {
        _Adapter1Iface.get_uuids$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuids get_uuids (MemorySegment segment, ResourceScope scope) {
        return get_uuids.ofAddress(get_uuids$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


