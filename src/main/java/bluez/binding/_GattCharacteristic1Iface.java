// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GattCharacteristic1Iface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_read_value"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_start_notify"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_stop_notify"),
        Constants$root.C_POINTER$LAYOUT.withName("handle_write_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_descriptors"),
        Constants$root.C_POINTER$LAYOUT.withName("get_flags"),
        Constants$root.C_POINTER$LAYOUT.withName("get_notifying"),
        Constants$root.C_POINTER$LAYOUT.withName("get_service"),
        Constants$root.C_POINTER$LAYOUT.withName("get_uuid"),
        Constants$root.C_POINTER$LAYOUT.withName("get_value")
    ).withName("_GattCharacteristic1Iface");
    public static MemoryLayout $LAYOUT() {
        return _GattCharacteristic1Iface.$struct$LAYOUT;
    }
    public static MemorySegment parent_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor handle_read_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_read_value$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.handle_read_value$FUNC, false
    );
    public interface handle_read_value {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(handle_read_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_read_value.class, fi, _GattCharacteristic1Iface.handle_read_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_read_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_read_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GattCharacteristic1Iface.handle_read_value$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_read_value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_read_value"));
    public static VarHandle handle_read_value$VH() {
        return _GattCharacteristic1Iface.handle_read_value$VH;
    }
    public static MemoryAddress handle_read_value$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_read_value$VH.get(seg);
    }
    public static void handle_read_value$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_read_value$VH.set(seg, x);
    }
    public static MemoryAddress handle_read_value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_read_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_read_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_read_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_read_value handle_read_value (MemorySegment segment, ResourceScope scope) {
        return handle_read_value.ofAddress(handle_read_value$get(segment), scope);
    }
    static final FunctionDescriptor handle_start_notify$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_start_notify$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.handle_start_notify$FUNC, false
    );
    public interface handle_start_notify {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_start_notify fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_start_notify.class, fi, _GattCharacteristic1Iface.handle_start_notify$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_start_notify ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_start_notify::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_GattCharacteristic1Iface.handle_start_notify$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_start_notify$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_start_notify"));
    public static VarHandle handle_start_notify$VH() {
        return _GattCharacteristic1Iface.handle_start_notify$VH;
    }
    public static MemoryAddress handle_start_notify$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_start_notify$VH.get(seg);
    }
    public static void handle_start_notify$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_start_notify$VH.set(seg, x);
    }
    public static MemoryAddress handle_start_notify$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_start_notify$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_start_notify$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_start_notify$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_start_notify handle_start_notify (MemorySegment segment, ResourceScope scope) {
        return handle_start_notify.ofAddress(handle_start_notify$get(segment), scope);
    }
    static final FunctionDescriptor handle_stop_notify$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_stop_notify$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.handle_stop_notify$FUNC, false
    );
    public interface handle_stop_notify {

        int apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(handle_stop_notify fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_stop_notify.class, fi, _GattCharacteristic1Iface.handle_stop_notify$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_stop_notify ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_stop_notify::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (int)_GattCharacteristic1Iface.handle_stop_notify$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_stop_notify$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_stop_notify"));
    public static VarHandle handle_stop_notify$VH() {
        return _GattCharacteristic1Iface.handle_stop_notify$VH;
    }
    public static MemoryAddress handle_stop_notify$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_stop_notify$VH.get(seg);
    }
    public static void handle_stop_notify$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_stop_notify$VH.set(seg, x);
    }
    public static MemoryAddress handle_stop_notify$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_stop_notify$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_stop_notify$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_stop_notify$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_stop_notify handle_stop_notify (MemorySegment segment, ResourceScope scope) {
        return handle_stop_notify.ofAddress(handle_stop_notify$get(segment), scope);
    }
    static final FunctionDescriptor handle_write_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle handle_write_value$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.handle_write_value$FUNC, false
    );
    public interface handle_write_value {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, MemoryAddress _x3);
        static NativeSymbol allocate(handle_write_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(handle_write_value.class, fi, _GattCharacteristic1Iface.handle_write_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static handle_write_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("handle_write_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, MemoryAddress __x3) -> {
                try {
                    return (int)_GattCharacteristic1Iface.handle_write_value$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, (Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle handle_write_value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("handle_write_value"));
    public static VarHandle handle_write_value$VH() {
        return _GattCharacteristic1Iface.handle_write_value$VH;
    }
    public static MemoryAddress handle_write_value$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_write_value$VH.get(seg);
    }
    public static void handle_write_value$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_write_value$VH.set(seg, x);
    }
    public static MemoryAddress handle_write_value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.handle_write_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void handle_write_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.handle_write_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static handle_write_value handle_write_value (MemorySegment segment, ResourceScope scope) {
        return handle_write_value.ofAddress(handle_write_value$get(segment), scope);
    }
    static final FunctionDescriptor get_descriptors$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_descriptors$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.get_descriptors$FUNC, false
    );
    public interface get_descriptors {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_descriptors fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_descriptors.class, fi, _GattCharacteristic1Iface.get_descriptors$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_descriptors ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_descriptors::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattCharacteristic1Iface.get_descriptors$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_descriptors$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_descriptors"));
    public static VarHandle get_descriptors$VH() {
        return _GattCharacteristic1Iface.get_descriptors$VH;
    }
    public static MemoryAddress get_descriptors$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_descriptors$VH.get(seg);
    }
    public static void get_descriptors$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.get_descriptors$VH.set(seg, x);
    }
    public static MemoryAddress get_descriptors$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_descriptors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_descriptors$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.get_descriptors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_descriptors get_descriptors (MemorySegment segment, ResourceScope scope) {
        return get_descriptors.ofAddress(get_descriptors$get(segment), scope);
    }
    static final FunctionDescriptor get_flags$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_flags$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.get_flags$FUNC, false
    );
    public interface get_flags {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_flags fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_flags.class, fi, _GattCharacteristic1Iface.get_flags$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_flags ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_flags::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattCharacteristic1Iface.get_flags$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_flags$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_flags"));
    public static VarHandle get_flags$VH() {
        return _GattCharacteristic1Iface.get_flags$VH;
    }
    public static MemoryAddress get_flags$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_flags$VH.get(seg);
    }
    public static void get_flags$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.get_flags$VH.set(seg, x);
    }
    public static MemoryAddress get_flags$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_flags$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.get_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_flags get_flags (MemorySegment segment, ResourceScope scope) {
        return get_flags.ofAddress(get_flags$get(segment), scope);
    }
    static final FunctionDescriptor get_notifying$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_notifying$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.get_notifying$FUNC, false
    );
    public interface get_notifying {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_notifying fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_notifying.class, fi, _GattCharacteristic1Iface.get_notifying$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_notifying ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_notifying::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GattCharacteristic1Iface.get_notifying$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_notifying$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_notifying"));
    public static VarHandle get_notifying$VH() {
        return _GattCharacteristic1Iface.get_notifying$VH;
    }
    public static MemoryAddress get_notifying$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_notifying$VH.get(seg);
    }
    public static void get_notifying$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.get_notifying$VH.set(seg, x);
    }
    public static MemoryAddress get_notifying$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_notifying$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_notifying$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.get_notifying$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_notifying get_notifying (MemorySegment segment, ResourceScope scope) {
        return get_notifying.ofAddress(get_notifying$get(segment), scope);
    }
    static final FunctionDescriptor get_service$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_service$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.get_service$FUNC, false
    );
    public interface get_service {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_service fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_service.class, fi, _GattCharacteristic1Iface.get_service$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_service ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_service::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattCharacteristic1Iface.get_service$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_service$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_service"));
    public static VarHandle get_service$VH() {
        return _GattCharacteristic1Iface.get_service$VH;
    }
    public static MemoryAddress get_service$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_service$VH.get(seg);
    }
    public static void get_service$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.get_service$VH.set(seg, x);
    }
    public static MemoryAddress get_service$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_service$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_service$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.get_service$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_service get_service (MemorySegment segment, ResourceScope scope) {
        return get_service.ofAddress(get_service$get(segment), scope);
    }
    static final FunctionDescriptor get_uuid$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_uuid$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.get_uuid$FUNC, false
    );
    public interface get_uuid {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_uuid fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_uuid.class, fi, _GattCharacteristic1Iface.get_uuid$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_uuid ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_uuid::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattCharacteristic1Iface.get_uuid$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_uuid$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_uuid"));
    public static VarHandle get_uuid$VH() {
        return _GattCharacteristic1Iface.get_uuid$VH;
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_uuid$VH.get(seg);
    }
    public static void get_uuid$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.get_uuid$VH.set(seg, x);
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_uuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuid$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.get_uuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuid get_uuid (MemorySegment segment, ResourceScope scope) {
        return get_uuid.ofAddress(get_uuid$get(segment), scope);
    }
    static final FunctionDescriptor get_value$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value$MH = RuntimeHelper.downcallHandle(
        _GattCharacteristic1Iface.get_value$FUNC, false
    );
    public interface get_value {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_value fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_value.class, fi, _GattCharacteristic1Iface.get_value$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_value ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_value::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GattCharacteristic1Iface.get_value$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_value"));
    public static VarHandle get_value$VH() {
        return _GattCharacteristic1Iface.get_value$VH;
    }
    public static MemoryAddress get_value$get(MemorySegment seg) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_value$VH.get(seg);
    }
    public static void get_value$set( MemorySegment seg, MemoryAddress x) {
        _GattCharacteristic1Iface.get_value$VH.set(seg, x);
    }
    public static MemoryAddress get_value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GattCharacteristic1Iface.get_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GattCharacteristic1Iface.get_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value get_value (MemorySegment segment, ResourceScope scope) {
        return get_value.ofAddress(get_value$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


