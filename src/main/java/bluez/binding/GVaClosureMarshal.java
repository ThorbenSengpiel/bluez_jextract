// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GVaClosureMarshal {

    void apply(MemoryAddress closure, MemoryAddress return_value, MemoryAddress instance, MemoryAddress args, MemoryAddress marshal_data, int n_params, MemoryAddress param_types);
    static NativeSymbol allocate(GVaClosureMarshal fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GVaClosureMarshal.class, fi, constants$424.GVaClosureMarshal$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GVaClosureMarshal ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GVaClosureMarshal::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress _closure, MemoryAddress _return_value, MemoryAddress _instance, MemoryAddress _args, MemoryAddress _marshal_data, int _n_params, MemoryAddress _param_types) -> {
            try {
                constants$424.GVaClosureMarshal$MH.invokeExact(symbol, (Addressable)_closure, (Addressable)_return_value, (Addressable)_instance, (Addressable)_args, (Addressable)_marshal_data, _n_params, (Addressable)_param_types);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


