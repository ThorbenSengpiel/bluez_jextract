// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface __sighandler_t {

    void apply(int _x0);
    static NativeSymbol allocate(__sighandler_t fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(__sighandler_t.class, fi, constants$63.__sighandler_t$FUNC, "(I)V", scope);
    }
    static __sighandler_t ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("__sighandler_t::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int __x0) -> {
            try {
                constants$63.__sighandler_t$MH.invokeExact(symbol, __x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


