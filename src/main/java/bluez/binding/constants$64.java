// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$64 {

    static final FunctionDescriptor raise$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle raise$MH = RuntimeHelper.downcallHandle(
        "raise",
        constants$64.raise$FUNC, false
    );
    static final FunctionDescriptor ssignal$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ssignal$MH = RuntimeHelper.downcallHandle(
        "ssignal",
        constants$64.ssignal$FUNC, false
    );
    static final FunctionDescriptor gsignal$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle gsignal$MH = RuntimeHelper.downcallHandle(
        "gsignal",
        constants$64.gsignal$FUNC, false
    );
    static final FunctionDescriptor psignal$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle psignal$MH = RuntimeHelper.downcallHandle(
        "psignal",
        constants$64.psignal$FUNC, false
    );
    static final FunctionDescriptor psiginfo$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle psiginfo$MH = RuntimeHelper.downcallHandle(
        "psiginfo",
        constants$64.psiginfo$FUNC, false
    );
    static final FunctionDescriptor sigblock$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle sigblock$MH = RuntimeHelper.downcallHandle(
        "sigblock",
        constants$64.sigblock$FUNC, false
    );
}


