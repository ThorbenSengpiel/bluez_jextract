// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface __compar_fn_t {

    int apply(MemoryAddress _x0, MemoryAddress _x1);
    static NativeSymbol allocate(__compar_fn_t fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(__compar_fn_t.class, fi, constants$46.__compar_fn_t$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static __compar_fn_t ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("__compar_fn_t::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
            try {
                return (int)constants$46.__compar_fn_t$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


