// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GDriveIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("changed"),
        Constants$root.C_POINTER$LAYOUT.withName("disconnected"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_button"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_icon"),
        Constants$root.C_POINTER$LAYOUT.withName("has_volumes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_volumes"),
        Constants$root.C_POINTER$LAYOUT.withName("is_media_removable"),
        Constants$root.C_POINTER$LAYOUT.withName("has_media"),
        Constants$root.C_POINTER$LAYOUT.withName("is_media_check_automatic"),
        Constants$root.C_POINTER$LAYOUT.withName("can_eject"),
        Constants$root.C_POINTER$LAYOUT.withName("can_poll_for_media"),
        Constants$root.C_POINTER$LAYOUT.withName("eject"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("poll_for_media"),
        Constants$root.C_POINTER$LAYOUT.withName("poll_for_media_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_identifier"),
        Constants$root.C_POINTER$LAYOUT.withName("enumerate_identifiers"),
        Constants$root.C_POINTER$LAYOUT.withName("get_start_stop_type"),
        Constants$root.C_POINTER$LAYOUT.withName("can_start"),
        Constants$root.C_POINTER$LAYOUT.withName("can_start_degraded"),
        Constants$root.C_POINTER$LAYOUT.withName("start"),
        Constants$root.C_POINTER$LAYOUT.withName("start_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("can_stop"),
        Constants$root.C_POINTER$LAYOUT.withName("stop"),
        Constants$root.C_POINTER$LAYOUT.withName("stop_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("stop_button"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_with_operation"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_with_operation_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_sort_key"),
        Constants$root.C_POINTER$LAYOUT.withName("get_symbolic_icon"),
        Constants$root.C_POINTER$LAYOUT.withName("is_removable")
    ).withName("_GDriveIface");
    public static MemoryLayout $LAYOUT() {
        return _GDriveIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.changed$FUNC, false
    );
    public interface changed {

        void apply(MemoryAddress _x0);
        static NativeSymbol allocate(changed fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(changed.class, fi, _GDriveIface.changed$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static changed ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("changed::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    _GDriveIface.changed$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle changed$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("changed"));
    public static VarHandle changed$VH() {
        return _GDriveIface.changed$VH;
    }
    public static MemoryAddress changed$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.changed$VH.get(seg);
    }
    public static void changed$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.changed$VH.set(seg, x);
    }
    public static MemoryAddress changed$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed (MemorySegment segment, ResourceScope scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    static final FunctionDescriptor disconnected$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle disconnected$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.disconnected$FUNC, false
    );
    public interface disconnected {

        void apply(MemoryAddress _x0);
        static NativeSymbol allocate(disconnected fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(disconnected.class, fi, _GDriveIface.disconnected$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static disconnected ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("disconnected::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    _GDriveIface.disconnected$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle disconnected$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("disconnected"));
    public static VarHandle disconnected$VH() {
        return _GDriveIface.disconnected$VH;
    }
    public static MemoryAddress disconnected$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.disconnected$VH.get(seg);
    }
    public static void disconnected$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.disconnected$VH.set(seg, x);
    }
    public static MemoryAddress disconnected$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.disconnected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void disconnected$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.disconnected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static disconnected disconnected (MemorySegment segment, ResourceScope scope) {
        return disconnected.ofAddress(disconnected$get(segment), scope);
    }
    static final FunctionDescriptor eject_button$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_button$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.eject_button$FUNC, false
    );
    public interface eject_button {

        void apply(MemoryAddress _x0);
        static NativeSymbol allocate(eject_button fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject_button.class, fi, _GDriveIface.eject_button$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static eject_button ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject_button::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    _GDriveIface.eject_button$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_button$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("eject_button"));
    public static VarHandle eject_button$VH() {
        return _GDriveIface.eject_button$VH;
    }
    public static MemoryAddress eject_button$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.eject_button$VH.get(seg);
    }
    public static void eject_button$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.eject_button$VH.set(seg, x);
    }
    public static MemoryAddress eject_button$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.eject_button$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_button$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.eject_button$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_button eject_button (MemorySegment segment, ResourceScope scope) {
        return eject_button.ofAddress(eject_button$get(segment), scope);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.get_name$FUNC, false
    );
    public interface get_name {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _GDriveIface.get_name$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDriveIface.get_name$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _GDriveIface.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, ResourceScope scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    static final FunctionDescriptor get_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_icon$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.get_icon$FUNC, false
    );
    public interface get_icon {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_icon fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_icon.class, fi, _GDriveIface.get_icon$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_icon ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_icon::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDriveIface.get_icon$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_icon$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_icon"));
    public static VarHandle get_icon$VH() {
        return _GDriveIface.get_icon$VH;
    }
    public static MemoryAddress get_icon$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.get_icon$VH.get(seg);
    }
    public static void get_icon$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.get_icon$VH.set(seg, x);
    }
    public static MemoryAddress get_icon$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.get_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.get_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon get_icon (MemorySegment segment, ResourceScope scope) {
        return get_icon.ofAddress(get_icon$get(segment), scope);
    }
    static final FunctionDescriptor has_volumes$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle has_volumes$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.has_volumes$FUNC, false
    );
    public interface has_volumes {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(has_volumes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(has_volumes.class, fi, _GDriveIface.has_volumes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static has_volumes ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("has_volumes::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.has_volumes$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle has_volumes$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("has_volumes"));
    public static VarHandle has_volumes$VH() {
        return _GDriveIface.has_volumes$VH;
    }
    public static MemoryAddress has_volumes$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.has_volumes$VH.get(seg);
    }
    public static void has_volumes$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.has_volumes$VH.set(seg, x);
    }
    public static MemoryAddress has_volumes$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.has_volumes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_volumes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.has_volumes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static has_volumes has_volumes (MemorySegment segment, ResourceScope scope) {
        return has_volumes.ofAddress(has_volumes$get(segment), scope);
    }
    static final FunctionDescriptor get_volumes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_volumes$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.get_volumes$FUNC, false
    );
    public interface get_volumes {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_volumes fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_volumes.class, fi, _GDriveIface.get_volumes$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_volumes ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_volumes::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDriveIface.get_volumes$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_volumes$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_volumes"));
    public static VarHandle get_volumes$VH() {
        return _GDriveIface.get_volumes$VH;
    }
    public static MemoryAddress get_volumes$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.get_volumes$VH.get(seg);
    }
    public static void get_volumes$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.get_volumes$VH.set(seg, x);
    }
    public static MemoryAddress get_volumes$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.get_volumes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_volumes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.get_volumes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_volumes get_volumes (MemorySegment segment, ResourceScope scope) {
        return get_volumes.ofAddress(get_volumes$get(segment), scope);
    }
    static final FunctionDescriptor is_media_removable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_media_removable$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.is_media_removable$FUNC, false
    );
    public interface is_media_removable {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(is_media_removable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_media_removable.class, fi, _GDriveIface.is_media_removable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_media_removable ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_media_removable::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.is_media_removable$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_media_removable$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("is_media_removable"));
    public static VarHandle is_media_removable$VH() {
        return _GDriveIface.is_media_removable$VH;
    }
    public static MemoryAddress is_media_removable$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.is_media_removable$VH.get(seg);
    }
    public static void is_media_removable$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.is_media_removable$VH.set(seg, x);
    }
    public static MemoryAddress is_media_removable$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.is_media_removable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_media_removable$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.is_media_removable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_media_removable is_media_removable (MemorySegment segment, ResourceScope scope) {
        return is_media_removable.ofAddress(is_media_removable$get(segment), scope);
    }
    static final FunctionDescriptor has_media$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle has_media$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.has_media$FUNC, false
    );
    public interface has_media {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(has_media fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(has_media.class, fi, _GDriveIface.has_media$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static has_media ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("has_media::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.has_media$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle has_media$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("has_media"));
    public static VarHandle has_media$VH() {
        return _GDriveIface.has_media$VH;
    }
    public static MemoryAddress has_media$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.has_media$VH.get(seg);
    }
    public static void has_media$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.has_media$VH.set(seg, x);
    }
    public static MemoryAddress has_media$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.has_media$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_media$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.has_media$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static has_media has_media (MemorySegment segment, ResourceScope scope) {
        return has_media.ofAddress(has_media$get(segment), scope);
    }
    static final FunctionDescriptor is_media_check_automatic$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_media_check_automatic$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.is_media_check_automatic$FUNC, false
    );
    public interface is_media_check_automatic {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(is_media_check_automatic fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_media_check_automatic.class, fi, _GDriveIface.is_media_check_automatic$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_media_check_automatic ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_media_check_automatic::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.is_media_check_automatic$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_media_check_automatic$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("is_media_check_automatic"));
    public static VarHandle is_media_check_automatic$VH() {
        return _GDriveIface.is_media_check_automatic$VH;
    }
    public static MemoryAddress is_media_check_automatic$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.is_media_check_automatic$VH.get(seg);
    }
    public static void is_media_check_automatic$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.is_media_check_automatic$VH.set(seg, x);
    }
    public static MemoryAddress is_media_check_automatic$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.is_media_check_automatic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_media_check_automatic$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.is_media_check_automatic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_media_check_automatic is_media_check_automatic (MemorySegment segment, ResourceScope scope) {
        return is_media_check_automatic.ofAddress(is_media_check_automatic$get(segment), scope);
    }
    static final FunctionDescriptor can_eject$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_eject$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.can_eject$FUNC, false
    );
    public interface can_eject {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(can_eject fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(can_eject.class, fi, _GDriveIface.can_eject$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static can_eject ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("can_eject::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.can_eject$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_eject$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("can_eject"));
    public static VarHandle can_eject$VH() {
        return _GDriveIface.can_eject$VH;
    }
    public static MemoryAddress can_eject$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.can_eject$VH.get(seg);
    }
    public static void can_eject$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.can_eject$VH.set(seg, x);
    }
    public static MemoryAddress can_eject$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.can_eject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_eject$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.can_eject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_eject can_eject (MemorySegment segment, ResourceScope scope) {
        return can_eject.ofAddress(can_eject$get(segment), scope);
    }
    static final FunctionDescriptor can_poll_for_media$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_poll_for_media$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.can_poll_for_media$FUNC, false
    );
    public interface can_poll_for_media {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(can_poll_for_media fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(can_poll_for_media.class, fi, _GDriveIface.can_poll_for_media$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static can_poll_for_media ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("can_poll_for_media::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.can_poll_for_media$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_poll_for_media$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("can_poll_for_media"));
    public static VarHandle can_poll_for_media$VH() {
        return _GDriveIface.can_poll_for_media$VH;
    }
    public static MemoryAddress can_poll_for_media$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.can_poll_for_media$VH.get(seg);
    }
    public static void can_poll_for_media$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.can_poll_for_media$VH.set(seg, x);
    }
    public static MemoryAddress can_poll_for_media$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.can_poll_for_media$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_poll_for_media$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.can_poll_for_media$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_poll_for_media can_poll_for_media (MemorySegment segment, ResourceScope scope) {
        return can_poll_for_media.ofAddress(can_poll_for_media$get(segment), scope);
    }
    static final FunctionDescriptor eject$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.eject$FUNC, false
    );
    public interface eject {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4);
        static NativeSymbol allocate(eject fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject.class, fi, _GDriveIface.eject$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static eject ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4) -> {
                try {
                    _GDriveIface.eject$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("eject"));
    public static VarHandle eject$VH() {
        return _GDriveIface.eject$VH;
    }
    public static MemoryAddress eject$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.eject$VH.get(seg);
    }
    public static void eject$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.eject$VH.set(seg, x);
    }
    public static MemoryAddress eject$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.eject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.eject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject eject (MemorySegment segment, ResourceScope scope) {
        return eject.ofAddress(eject$get(segment), scope);
    }
    static final FunctionDescriptor eject_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_finish$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.eject_finish$FUNC, false
    );
    public interface eject_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(eject_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject_finish.class, fi, _GDriveIface.eject_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static eject_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDriveIface.eject_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("eject_finish"));
    public static VarHandle eject_finish$VH() {
        return _GDriveIface.eject_finish$VH;
    }
    public static MemoryAddress eject_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.eject_finish$VH.get(seg);
    }
    public static void eject_finish$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.eject_finish$VH.set(seg, x);
    }
    public static MemoryAddress eject_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.eject_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.eject_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_finish eject_finish (MemorySegment segment, ResourceScope scope) {
        return eject_finish.ofAddress(eject_finish$get(segment), scope);
    }
    static final FunctionDescriptor poll_for_media$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle poll_for_media$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.poll_for_media$FUNC, false
    );
    public interface poll_for_media {

        void apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2, MemoryAddress _x3);
        static NativeSymbol allocate(poll_for_media fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(poll_for_media.class, fi, _GDriveIface.poll_for_media$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static poll_for_media ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("poll_for_media::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2, MemoryAddress __x3) -> {
                try {
                    _GDriveIface.poll_for_media$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2, (Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle poll_for_media$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("poll_for_media"));
    public static VarHandle poll_for_media$VH() {
        return _GDriveIface.poll_for_media$VH;
    }
    public static MemoryAddress poll_for_media$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.poll_for_media$VH.get(seg);
    }
    public static void poll_for_media$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.poll_for_media$VH.set(seg, x);
    }
    public static MemoryAddress poll_for_media$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.poll_for_media$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void poll_for_media$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.poll_for_media$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static poll_for_media poll_for_media (MemorySegment segment, ResourceScope scope) {
        return poll_for_media.ofAddress(poll_for_media$get(segment), scope);
    }
    static final FunctionDescriptor poll_for_media_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle poll_for_media_finish$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.poll_for_media_finish$FUNC, false
    );
    public interface poll_for_media_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(poll_for_media_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(poll_for_media_finish.class, fi, _GDriveIface.poll_for_media_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static poll_for_media_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("poll_for_media_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDriveIface.poll_for_media_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle poll_for_media_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("poll_for_media_finish"));
    public static VarHandle poll_for_media_finish$VH() {
        return _GDriveIface.poll_for_media_finish$VH;
    }
    public static MemoryAddress poll_for_media_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.poll_for_media_finish$VH.get(seg);
    }
    public static void poll_for_media_finish$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.poll_for_media_finish$VH.set(seg, x);
    }
    public static MemoryAddress poll_for_media_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.poll_for_media_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void poll_for_media_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.poll_for_media_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static poll_for_media_finish poll_for_media_finish (MemorySegment segment, ResourceScope scope) {
        return poll_for_media_finish.ofAddress(poll_for_media_finish$get(segment), scope);
    }
    static final FunctionDescriptor get_identifier$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_identifier$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.get_identifier$FUNC, false
    );
    public interface get_identifier {

        Addressable apply(MemoryAddress _x0, MemoryAddress _x1);
        static NativeSymbol allocate(get_identifier fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_identifier.class, fi, _GDriveIface.get_identifier$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_identifier ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_identifier::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDriveIface.get_identifier$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_identifier$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_identifier"));
    public static VarHandle get_identifier$VH() {
        return _GDriveIface.get_identifier$VH;
    }
    public static MemoryAddress get_identifier$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.get_identifier$VH.get(seg);
    }
    public static void get_identifier$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.get_identifier$VH.set(seg, x);
    }
    public static MemoryAddress get_identifier$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.get_identifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_identifier$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.get_identifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_identifier get_identifier (MemorySegment segment, ResourceScope scope) {
        return get_identifier.ofAddress(get_identifier$get(segment), scope);
    }
    static final FunctionDescriptor enumerate_identifiers$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle enumerate_identifiers$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.enumerate_identifiers$FUNC, false
    );
    public interface enumerate_identifiers {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(enumerate_identifiers fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(enumerate_identifiers.class, fi, _GDriveIface.enumerate_identifiers$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static enumerate_identifiers ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("enumerate_identifiers::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDriveIface.enumerate_identifiers$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle enumerate_identifiers$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("enumerate_identifiers"));
    public static VarHandle enumerate_identifiers$VH() {
        return _GDriveIface.enumerate_identifiers$VH;
    }
    public static MemoryAddress enumerate_identifiers$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.enumerate_identifiers$VH.get(seg);
    }
    public static void enumerate_identifiers$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.enumerate_identifiers$VH.set(seg, x);
    }
    public static MemoryAddress enumerate_identifiers$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.enumerate_identifiers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void enumerate_identifiers$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.enumerate_identifiers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static enumerate_identifiers enumerate_identifiers (MemorySegment segment, ResourceScope scope) {
        return enumerate_identifiers.ofAddress(enumerate_identifiers$get(segment), scope);
    }
    static final FunctionDescriptor get_start_stop_type$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_start_stop_type$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.get_start_stop_type$FUNC, false
    );
    public interface get_start_stop_type {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_start_stop_type fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_start_stop_type.class, fi, _GDriveIface.get_start_stop_type$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static get_start_stop_type ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_start_stop_type::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.get_start_stop_type$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_start_stop_type$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_start_stop_type"));
    public static VarHandle get_start_stop_type$VH() {
        return _GDriveIface.get_start_stop_type$VH;
    }
    public static MemoryAddress get_start_stop_type$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.get_start_stop_type$VH.get(seg);
    }
    public static void get_start_stop_type$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.get_start_stop_type$VH.set(seg, x);
    }
    public static MemoryAddress get_start_stop_type$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.get_start_stop_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_start_stop_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.get_start_stop_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_start_stop_type get_start_stop_type (MemorySegment segment, ResourceScope scope) {
        return get_start_stop_type.ofAddress(get_start_stop_type$get(segment), scope);
    }
    static final FunctionDescriptor can_start$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_start$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.can_start$FUNC, false
    );
    public interface can_start {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(can_start fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(can_start.class, fi, _GDriveIface.can_start$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static can_start ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("can_start::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.can_start$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_start$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("can_start"));
    public static VarHandle can_start$VH() {
        return _GDriveIface.can_start$VH;
    }
    public static MemoryAddress can_start$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.can_start$VH.get(seg);
    }
    public static void can_start$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.can_start$VH.set(seg, x);
    }
    public static MemoryAddress can_start$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.can_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_start$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.can_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_start can_start (MemorySegment segment, ResourceScope scope) {
        return can_start.ofAddress(can_start$get(segment), scope);
    }
    static final FunctionDescriptor can_start_degraded$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_start_degraded$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.can_start_degraded$FUNC, false
    );
    public interface can_start_degraded {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(can_start_degraded fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(can_start_degraded.class, fi, _GDriveIface.can_start_degraded$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static can_start_degraded ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("can_start_degraded::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.can_start_degraded$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_start_degraded$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("can_start_degraded"));
    public static VarHandle can_start_degraded$VH() {
        return _GDriveIface.can_start_degraded$VH;
    }
    public static MemoryAddress can_start_degraded$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.can_start_degraded$VH.get(seg);
    }
    public static void can_start_degraded$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.can_start_degraded$VH.set(seg, x);
    }
    public static MemoryAddress can_start_degraded$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.can_start_degraded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_start_degraded$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.can_start_degraded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_start_degraded can_start_degraded (MemorySegment segment, ResourceScope scope) {
        return can_start_degraded.ofAddress(can_start_degraded$get(segment), scope);
    }
    static final FunctionDescriptor start$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle start$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.start$FUNC, false
    );
    public interface start {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4, MemoryAddress _x5);
        static NativeSymbol allocate(start fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(start.class, fi, _GDriveIface.start$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static start ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("start::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4, MemoryAddress __x5) -> {
                try {
                    _GDriveIface.start$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4, (Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("start"));
    public static VarHandle start$VH() {
        return _GDriveIface.start$VH;
    }
    public static MemoryAddress start$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.start$VH.get(seg);
    }
    public static void start$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.start$VH.set(seg, x);
    }
    public static MemoryAddress start$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start start (MemorySegment segment, ResourceScope scope) {
        return start.ofAddress(start$get(segment), scope);
    }
    static final FunctionDescriptor start_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle start_finish$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.start_finish$FUNC, false
    );
    public interface start_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(start_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(start_finish.class, fi, _GDriveIface.start_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static start_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("start_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDriveIface.start_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("start_finish"));
    public static VarHandle start_finish$VH() {
        return _GDriveIface.start_finish$VH;
    }
    public static MemoryAddress start_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.start_finish$VH.get(seg);
    }
    public static void start_finish$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.start_finish$VH.set(seg, x);
    }
    public static MemoryAddress start_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.start_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.start_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_finish start_finish (MemorySegment segment, ResourceScope scope) {
        return start_finish.ofAddress(start_finish$get(segment), scope);
    }
    static final FunctionDescriptor can_stop$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_stop$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.can_stop$FUNC, false
    );
    public interface can_stop {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(can_stop fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(can_stop.class, fi, _GDriveIface.can_stop$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static can_stop ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("can_stop::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.can_stop$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_stop$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("can_stop"));
    public static VarHandle can_stop$VH() {
        return _GDriveIface.can_stop$VH;
    }
    public static MemoryAddress can_stop$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.can_stop$VH.get(seg);
    }
    public static void can_stop$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.can_stop$VH.set(seg, x);
    }
    public static MemoryAddress can_stop$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.can_stop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_stop$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.can_stop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_stop can_stop (MemorySegment segment, ResourceScope scope) {
        return can_stop.ofAddress(can_stop$get(segment), scope);
    }
    static final FunctionDescriptor stop$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle stop$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.stop$FUNC, false
    );
    public interface stop {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4, MemoryAddress _x5);
        static NativeSymbol allocate(stop fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(stop.class, fi, _GDriveIface.stop$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static stop ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("stop::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4, MemoryAddress __x5) -> {
                try {
                    _GDriveIface.stop$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4, (Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle stop$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("stop"));
    public static VarHandle stop$VH() {
        return _GDriveIface.stop$VH;
    }
    public static MemoryAddress stop$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.stop$VH.get(seg);
    }
    public static void stop$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.stop$VH.set(seg, x);
    }
    public static MemoryAddress stop$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.stop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stop$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.stop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static stop stop (MemorySegment segment, ResourceScope scope) {
        return stop.ofAddress(stop$get(segment), scope);
    }
    static final FunctionDescriptor stop_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle stop_finish$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.stop_finish$FUNC, false
    );
    public interface stop_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(stop_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(stop_finish.class, fi, _GDriveIface.stop_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static stop_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("stop_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDriveIface.stop_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle stop_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("stop_finish"));
    public static VarHandle stop_finish$VH() {
        return _GDriveIface.stop_finish$VH;
    }
    public static MemoryAddress stop_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.stop_finish$VH.get(seg);
    }
    public static void stop_finish$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.stop_finish$VH.set(seg, x);
    }
    public static MemoryAddress stop_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.stop_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stop_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.stop_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static stop_finish stop_finish (MemorySegment segment, ResourceScope scope) {
        return stop_finish.ofAddress(stop_finish$get(segment), scope);
    }
    static final FunctionDescriptor stop_button$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle stop_button$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.stop_button$FUNC, false
    );
    public interface stop_button {

        void apply(MemoryAddress _x0);
        static NativeSymbol allocate(stop_button fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(stop_button.class, fi, _GDriveIface.stop_button$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static stop_button ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("stop_button::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    _GDriveIface.stop_button$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle stop_button$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("stop_button"));
    public static VarHandle stop_button$VH() {
        return _GDriveIface.stop_button$VH;
    }
    public static MemoryAddress stop_button$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.stop_button$VH.get(seg);
    }
    public static void stop_button$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.stop_button$VH.set(seg, x);
    }
    public static MemoryAddress stop_button$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.stop_button$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stop_button$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.stop_button$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static stop_button stop_button (MemorySegment segment, ResourceScope scope) {
        return stop_button.ofAddress(stop_button$get(segment), scope);
    }
    static final FunctionDescriptor eject_with_operation$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_with_operation$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.eject_with_operation$FUNC, false
    );
    public interface eject_with_operation {

        void apply(MemoryAddress _x0, int _x1, MemoryAddress _x2, MemoryAddress _x3, MemoryAddress _x4, MemoryAddress _x5);
        static NativeSymbol allocate(eject_with_operation fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject_with_operation.class, fi, _GDriveIface.eject_with_operation$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static eject_with_operation ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject_with_operation::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, int __x1, MemoryAddress __x2, MemoryAddress __x3, MemoryAddress __x4, MemoryAddress __x5) -> {
                try {
                    _GDriveIface.eject_with_operation$MH.invokeExact(symbol, (Addressable)__x0, __x1, (Addressable)__x2, (Addressable)__x3, (Addressable)__x4, (Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_with_operation$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("eject_with_operation"));
    public static VarHandle eject_with_operation$VH() {
        return _GDriveIface.eject_with_operation$VH;
    }
    public static MemoryAddress eject_with_operation$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.eject_with_operation$VH.get(seg);
    }
    public static void eject_with_operation$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.eject_with_operation$VH.set(seg, x);
    }
    public static MemoryAddress eject_with_operation$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.eject_with_operation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.eject_with_operation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation eject_with_operation (MemorySegment segment, ResourceScope scope) {
        return eject_with_operation.ofAddress(eject_with_operation$get(segment), scope);
    }
    static final FunctionDescriptor eject_with_operation_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_with_operation_finish$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.eject_with_operation_finish$FUNC, false
    );
    public interface eject_with_operation_finish {

        int apply(MemoryAddress _x0, MemoryAddress _x1, MemoryAddress _x2);
        static NativeSymbol allocate(eject_with_operation_finish fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(eject_with_operation_finish.class, fi, _GDriveIface.eject_with_operation_finish$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static eject_with_operation_finish ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("eject_with_operation_finish::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0, MemoryAddress __x1, MemoryAddress __x2) -> {
                try {
                    return (int)_GDriveIface.eject_with_operation_finish$MH.invokeExact(symbol, (Addressable)__x0, (Addressable)__x1, (Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_with_operation_finish$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("eject_with_operation_finish"));
    public static VarHandle eject_with_operation_finish$VH() {
        return _GDriveIface.eject_with_operation_finish$VH;
    }
    public static MemoryAddress eject_with_operation_finish$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.eject_with_operation_finish$VH.get(seg);
    }
    public static void eject_with_operation_finish$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.eject_with_operation_finish$VH.set(seg, x);
    }
    public static MemoryAddress eject_with_operation_finish$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.eject_with_operation_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.eject_with_operation_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation_finish eject_with_operation_finish (MemorySegment segment, ResourceScope scope) {
        return eject_with_operation_finish.ofAddress(eject_with_operation_finish$get(segment), scope);
    }
    static final FunctionDescriptor get_sort_key$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sort_key$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.get_sort_key$FUNC, false
    );
    public interface get_sort_key {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_sort_key fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_sort_key.class, fi, _GDriveIface.get_sort_key$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_sort_key ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_sort_key::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDriveIface.get_sort_key$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_sort_key$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_sort_key"));
    public static VarHandle get_sort_key$VH() {
        return _GDriveIface.get_sort_key$VH;
    }
    public static MemoryAddress get_sort_key$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.get_sort_key$VH.get(seg);
    }
    public static void get_sort_key$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.get_sort_key$VH.set(seg, x);
    }
    public static MemoryAddress get_sort_key$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.get_sort_key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sort_key$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.get_sort_key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sort_key get_sort_key (MemorySegment segment, ResourceScope scope) {
        return get_sort_key.ofAddress(get_sort_key$get(segment), scope);
    }
    static final FunctionDescriptor get_symbolic_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_symbolic_icon$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.get_symbolic_icon$FUNC, false
    );
    public interface get_symbolic_icon {

        Addressable apply(MemoryAddress _x0);
        static NativeSymbol allocate(get_symbolic_icon fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(get_symbolic_icon.class, fi, _GDriveIface.get_symbolic_icon$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
        }
        static get_symbolic_icon ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("get_symbolic_icon::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (Addressable)(MemoryAddress)_GDriveIface.get_symbolic_icon$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_symbolic_icon$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("get_symbolic_icon"));
    public static VarHandle get_symbolic_icon$VH() {
        return _GDriveIface.get_symbolic_icon$VH;
    }
    public static MemoryAddress get_symbolic_icon$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.get_symbolic_icon$VH.get(seg);
    }
    public static void get_symbolic_icon$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.get_symbolic_icon$VH.set(seg, x);
    }
    public static MemoryAddress get_symbolic_icon$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.get_symbolic_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_symbolic_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.get_symbolic_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_symbolic_icon get_symbolic_icon (MemorySegment segment, ResourceScope scope) {
        return get_symbolic_icon.ofAddress(get_symbolic_icon$get(segment), scope);
    }
    static final FunctionDescriptor is_removable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_removable$MH = RuntimeHelper.downcallHandle(
        _GDriveIface.is_removable$FUNC, false
    );
    public interface is_removable {

        int apply(MemoryAddress _x0);
        static NativeSymbol allocate(is_removable fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(is_removable.class, fi, _GDriveIface.is_removable$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static is_removable ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("is_removable::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress __x0) -> {
                try {
                    return (int)_GDriveIface.is_removable$MH.invokeExact(symbol, (Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_removable$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("is_removable"));
    public static VarHandle is_removable$VH() {
        return _GDriveIface.is_removable$VH;
    }
    public static MemoryAddress is_removable$get(MemorySegment seg) {
        return (MemoryAddress)_GDriveIface.is_removable$VH.get(seg);
    }
    public static void is_removable$set( MemorySegment seg, MemoryAddress x) {
        _GDriveIface.is_removable$VH.set(seg, x);
    }
    public static MemoryAddress is_removable$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GDriveIface.is_removable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_removable$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDriveIface.is_removable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_removable is_removable (MemorySegment segment, ResourceScope scope) {
        return is_removable.ofAddress(is_removable$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


