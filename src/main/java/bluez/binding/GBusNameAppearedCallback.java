// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GBusNameAppearedCallback {

    void apply(MemoryAddress connection, MemoryAddress name, MemoryAddress name_owner, MemoryAddress user_data);
    static NativeSymbol allocate(GBusNameAppearedCallback fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GBusNameAppearedCallback.class, fi, constants$606.GBusNameAppearedCallback$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static GBusNameAppearedCallback ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GBusNameAppearedCallback::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (MemoryAddress _connection, MemoryAddress _name, MemoryAddress _name_owner, MemoryAddress _user_data) -> {
            try {
                constants$606.GBusNameAppearedCallback$MH.invokeExact(symbol, (Addressable)_connection, (Addressable)_name, (Addressable)_name_owner, (Addressable)_user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


