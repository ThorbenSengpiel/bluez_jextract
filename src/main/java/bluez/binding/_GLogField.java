// Generated by jextract

package bluez.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GLogField {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("key"),
        Constants$root.C_POINTER$LAYOUT.withName("value"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("length")
    ).withName("_GLogField");
    public static MemoryLayout $LAYOUT() {
        return _GLogField.$struct$LAYOUT;
    }
    static final VarHandle key$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("key"));
    public static VarHandle key$VH() {
        return _GLogField.key$VH;
    }
    public static MemoryAddress key$get(MemorySegment seg) {
        return (MemoryAddress)_GLogField.key$VH.get(seg);
    }
    public static void key$set( MemorySegment seg, MemoryAddress x) {
        _GLogField.key$VH.set(seg, x);
    }
    public static MemoryAddress key$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GLogField.key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key$set(MemorySegment seg, long index, MemoryAddress x) {
        _GLogField.key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle value$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("value"));
    public static VarHandle value$VH() {
        return _GLogField.value$VH;
    }
    public static MemoryAddress value$get(MemorySegment seg) {
        return (MemoryAddress)_GLogField.value$VH.get(seg);
    }
    public static void value$set( MemorySegment seg, MemoryAddress x) {
        _GLogField.value$VH.set(seg, x);
    }
    public static MemoryAddress value$get(MemorySegment seg, long index) {
        return (MemoryAddress)_GLogField.value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GLogField.value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return _GLogField.length$VH;
    }
    public static long length$get(MemorySegment seg) {
        return (long)_GLogField.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, long x) {
        _GLogField.length$VH.set(seg, x);
    }
    public static long length$get(MemorySegment seg, long index) {
        return (long)_GLogField.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, long x) {
        _GLogField.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


